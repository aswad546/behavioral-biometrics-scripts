// yofi-telemetry-prod.min.js?v=202411081432
// Found on springstepshoes.com on Apr 18th 2025


( () => {
    var Es = Object.create;
    var Vn = Object.defineProperty;
    var ws = Object.getOwnPropertyDescriptor;
    var Ns = Object.getOwnPropertyNames;
    var Ss = Object.getPrototypeOf
      , bs = Object.prototype.hasOwnProperty;
    var _s = (j, B) => () => (B || j((B = {
        exports: {}
    }).exports, B),
    B.exports);
    var Ts = (j, B, U, ae) => {
        if (B && typeof B == "object" || typeof B == "function")
            for (let F of Ns(B))
                !bs.call(j, F) && F !== U && Vn(j, F, {
                    get: () => B[F],
                    enumerable: !(ae = ws(B, F)) || ae.enumerable
                });
        return j
    }
    ;
    var Os = (j, B, U) => (U = j != null ? Es(Ss(j)) : {},
    Ts(B || !j || !j.__esModule ? Vn(U, "default", {
        value: j,
        enumerable: !0
    }) : U, j));
    var Yn = _s( (yr, Yr) => {
        (function(j, B) {
            if (typeof yr == "object" && typeof Yr == "object")
                Yr.exports = B();
            else if (typeof define == "function" && define.amd)
                define([], B);
            else {
                var U = B();
                for (var ae in U)
                    (typeof yr == "object" ? yr : j)[ae] = U[ae]
            }
        }
        )(self, () => ( () => {
            var j = {
                139: function(F) {
                    F.exports = function() {
                        "use strict";
                        function R(x) {
                            return Number.isInteger(x) && x >= 0
                        }
                        function b(x) {
                            this.name = "ArgumentError",
                            this.message = x
                        }
                        return function(x, A) {
                            if (A = A || {},
                            typeof x != "function")
                                throw new b("fetch must be a function");
                            if (typeof A != "object")
                                throw new b("defaults must be an object");
                            if (A.retries !== void 0 && !R(A.retries))
                                throw new b("retries must be a positive integer");
                            if (A.retryDelay !== void 0 && !R(A.retryDelay) && typeof A.retryDelay != "function")
                                throw new b("retryDelay must be a positive integer or a function returning a positive integer");
                            if (A.retryOn !== void 0 && !Array.isArray(A.retryOn) && typeof A.retryOn != "function")
                                throw new b("retryOn property expects an array or function");
                            return A = Object.assign({
                                retries: 3,
                                retryDelay: 1e3,
                                retryOn: []
                            }, A),
                            function(V, y) {
                                var q = A.retries
                                  , Q = A.retryDelay
                                  , ce = A.retryOn;
                                if (y && y.retries !== void 0) {
                                    if (!R(y.retries))
                                        throw new b("retries must be a positive integer");
                                    q = y.retries
                                }
                                if (y && y.retryDelay !== void 0) {
                                    if (!R(y.retryDelay) && typeof y.retryDelay != "function")
                                        throw new b("retryDelay must be a positive integer or a function returning a positive integer");
                                    Q = y.retryDelay
                                }
                                if (y && y.retryOn) {
                                    if (!Array.isArray(y.retryOn) && typeof y.retryOn != "function")
                                        throw new b("retryOn property expects an array or function");
                                    ce = y.retryOn
                                }
                                return new Promise(function(Ce, f) {
                                    var m = function(_) {
                                        var E = typeof Request < "u" && V instanceof Request ? V.clone() : V;
                                        x(E, y).then(function(O) {
                                            if (Array.isArray(ce) && ce.indexOf(O.status) === -1)
                                                Ce(O);
                                            else if (typeof ce == "function")
                                                try {
                                                    return Promise.resolve(ce(_, null, O)).then(function(L) {
                                                        L ? w(_, null, O) : Ce(O)
                                                    }).catch(f)
                                                } catch (L) {
                                                    f(L)
                                                }
                                            else
                                                _ < q ? w(_, null, O) : Ce(O)
                                        }).catch(function(O) {
                                            if (typeof ce == "function")
                                                try {
                                                    Promise.resolve(ce(_, O, null)).then(function(L) {
                                                        L ? w(_, O, null) : f(O)
                                                    }).catch(function(L) {
                                                        f(L)
                                                    })
                                                } catch (L) {
                                                    f(L)
                                                }
                                            else
                                                _ < q ? w(_, O, null) : f(O)
                                        })
                                    };
                                    function w(_, E, O) {
                                        var L = typeof Q == "function" ? Q(_, E, O) : Q;
                                        setTimeout(function() {
                                            m(++_)
                                        }, L)
                                    }
                                    m(0)
                                }
                                )
                            }
                        }
                    }()
                }
            }
              , B = {};
            function U(F) {
                var R = B[F];
                if (R !== void 0)
                    return R.exports;
                var b = B[F] = {
                    exports: {}
                };
                return j[F].call(b.exports, b, b.exports, U),
                b.exports
            }
            U.d = (F, R) => {
                for (var b in R)
                    U.o(R, b) && !U.o(F, b) && Object.defineProperty(F, b, {
                        enumerable: !0,
                        get: R[b]
                    })
            }
            ,
            U.o = (F, R) => Object.prototype.hasOwnProperty.call(F, R),
            U.r = F => {
                typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(F, Symbol.toStringTag, {
                    value: "Module"
                }),
                Object.defineProperty(F, "__esModule", {
                    value: !0
                })
            }
            ;
            var ae = {};
            return ( () => {
                "use strict";
                U.r(ae),
                U.d(ae, {
                    AllSensors: () => Zr,
                    AvailableSensors: () => S,
                    BingGan: () => Fn,
                    FeatureGenerationError: () => ar,
                    Generators: () => es,
                    InvalidArgumentError: () => $e,
                    LogLevel: () => b,
                    NetworkTelemetryError: () => hr,
                    SensorError: () => nr,
                    SessionNotActiveError: () => or,
                    Utility: () => Mr,
                    YofiTelemetry: () => Xe,
                    YofiTelemetryError: () => q,
                    YofiTelemetryErrorWithCause: () => Q,
                    bundle: () => F,
                    common: () => R,
                    default: () => Wn,
                    feature: () => x
                });
                var F = {};
                U.r(F),
                U.d(F, {
                    Accelerometer: () => w,
                    AppLifeCycleEvent: () => _,
                    Battery: () => E,
                    BotD: () => Nt,
                    Bundle: () => O,
                    Click: () => L,
                    ClientInfo: () => Te,
                    ClipboardEvent: () => ve,
                    Clock: () => re,
                    ClosedRange: () => $,
                    ConsoleEvent: () => _e,
                    ContextMenuEvent: () => Z,
                    CustomEvent: () => Re,
                    ExceptionEvent: () => at,
                    FocusChange: () => ee,
                    FormSubmitEvent: () => De,
                    FrameRateEvent: () => He,
                    Gyroscope: () => rt,
                    InputChange: () => le,
                    KeyPress: () => ne,
                    Location: () => nt,
                    Magnetometer: () => it,
                    MouseWheel: () => ue,
                    NetworkEvent: () => fe,
                    Offset2D: () => be,
                    Orientation: () => st,
                    PermissionEvent: () => he,
                    Pointer: () => H,
                    RoundTripTime: () => St,
                    SealedBundle: () => jt,
                    SelectionEvent: () => se,
                    TargetElement: () => ie,
                    TextChange: () => Ve,
                    ViewportScroll: () => ot,
                    ViewportSizeEvent: () => de
                });
                var R = {};
                U.r(R),
                U.d(R, {
                    DevicePlatform: () => Ht,
                    Empty: () => bt,
                    ErrorResponse: () => _t,
                    SensorType: () => D,
                    TokenSelfResponse: () => Vt
                });
                var b, x = {};
                U.r(x),
                U.d(x, {
                    BytesList: () => ct,
                    DoubleList: () => lt,
                    DoubleMap: () => ut,
                    Feature: () => ke,
                    Int64List: () => ht,
                    StringList: () => dt
                }),
                function(n) {
                    n[n.DEBUG = 0] = "DEBUG",
                    n[n.INFO = 1] = "INFO",
                    n[n.WARN = 2] = "WARN",
                    n[n.ERROR = 3] = "ERROR",
                    n[n.OFF = 4] = "OFF"
                }(b || (b = {}));
                class A {
                    constructor(e=b.ERROR) {
                        let t = e;
                        typeof e == "string" && (t = b[e]),
                        t === void 0 && (t = b.ERROR),
                        this.logLevel = t
                    }
                    outputLog(e, t, r) {
                        t = `YofiTelemetrySDK: ${t}`,
                        e && (r ? e(t, r) : e(t))
                    }
                    debug(e, t) {
                        b.DEBUG >= this.logLevel && this.outputLog(console.debug, e, t)
                    }
                    info(e, t) {
                        b.INFO >= this.logLevel && this.outputLog(console.info, e, t)
                    }
                    warn(e, t) {
                        b.WARN >= this.logLevel && this.outputLog(console.warn, e, t)
                    }
                    error(e, t) {
                        b.ERROR >= this.logLevel && this.outputLog(console.error, e, t)
                    }
                }
                let V = "v0.0.76";
                class y {
                    constructor(e={
                        journeyIdSalt: ""
                    }) {
                        if (e.bundleGenerationInterval && (e.bundleGenerationInterval < y.MIN_BUNDLE_GENERATION_INTERVAL || e.bundleGenerationInterval > y.MAX_BUNDLE_GENERATION_INTERVAL))
                            throw new Error(`bundleGenerationInterval must be between ${y.MIN_BUNDLE_GENERATION_INTERVAL} and ${y.MAX_BUNDLE_GENERATION_INTERVAL}`);
                        if (e.globalSamplingRate && e.globalSamplingRate < 0)
                            throw new Error("globalSamplingRate must be set to a value greater than 0");
                        let t = e.logLevel !== void 0 ? e.logLevel : b.ERROR;
                        this.logger = new A(t),
                        this.logger.info("initializing YofiTelemetry Web SDK")
                    }
                    static checkInstance() {
                        if (!y.instance)
                            throw new Error("YofiTelemetry SDK must be initialized before use");
                        return y.instance
                    }
                    static isInitialized() {
                        return y.instance !== void 0
                    }
                    static startSession(e) {
                        return y.checkInstance().sessionManager.createSession(e)
                    }
                    static stopAllSessions() {
                        return y.checkInstance().sessionManager.stopAllSessions()
                    }
                    static activeSessionCount() {
                        return y.checkInstance().sessionManager.activeSessionCount
                    }
                    static version() {
                        return V
                    }
                }
                y.DEFAULT_GLOBAL_SAMPLING_RATE = 25,
                y.MIN_BUNDLE_GENERATION_INTERVAL = 250,
                y.MAX_BUNDLE_GENERATION_INTERVAL = 1e4,
                y.SESSION_DURATION_INFINITE = -1;
                class q extends Error {
                    constructor(e) {
                        super(e),
                        Object.setPrototypeOf(this, q.prototype)
                    }
                }
                class Q extends q {
                    constructor(e, t) {
                        super(t || e.message),
                        this._cause = e,
                        Object.setPrototypeOf(this, Q.prototype)
                    }
                    get cause() {
                        return this._cause
                    }
                }
                class ce {
                    constructor(e, t, r) {
                        this.logger = e,
                        this.errorService = t,
                        this.configuredCallbacks = r,
                        this.verifyCallbacks()
                    }
                    setCallback(e) {
                        this.configuredCallbacks = e,
                        this.verifyCallbacks()
                    }
                    onSessionStarted(e) {
                        var t;
                        try {
                            !((t = this.configuredCallbacks) === null || t === void 0) && t.onSessionStarted && this.configuredCallbacks.onSessionStarted(e)
                        } catch (r) {
                            this.errorService.reportException(r, e),
                            this.logger.warn('Error in "onSessionStarted" callback', r)
                        }
                    }
                    onSessionStopped(e) {
                        var t;
                        try {
                            !((t = this.configuredCallbacks) === null || t === void 0) && t.onSessionStopped && this.configuredCallbacks.onSessionStopped(e)
                        } catch (r) {
                            this.errorService.reportException(r, e),
                            this.logger.warn('Error in "onSessionStopped" callback', r)
                        }
                    }
                    onError(e) {
                        var t;
                        try {
                            !((t = this.configuredCallbacks) === null || t === void 0) && t.onError && this.configuredCallbacks.onError(e)
                        } catch (r) {
                            this.logger.warn('Error in "onError" callback', r)
                        }
                    }
                    onTargetElement(e, t) {
                        var r;
                        try {
                            if (!((r = this.configuredCallbacks) === null || r === void 0) && r.onTargetElement)
                                return this.configuredCallbacks.onTargetElement(e, t)
                        } catch (i) {
                            this.errorService.reportException(i),
                            this.logger.warn('Error in "onTargetElement" callback', i)
                        }
                        return null
                    }
                    verifyCallbacks() {
                        this.configuredCallbacks || (this.configuredCallbacks = {}),
                        this.configuredCallbacks.onTargetElement || (this.configuredCallbacks.onTargetElement = this.defaultOnTargetElement)
                    }
                    defaultOnTargetElement(e, t) {
                        var r, i, s, o, c, u;
                        let l = {};
                        if (t.getBoundingClientRect) {
                            let a = t.getBoundingClientRect();
                            l.logical_x_position = String(a.x),
                            l.logical_y_position = String(a.y),
                            l.logical_height = String(a.height),
                            l.logical_width = String(a.width)
                        }
                        if (t.id) {
                            l.id = t.id;
                            let a = document.querySelector(`label[for='${t.id}']`);
                            a && (l.label_text = a.textContent)
                        }
                        if (!((r = t.attributes) === null || r === void 0) && r.getNamedItem("name") && (l.name = t.attributes.getNamedItem("name").value),
                        !((i = t.attributes) === null || i === void 0) && i.getNamedItem("placeholder") && (l.placeholder = t.attributes.getNamedItem("placeholder").value),
                        (s = t.attributes) === null || s === void 0 ? void 0 : s.getNamedItem("disabled")) {
                            let a = t.attributes.getNamedItem("disabled").value;
                            l.disabled = a === "" ? "true" : a
                        } else
                            l.disabled = "false";
                        if (!((o = t.attributes) === null || o === void 0) && o.getNamedItem("hidden")) {
                            let a = t.attributes.getNamedItem("hidden").value;
                            l.hidden = a === "" ? "true" : a
                        } else
                            l.hidden = "false";
                        if (!((c = t.attributes) === null || c === void 0) && c.getNamedItem("required")) {
                            let a = t.attributes.getNamedItem("required").value;
                            l.required = a === "" ? "true" : a
                        } else
                            l.required = "false";
                        return !((u = t.attributes) === null || u === void 0) && u.getNamedItem("tabIndex") && (l.tab_index = t.attributes.getNamedItem("tabIndex").value),
                        l
                    }
                }
                let Ce = (n, e) => typeof e == "number" && Number.isNaN(e) ? "NaN" : e;
                class f {
                    constructor(e={}) {
                        Object.assign(this, e)
                    }
                    toJson() {
                        return JSON.stringify(this, Ce)
                    }
                }
                let m = n => {
                    let e, t, r, i;
                    if (n instanceof Array)
                        return n.map(function(s) {
                            return typeof s == "object" && (s = m(s)),
                            s
                        });
                    for (t in e = {},
                    n)
                        n.hasOwnProperty(t) && (r = t.replace(/_[a-z]/g, s => s.substring(1).toUpperCase()),
                        i = n[t],
                        (i instanceof Array || i !== null && i.constructor === Object) && (i = m(i)),
                        e[r] = i);
                    return e
                }
                ;
                class w extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            x: Number.isNaN(this.x) ? "NaN" : this.x,
                            y: Number.isNaN(this.y) ? "NaN" : this.y,
                            z: Number.isNaN(this.z) ? "NaN" : this.z
                        }
                    }
                    static create(e) {
                        return new w(e)
                    }
                    static fromJson(e) {
                        return new w(m(JSON.parse(e, (t, r) => ["x", "y", "z"].indexOf(t) >= 0 && r === "NaN" ? NaN : r)))
                    }
                }
                class _ extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            app_life_cycle_status: this.appLifeCycleStatus
                        }
                    }
                    static create(e) {
                        return new _(e)
                    }
                    static fromJson(e) {
                        return new _(m(JSON.parse(e)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.UNKNOWN_APP_LIFE_CYCLE_STATUS = 0] = "UNKNOWN_APP_LIFE_CYCLE_STATUS",
                        t[t.FOREGROUND = 1] = "FOREGROUND",
                        t[t.BACKGROUND = 2] = "BACKGROUND",
                        t[t.DESTROY = 3] = "DESTROY"
                    }
                    )(e = n.AppLifeCycleStatus || (n.AppLifeCycleStatus = {}))
                }
                )(_ || (_ = {}));
                class E extends f {
                    toJSON() {
                        return {
                            capacity: this.capacity,
                            state: this.state
                        }
                    }
                    static create(e) {
                        return new E(e)
                    }
                    static fromJson(e) {
                        return new E(m(JSON.parse(e)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.UNKNOWN = 0] = "UNKNOWN",
                        t[t.CHARGING = 1] = "CHARGING",
                        t[t.DISCHARGING = 2] = "DISCHARGING",
                        t[t.FULL = 3] = "FULL"
                    }
                    )(e = n.State || (n.State = {}))
                }
                )(E || (E = {}));
                class O extends f {
                    toJSON() {
                        return {
                            location_data: this.locationData,
                            accelerometer_data: this.accelerometerData,
                            magnetometer_data: this.magnetometerData,
                            gyroscope_data: this.gyroscopeData,
                            client_time: this.clientTime,
                            battery: this.battery,
                            orientation_data: this.orientationData,
                            pointer_data: this.pointerData,
                            linear_accelerometer_data: this.linearAccelerometerData,
                            index: this.index,
                            text_change_data: this.textChangeData,
                            key_press_data: this.keyPressData,
                            focus_change_data: this.focusChangeData,
                            viewport_scroll_data: this.viewportScrollData,
                            mouse_wheel_data: this.mouseWheelData,
                            permission_events: this.permissionEvents,
                            viewport_size_events: this.viewportSizeEvents,
                            app_life_cycle_events: this.appLifeCycleEvents,
                            custom_events: this.customEvents,
                            click_data: this.clickData,
                            is_final_bundle: this.isFinalBundle,
                            features: this.features,
                            input_change_data: this.inputChangeData,
                            form_submit_events: this.formSubmitEvents,
                            context_menu_events: this.contextMenuEvents,
                            frame_rate_event: this.frameRateEvent,
                            console_events: this.consoleEvents,
                            network_events: this.networkEvents,
                            exception_events: this.exceptionEvents,
                            clipboard_events: this.clipboardEvents,
                            botd: this.botd,
                            client_info: this.clientInfo,
                            selection_events: this.selectionEvents,
                            round_trip_time: this.roundTripTime
                        }
                    }
                    static create(e) {
                        return new O(e)
                    }
                    static fromJson(e) {
                        return new O(m(JSON.parse(e, (t, r) => t == "location_data" && r != null && Array.isArray(r) ? r.map(i => nt.fromJson(JSON.stringify(i))) : t == "accelerometer_data" && r != null && Array.isArray(r) ? r.map(i => w.fromJson(JSON.stringify(i))) : t == "magnetometer_data" && r != null && Array.isArray(r) ? r.map(i => it.fromJson(JSON.stringify(i))) : t == "gyroscope_data" && r != null && Array.isArray(r) ? r.map(i => rt.fromJson(JSON.stringify(i))) : t == "client_time" && r != null ? re.fromJson(JSON.stringify(r)) : t == "battery" && r != null ? E.fromJson(JSON.stringify(r)) : t == "orientation_data" && r != null && Array.isArray(r) ? r.map(i => st.fromJson(JSON.stringify(i))) : t == "pointer_data" && r != null && Array.isArray(r) ? r.map(i => H.fromJson(JSON.stringify(i))) : t == "linear_accelerometer_data" && r != null && Array.isArray(r) ? r.map(i => w.fromJson(JSON.stringify(i))) : t == "text_change_data" && r != null && Array.isArray(r) ? r.map(i => Ve.fromJson(JSON.stringify(i))) : t == "key_press_data" && r != null && Array.isArray(r) ? r.map(i => ne.fromJson(JSON.stringify(i))) : t == "focus_change_data" && r != null && Array.isArray(r) ? r.map(i => ee.fromJson(JSON.stringify(i))) : t == "viewport_scroll_data" && r != null && Array.isArray(r) ? r.map(i => ot.fromJson(JSON.stringify(i))) : t == "mouse_wheel_data" && r != null && Array.isArray(r) ? r.map(i => ue.fromJson(JSON.stringify(i))) : t == "permission_events" && r != null && Array.isArray(r) ? r.map(i => he.fromJson(JSON.stringify(i))) : t == "viewport_size_events" && r != null && Array.isArray(r) ? r.map(i => de.fromJson(JSON.stringify(i))) : t == "app_life_cycle_events" && r != null && Array.isArray(r) ? r.map(i => _.fromJson(JSON.stringify(i))) : t == "custom_events" && r != null && Array.isArray(r) ? r.map(i => Re.fromJson(JSON.stringify(i))) : t == "click_data" && r != null && Array.isArray(r) ? r.map(i => L.fromJson(JSON.stringify(i))) : t == "input_change_data" && r != null && Array.isArray(r) ? r.map(i => le.fromJson(JSON.stringify(i))) : t == "form_submit_events" && r != null && Array.isArray(r) ? r.map(i => De.fromJson(JSON.stringify(i))) : t == "context_menu_events" && r != null && Array.isArray(r) ? r.map(i => Z.fromJson(JSON.stringify(i))) : t == "frame_rate_event" && r != null ? He.fromJson(JSON.stringify(r)) : t == "console_events" && r != null && Array.isArray(r) ? r.map(i => _e.fromJson(JSON.stringify(i))) : t == "network_events" && r != null && Array.isArray(r) ? r.map(i => fe.fromJson(JSON.stringify(i))) : t == "exception_events" && r != null && Array.isArray(r) ? r.map(i => at.fromJson(JSON.stringify(i))) : r)))
                    }
                }
                class L extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            position: this.position,
                            target: this.target
                        }
                    }
                    static create(e) {
                        return new L(e)
                    }
                    static fromJson(e) {
                        return new L(m(JSON.parse(e, (t, r) => t == "position" && r != null ? be.fromJson(JSON.stringify(r)) : t == "target" && r != null ? ie.fromJson(JSON.stringify(r)) : r)))
                    }
                }
                class re extends f {
                    toJSON() {
                        return {
                            wall_time_millis: this.wallTimeMillis,
                            timer_millis: this.timerMillis,
                            timer_realtime_millis: this.timerRealtimeMillis
                        }
                    }
                    static create(e) {
                        return new re(e)
                    }
                    static fromJson(e) {
                        return new re(m(JSON.parse(e)))
                    }
                }
                class $ extends f {
                    toJSON() {
                        return {
                            lower_bound: Number.isNaN(this.lowerBound) ? "NaN" : this.lowerBound,
                            upper_bound: Number.isNaN(this.upperBound) ? "NaN" : this.upperBound
                        }
                    }
                    static create(e) {
                        return new $(e)
                    }
                    static fromJson(e) {
                        return new $(m(JSON.parse(e, (t, r) => ["lowerBound", "upperBound"].indexOf(t) >= 0 && r === "NaN" ? NaN : r)))
                    }
                }
                class Z extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            context_menu_status: this.contextMenuStatus,
                            target: this.target
                        }
                    }
                    static create(e) {
                        return new Z(e)
                    }
                    static fromJson(e) {
                        return new Z(m(JSON.parse(e, (t, r) => t == "target" && r != null ? ie.fromJson(JSON.stringify(r)) : r)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.UNKNOWN_CONTEXT_MENU_STATUS = 0] = "UNKNOWN_CONTEXT_MENU_STATUS",
                        t[t.OPEN = 1] = "OPEN",
                        t[t.CLOSED = 2] = "CLOSED"
                    }
                    )(e = n.ContextMenuStatus || (n.ContextMenuStatus = {}))
                }
                )(Z || (Z = {}));
                class Re extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            event_name: this.eventName,
                            properties: this.properties,
                            event_key: this.eventKey
                        }
                    }
                    static create(e) {
                        return new Re(e)
                    }
                    static fromJson(e) {
                        return new Re(m(JSON.parse(e)))
                    }
                }
                class ee extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            type: this.type,
                            target: this.target
                        }
                    }
                    static create(e) {
                        return new ee(e)
                    }
                    static fromJson(e) {
                        return new ee(m(JSON.parse(e, (t, r) => t == "target" && r != null ? ie.fromJson(JSON.stringify(r)) : r)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.UNKNOWN = 0] = "UNKNOWN",
                        t[t.FOCUS_GAINED = 1] = "FOCUS_GAINED",
                        t[t.FOCUS_LOST = 2] = "FOCUS_LOST"
                    }
                    )(e = n.Type || (n.Type = {}))
                }
                )(ee || (ee = {}));
                class De extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            submitter: this.submitter,
                            target: this.target
                        }
                    }
                    static create(e) {
                        return new De(e)
                    }
                    static fromJson(e) {
                        return new De(m(JSON.parse(e, (t, r) => t == "submitter" && r != null || t == "target" && r != null ? ie.fromJson(JSON.stringify(r)) : r)))
                    }
                }
                class He extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            frames_per_second: Number.isNaN(this.framesPerSecond) ? "NaN" : this.framesPerSecond
                        }
                    }
                    static create(e) {
                        return new He(e)
                    }
                    static fromJson(e) {
                        return new He(m(JSON.parse(e, (t, r) => ["framesPerSecond"].indexOf(t) >= 0 && r === "NaN" ? NaN : r)))
                    }
                }
                class rt extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            x: Number.isNaN(this.x) ? "NaN" : this.x,
                            y: Number.isNaN(this.y) ? "NaN" : this.y,
                            z: Number.isNaN(this.z) ? "NaN" : this.z
                        }
                    }
                    static create(e) {
                        return new rt(e)
                    }
                    static fromJson(e) {
                        return new rt(m(JSON.parse(e, (t, r) => ["x", "y", "z"].indexOf(t) >= 0 && r === "NaN" ? NaN : r)))
                    }
                }
                class le extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            target: this.target,
                            focus: this.focus,
                            masked_text: this.maskedText,
                            truncated_text: this.truncatedText,
                            action: this.action
                        }
                    }
                    static create(e) {
                        return new le(e)
                    }
                    static fromJson(e) {
                        return new le(m(JSON.parse(e, (t, r) => t == "target" && r != null ? ie.fromJson(JSON.stringify(r)) : r)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.UNKNOWN = 0] = "UNKNOWN",
                        t[t.CUT = 1] = "CUT",
                        t[t.PASTE = 2] = "PASTE",
                        t[t.AUTOFILL = 3] = "AUTOFILL",
                        t[t.REPLACEMENT = 4] = "REPLACEMENT"
                    }
                    )(e = n.Action || (n.Action = {}))
                }
                )(le || (le = {}));
                class ne extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            type: this.type,
                            special_key: this.specialKey,
                            masked_key: this.maskedKey,
                            target: this.target,
                            alt_key: this.altKey,
                            control_key: this.controlKey,
                            meta_key: this.metaKey,
                            shift_key: this.shiftKey
                        }
                    }
                    static create(e) {
                        return new ne(e)
                    }
                    static fromJson(e) {
                        return new ne(m(JSON.parse(e, (t, r) => t == "target" && r != null ? ie.fromJson(JSON.stringify(r)) : r)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.UNKNOWN = 0] = "UNKNOWN",
                        t[t.KEY_UP = 1] = "KEY_UP",
                        t[t.KEY_DOWN = 2] = "KEY_DOWN"
                    }
                    )(e = n.Type || (n.Type = {}))
                }
                )(ne || (ne = {}));
                class nt extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            horizontal_accuracy: Number.isNaN(this.horizontalAccuracy) ? "NaN" : this.horizontalAccuracy,
                            vertical_accurracy: Number.isNaN(this.verticalAccurracy) ? "NaN" : this.verticalAccurracy,
                            altitude: Number.isNaN(this.altitude) ? "NaN" : this.altitude,
                            bearing: Number.isNaN(this.bearing) ? "NaN" : this.bearing,
                            bearing_accuracy_degrees: Number.isNaN(this.bearingAccuracyDegrees) ? "NaN" : this.bearingAccuracyDegrees,
                            latitude: Number.isNaN(this.latitude) ? "NaN" : this.latitude,
                            longitude: Number.isNaN(this.longitude) ? "NaN" : this.longitude,
                            provider: this.provider,
                            speed: Number.isNaN(this.speed) ? "NaN" : this.speed,
                            speed_accurracy: Number.isNaN(this.speedAccurracy) ? "NaN" : this.speedAccurracy
                        }
                    }
                    static create(e) {
                        return new nt(e)
                    }
                    static fromJson(e) {
                        return new nt(m(JSON.parse(e, (t, r) => ["horizontalAccuracy", "verticalAccurracy", "altitude", "bearing", "bearingAccuracyDegrees", "latitude", "longitude", "speed", "speedAccurracy"].indexOf(t) >= 0 && r === "NaN" ? NaN : r)))
                    }
                }
                class it extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            x: Number.isNaN(this.x) ? "NaN" : this.x,
                            y: Number.isNaN(this.y) ? "NaN" : this.y,
                            z: Number.isNaN(this.z) ? "NaN" : this.z
                        }
                    }
                    static create(e) {
                        return new it(e)
                    }
                    static fromJson(e) {
                        return new it(m(JSON.parse(e, (t, r) => ["x", "y", "z"].indexOf(t) >= 0 && r === "NaN" ? NaN : r)))
                    }
                }
                class ue extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            wheel_delta_x: this.wheelDeltaX,
                            wheel_delta_y: this.wheelDeltaY,
                            wheel_mode: this.wheelMode,
                            wheel_delta_x_line: this.wheelDeltaXLine,
                            wheel_delta_y_line: this.wheelDeltaYLine,
                            wheel_delta_x_page: this.wheelDeltaXPage,
                            wheel_delta_y_page: this.wheelDeltaYPage
                        }
                    }
                    static create(e) {
                        return new ue(e)
                    }
                    static fromJson(e) {
                        return new ue(m(JSON.parse(e)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.UNKNOWN_WHEEL_MODE = 0] = "UNKNOWN_WHEEL_MODE",
                        t[t.PIXEL = 1] = "PIXEL",
                        t[t.LINE = 2] = "LINE",
                        t[t.PAGE = 3] = "PAGE"
                    }
                    )(e = n.WheelMode || (n.WheelMode = {}))
                }
                )(ue || (ue = {}));
                class be extends f {
                    toJSON() {
                        return {
                            dx: Number.isNaN(this.dx) ? "NaN" : this.dx,
                            dy: Number.isNaN(this.dy) ? "NaN" : this.dy
                        }
                    }
                    static create(e) {
                        return new be(e)
                    }
                    static fromJson(e) {
                        return new be(m(JSON.parse(e, (t, r) => ["dx", "dy"].indexOf(t) >= 0 && r === "NaN" ? NaN : r)))
                    }
                }
                class st extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            azimuth: Number.isNaN(this.azimuth) ? "NaN" : this.azimuth,
                            pitch: Number.isNaN(this.pitch) ? "NaN" : this.pitch,
                            roll: Number.isNaN(this.roll) ? "NaN" : this.roll
                        }
                    }
                    static create(e) {
                        return new st(e)
                    }
                    static fromJson(e) {
                        return new st(m(JSON.parse(e, (t, r) => ["azimuth", "pitch", "roll"].indexOf(t) >= 0 && r === "NaN" ? NaN : r)))
                    }
                }
                class he extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            sensor_type: this.sensorType,
                            permission_status: this.permissionStatus
                        }
                    }
                    static create(e) {
                        return new he(e)
                    }
                    static fromJson(e) {
                        return new he(m(JSON.parse(e)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.UNKNOWN_PERMISSION_STATUS = 0] = "UNKNOWN_PERMISSION_STATUS",
                        t[t.ALLOWED = 1] = "ALLOWED",
                        t[t.DENIED = 2] = "DENIED",
                        t[t.UNDETERMINED_BY_USER = 3] = "UNDETERMINED_BY_USER",
                        t[t.REQUIRES_PROMPT_TO_DETERMINE = 4] = "REQUIRES_PROMPT_TO_DETERMINE",
                        t[t.SENSOR_NOT_AVAILABLE = 5] = "SENSOR_NOT_AVAILABLE"
                    }
                    )(e = n.PermissionStatus || (n.PermissionStatus = {}))
                }
                )(he || (he = {}));
                class H extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            type: this.type,
                            buttons: this.buttons,
                            button: this.button,
                            event_type: this.eventType,
                            delta: this.delta,
                            device: this.device,
                            distance: Number.isNaN(this.distance) ? "NaN" : this.distance,
                            distance_range: this.distanceRange,
                            obscured: this.obscured,
                            orientation: Number.isNaN(this.orientation) ? "NaN" : this.orientation,
                            position: this.position,
                            pressure: Number.isNaN(this.pressure) ? "NaN" : this.pressure,
                            pressure_range: this.pressureRange,
                            radius_major: Number.isNaN(this.radiusMajor) ? "NaN" : this.radiusMajor,
                            radius_minor: Number.isNaN(this.radiusMinor) ? "NaN" : this.radiusMinor,
                            radius_range: this.radiusRange,
                            size: Number.isNaN(this.size) ? "NaN" : this.size,
                            synthesized: this.synthesized,
                            tilt: Number.isNaN(this.tilt) ? "NaN" : this.tilt,
                            is_software_keyboard: this.isSoftwareKeyboard,
                            viewport_boundary_status: this.viewportBoundaryStatus,
                            target: this.target
                        }
                    }
                    static create(e) {
                        return new H(e)
                    }
                    static fromJson(e) {
                        return new H(m(JSON.parse(e, (t, r) => t == "delta" && r != null ? be.fromJson(JSON.stringify(r)) : t == "distance_range" && r != null ? $.fromJson(JSON.stringify(r)) : t == "position" && r != null ? be.fromJson(JSON.stringify(r)) : t == "pressure_range" && r != null || t == "radius_range" && r != null ? $.fromJson(JSON.stringify(r)) : t == "target" && r != null ? ie.fromJson(JSON.stringify(r)) : ["distance", "orientation", "pressure", "radiusMajor", "radiusMinor", "size", "tilt"].indexOf(t) >= 0 && r === "NaN" ? NaN : r)))
                    }
                }
                (function(n) {
                    let e, t, r;
                    (function(i) {
                        i[i.UNKNOWN = 0] = "UNKNOWN",
                        i[i.STYLUS = 1] = "STYLUS",
                        i[i.INVERTED_STYLUS = 2] = "INVERTED_STYLUS",
                        i[i.TOUCH = 3] = "TOUCH",
                        i[i.MOUSE = 4] = "MOUSE"
                    }
                    )(e = n.Type || (n.Type = {})),
                    function(i) {
                        i[i.UNKNOWN_VIEWPORT_BOUNDARY_STATUS = 0] = "UNKNOWN_VIEWPORT_BOUNDARY_STATUS",
                        i[i.ENTER_VIEWPORT = 1] = "ENTER_VIEWPORT",
                        i[i.IN_VIEWPORT = 2] = "IN_VIEWPORT",
                        i[i.LEAVE_VIEWPORT = 3] = "LEAVE_VIEWPORT"
                    }(t = n.ViewportBoundaryStatus || (n.ViewportBoundaryStatus = {})),
                    function(i) {
                        i[i.UNKNOWN = 0] = "UNKNOWN",
                        i[i.DOWN = 1] = "DOWN",
                        i[i.UP = 2] = "UP",
                        i[i.MOVE = 3] = "MOVE",
                        i[i.ENTER = 4] = "ENTER",
                        i[i.LEAVE = 5] = "LEAVE"
                    }(r = n.EventType || (n.EventType = {}))
                }
                )(H || (H = {}));
                class jt extends f {
                    toJSON() {
                        return {
                            bundle: this.bundle,
                            app_id: this.appId,
                            credential_id: this.credentialId,
                            session_id: this.sessionId,
                            user_id: this.userId,
                            server_time_millis: this.serverTimeMillis,
                            install_id: this.installId,
                            client_user_id: this.clientUserId,
                            remote_ip: this.remoteIp,
                            journey_id: this.journeyId
                        }
                    }
                    static create(e) {
                        return new jt(e)
                    }
                    static fromJson(e) {
                        return new jt(m(JSON.parse(e, (t, r) => t == "bundle" && r != null ? O.fromJson(JSON.stringify(r)) : r)))
                    }
                }
                class ie extends f {
                    toJSON() {
                        return {
                            target_id: this.targetId,
                            target_type: this.targetType,
                            tag_name: this.tagName,
                            id: this.id,
                            class_name: this.className,
                            text_content: this.textContent,
                            placeholder: this.placeholder,
                            role: this.role,
                            aria: this.aria,
                            data: this.data,
                            href: this.href,
                            page_url: this.page_url
                        }
                    }
                    static create(e) {
                        return new ie(e)
                    }
                    static fromJson(e) {
                        return new ie(m(JSON.parse(e)))
                    }
                }
                class Ve extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            target: this.target,
                            focus: this.focus,
                            masked_text: this.maskedText,
                            truncated_text: this.truncatedText,
                            action: this.action
                        }
                    }
                    static create(e) {
                        return new Ve(e)
                    }
                    static fromJson(e) {
                        return new Ve(m(JSON.parse(e, (t, r) => t == "target" && r != null ? ie.fromJson(JSON.stringify(r)) : r)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.UNKNOWN = 0] = "UNKNOWN",
                        t[t.CUT = 1] = "CUT",
                        t[t.PASTE = 2] = "PASTE"
                    }
                    )(e = n.Action || (n.Action = {}))
                }
                )(Ve || (Ve = {}));
                class ot extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            x_position: this.xPosition,
                            y_position: this.yPosition
                        }
                    }
                    static create(e) {
                        return new ot(e)
                    }
                    static fromJson(e) {
                        return new ot(m(JSON.parse(e)))
                    }
                }
                class de extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            device_physical_width: this.devicePhysicalWidth,
                            device_physical_height: this.devicePhysicalHeight,
                            device_logical_width: this.deviceLogicalWidth,
                            device_logical_height: this.deviceLogicalHeight,
                            device_pixel_ratio: Number.isNaN(this.devicePixelRatio) ? "NaN" : this.devicePixelRatio,
                            viewport_orientation: this.viewportOrientation,
                            screen_color_depth: this.screenColorDepth || 0,
                            screen_pixel_depth: this.screenPixelDepth || 0,
                            screen_width: this.screenWidth || 0,
                            screen_height: this.screenHeight || 0
                        }
                    }
                    static create(e) {
                        return new de(e)
                    }
                    static fromJson(e) {
                        return new de(m(JSON.parse(e, (t, r) => ["devicePixelRatio"].indexOf(t) >= 0 && r === "NaN" ? NaN : r)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.UNKNOWN_ORIENTATION_DIRECTION = 0] = "UNKNOWN_ORIENTATION_DIRECTION",
                        t[t.PORTRAIT_PRIMARY = 1] = "PORTRAIT_PRIMARY",
                        t[t.PORTRAIT_SECONDARY = 2] = "PORTRAIT_SECONDARY",
                        t[t.LANDSCAPE_PRIMARY = 3] = "LANDSCAPE_PRIMARY",
                        t[t.LANDSCAPE_SECONDARY = 4] = "LANDSCAPE_SECONDARY"
                    }
                    )(e = n.ViewportOrientationDirection || (n.ViewportOrientationDirection = {}))
                }
                )(de || (de = {}));
                class _e extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            content: this.content,
                            type: this.type
                        }
                    }
                    static create(e) {
                        return new _e(e)
                    }
                    static fromJson(e) {
                        return new _e(m(JSON.parse(e, (t, r) => r)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.UNKNOWN = 0] = "UNKNOWN",
                        t[t.ERROR = 1] = "ERROR",
                        t[t.INFO = 2] = "INFO",
                        t[t.LOG = 3] = "LOG",
                        t[t.WARN = 4] = "WARN"
                    }
                    )(e = n.ConsoleType || (n.ConsoleType = {}))
                }
                )(_e || (_e = {}));
                class fe extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            data: this.data,
                            type: this.type,
                            url: this.url,
                            method: this.method
                        }
                    }
                    static create(e) {
                        return new fe(e)
                    }
                    static fromJson(e) {
                        return new fe(m(JSON.parse(e, (t, r) => r)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.UNKNOWN = 0] = "UNKNOWN",
                        t[t.XHR = 1] = "XHR",
                        t[t.FETCH = 2] = "FETCH"
                    }
                    )(e = n.NetworkType || (n.NetworkType = {}))
                }
                )(fe || (fe = {}));
                class at extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            content: this.content,
                            determined_at_list: this.determinedAtList
                        }
                    }
                    static create(e) {
                        return new at(e)
                    }
                    static fromJson(e) {
                        return new at(m(JSON.parse(e, (t, r) => r)))
                    }
                }
                class ve extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            type: this.type,
                            target: this.target
                        }
                    }
                    static create(e) {
                        return new ve(e)
                    }
                    static fromJson(e) {
                        return new ve(m(JSON.parse(e, (t, r) => r)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.UNKNOWN = 0] = "UNKNOWN",
                        t[t.CUT = 1] = "CUT",
                        t[t.COPY = 2] = "COPY",
                        t[t.PASTE = 3] = "PASTE"
                    }
                    )(e = n.EventType || (n.EventType = {}))
                }
                )(ve || (ve = {}));
                class Nt extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            bot: typeof this.bot == "boolean" && this.bot,
                            bot_kind: `${this.botKind || ""}`,
                            version: `${this.version || ""}`,
                            collected_data: `${this.collectedData || ""}`,
                            detectors: `${this.detectors || ""}`
                        }
                    }
                    static create(e) {
                        return new Nt(e)
                    }
                    static fromJson(e) {
                        return new Nt(m(JSON.parse(e)))
                    }
                }
                class Te extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            user_agent: this.userAgent,
                            device_memory: this.deviceMemory,
                            hardware_concurrency: this.hardwareConcurrency,
                            max_touch_points: this.maxTouchPoints,
                            language: this.language,
                            languages: this.languages,
                            vendor: this.vendor,
                            product_sub: this.productSub,
                            platform: this.platform,
                            onLine: this.onLine,
                            cookie_enabled: this.cookieEnabled,
                            pdf_viewer_enabled: this.pdfViewerEnabled,
                            battery: this.battery,
                            connect_effective_type: this.connectEffectiveType,
                            webgl: this.webgl,
                            performance_timing: this.performanceTiming,
                            connect_rtt: this.connectRTT,
                            permissions: this.permissions
                        }
                    }
                    static create(e) {
                        return new Te(e)
                    }
                    static fromJson(e) {
                        return new Te(m(JSON.parse(e)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.UNKNOWN = -1] = "UNKNOWN",
                        t[t.ENABLED = 1] = "ENABLED",
                        t[t.DISABLED = 0] = "DISABLED"
                    }
                    )(e = n.Enabled || (n.Enabled = {}))
                }
                )(Te || (Te = {}));
                class se extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            type: this.type,
                            range_count: this.rangeCount || 0,
                            target: this.target,
                            focus_offset: this.focusOffset,
                            anchor_offset: this.anchorOffset,
                            direction: this.direction,
                            select_length: this.selectLength || 0
                        }
                    }
                    static create(e) {
                        return new se(e)
                    }
                    static fromJson(e) {
                        return new se(m(JSON.parse(e, (t, r) => r)))
                    }
                }
                (function(n) {
                    let e, t;
                    (function(r) {
                        r[r.NONE = 0] = "NONE",
                        r[r.CART = 1] = "CART",
                        r[r.RANGE = 2] = "RANGE"
                    }
                    )(e = n.Type || (n.Type = {})),
                    function(r) {
                        r[r.NONE = 0] = "NONE",
                        r[r.FORWARD = 1] = "FORWARD",
                        r[r.BACKWARD = 2] = "BACKWARD"
                    }(t = n.Direction || (n.Direction = {}))
                }
                )(se || (se = {}));
                class St extends f {
                    toJSON() {
                        return {
                            determined_at: this.determinedAt,
                            time_in_ms: this.timeInMs || 0
                        }
                    }
                    static create(e) {
                        return new St(e)
                    }
                    static fromJson(e) {
                        return new St(m(JSON.parse(e)))
                    }
                }
                var Ht, D;
                (function(n) {
                    n[n.UNKNOWN = 0] = "UNKNOWN",
                    n[n.iOS = 1] = "iOS",
                    n[n.ANDROID = 2] = "ANDROID",
                    n[n.WEB = 3] = "WEB"
                }
                )(Ht || (Ht = {})),
                function(n) {
                    n[n.UNKNOWN_SENSOR = 0] = "UNKNOWN_SENSOR",
                    n[n.LOCATION = 1] = "LOCATION",
                    n[n.ACCELEROMETER = 2] = "ACCELEROMETER",
                    n[n.LINEAR_ACCELEROMETER = 3] = "LINEAR_ACCELEROMETER",
                    n[n.MAGNETOMETER = 4] = "MAGNETOMETER",
                    n[n.GYROSCOPE = 5] = "GYROSCOPE",
                    n[n.ORIENTATION = 7] = "ORIENTATION",
                    n[n.POINTER = 14] = "POINTER",
                    n[n.TEXT_CHANGE = 15] = "TEXT_CHANGE",
                    n[n.KEY_PRESS = 16] = "KEY_PRESS",
                    n[n.FOCUS_CHANGE = 17] = "FOCUS_CHANGE",
                    n[n.VIEW_SCROLL = 18] = "VIEW_SCROLL",
                    n[n.MOUSE_WHEEL = 19] = "MOUSE_WHEEL",
                    n[n.CLICK = 20] = "CLICK",
                    n[n.INPUT_CHANGE = 21] = "INPUT_CHANGE",
                    n[n.FORM_SUBMIT = 22] = "FORM_SUBMIT",
                    n[n.CONTEXT_MENU = 23] = "CONTEXT_MENU",
                    n[n.FRAME_RATE = 24] = "FRAME_RATE",
                    n[n.CONSOLE = 25] = "CONSOLE",
                    n[n.NETWORK = 26] = "NETWORK",
                    n[n.EXCEPTION = 27] = "EXCEPTION",
                    n[n.CLIPBOARD = 28] = "CLIPBOARD",
                    n[n.BOTD = 29] = "BOTD",
                    n[n.SELECTION = 30] = "SELECTION",
                    n[n.ROUND_TRIP_TIME = 31] = "ROUND_TRIP_TIME"
                }(D || (D = {}));
                class bt extends f {
                    static create(e) {
                        return new bt(e)
                    }
                    static fromJson(e) {
                        return new bt(m(JSON.parse(e)))
                    }
                }
                class _t extends f {
                    toJSON() {
                        return {
                            type: this.type,
                            param: this.param,
                            message: this.message
                        }
                    }
                    static create(e) {
                        return new _t(e)
                    }
                    static fromJson(e) {
                        return new _t(m(JSON.parse(e)))
                    }
                }
                class Vt extends f {
                    toJSON() {
                        return {
                            app_id: this.appId,
                            project_id: this.projectId,
                            scopes: this.scopes,
                            user_id: this.userId,
                            credential_id: this.credentialId,
                            type: this.type
                        }
                    }
                    static create(e) {
                        return new Vt(e)
                    }
                    static fromJson(e) {
                        return new Vt(m(JSON.parse(e)))
                    }
                }
                class Tt extends f {
                    toJSON() {
                        return {
                            primary_url: this.primaryUrl,
                            backup_url: this.backupUrl,
                            primary_network_url: this.primaryNetworkUrl,
                            backup_network_url: this.backupNetworkUrl
                        }
                    }
                    static create(e) {
                        return new Tt(e)
                    }
                    static fromJson(e) {
                        return new Tt(m(JSON.parse(e)))
                    }
                }
                class Yt extends f {
                    toJSON() {
                        return {
                            public_token: this.publicToken,
                            user_id: this.userId,
                            expires_in_seconds: this.expiresInSeconds,
                            max_idle_time_minutes: this.maxIdleTimeMinutes,
                            journey_id: this.journeyId,
                            client_id: this.clientId,
                            client_domain: this.clientDomain
                        }
                    }
                    static create(e) {
                        return new Yt(e)
                    }
                    static fromJson(e) {
                        return new Yt(m(JSON.parse(e)))
                    }
                }
                class $t extends f {
                    toJSON() {
                        return {
                            app_access_token: this.appAccessToken
                        }
                    }
                    static create(e) {
                        return new $t(e)
                    }
                    static fromJson(e) {
                        return new $t(m(JSON.parse(e)))
                    }
                }
                class zt extends f {
                    toJSON() {
                        return {
                            centroid: this.centroid,
                            radius: Number.isNaN(this.radius) ? "NaN" : this.radius
                        }
                    }
                    static create(e) {
                        return new zt(e)
                    }
                    static fromJson(e) {
                        return new zt(m(JSON.parse(e, (t, r) => t == "centroid" && r != null ? Qt.fromJson(JSON.stringify(r)) : ["radius"].indexOf(t) >= 0 && r === "NaN" ? NaN : r)))
                    }
                }
                class qt extends f {
                    toJSON() {
                        return {
                            session_id: this.sessionId,
                            journey_id: this.journeyId,
                            bundles: this.bundles,
                            install_id: this.installId,
                            client_user_id: this.clientUserId
                        }
                    }
                    static create(e) {
                        return new qt(e)
                    }
                    static fromJson(e) {
                        return new qt(m(JSON.parse(e, (t, r) => t == "bundles" && r != null && Array.isArray(r) ? r.map(i => O.fromJson(JSON.stringify(i))) : r)))
                    }
                }
                class Xt extends f {
                    toJSON() {
                        return {
                            error_count: this.errorCount,
                            success_count: this.successCount
                        }
                    }
                    static create(e) {
                        return new Xt(e)
                    }
                    static fromJson(e) {
                        return new Xt(m(JSON.parse(e)))
                    }
                }
                class Qt extends f {
                    toJSON() {
                        return {
                            latitude: Number.isNaN(this.latitude) ? "NaN" : this.latitude,
                            longitude: Number.isNaN(this.longitude) ? "NaN" : this.longitude
                        }
                    }
                    static create(e) {
                        return new Qt(e)
                    }
                    static fromJson(e) {
                        return new Qt(m(JSON.parse(e, (t, r) => ["latitude", "longitude"].indexOf(t) >= 0 && r === "NaN" ? NaN : r)))
                    }
                }
                class Zt extends f {
                    toJSON() {
                        return {
                            name: this.name,
                            version: this.version
                        }
                    }
                    static create(e) {
                        return new Zt(e)
                    }
                    static fromJson(e) {
                        return new Zt(m(JSON.parse(e)))
                    }
                }
                class Ot extends f {
                    toJSON() {
                        return {
                            session_id: this.sessionId,
                            app_id: this.appId,
                            oldest_event: this.oldestEvent,
                            newest_event: this.newestEvent,
                            created_at: this.createdAt,
                            circle: this.circle,
                            metadata: this.metadata,
                            counters: this.counters,
                            labels: this.labels,
                            cdfs: this.cdfs,
                            region_id: this.regionId,
                            client_session_group_id: this.clientSessionGroupId,
                            config: this.config,
                            journey_id: this.journeyId
                        }
                    }
                    static create(e) {
                        return new Ot(e)
                    }
                    static fromJson(e) {
                        return new Ot(m(JSON.parse(e, (t, r) => t == "circle" && r != null ? zt.fromJson(JSON.stringify(r)) : t == "metadata" && r != null ? Ie.fromJson(JSON.stringify(r)) : t == "config" && r != null ? At.fromJson(JSON.stringify(r)) : ["oldestEvent", "newestEvent", "createdAt"].indexOf(t) >= 0 ? (i => typeof i == "string" && /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.?\d{0,}Z/.test(i) ? new Date(Date.parse(i)) : i)(r) : r)))
                    }
                }
                class At extends f {
                    toJSON() {
                        return {
                            requested_duration_millis: this.requestedDurationMillis,
                            mask_text: this.maskText,
                            sensor_sampling_rate: this.sensorSamplingRate,
                            bundle_generation_interval_millis: this.bundleGenerationIntervalMillis,
                            requested_sensors: this.requestedSensors
                        }
                    }
                    static create(e) {
                        return new At(e)
                    }
                    static fromJson(e) {
                        return new At(m(JSON.parse(e)))
                    }
                }
                class er extends f {
                    toJSON() {
                        return {
                            labels: this.labels
                        }
                    }
                    static create(e) {
                        return new er(e)
                    }
                    static fromJson(e) {
                        return new er(m(JSON.parse(e, (t, r) => r)))
                    }
                }
                class tr extends f {
                    static create(e) {
                        return new tr(e)
                    }
                    static fromJson(e) {
                        return new tr(m(JSON.parse(e)))
                    }
                }
                class Ie extends f {
                    toJSON() {
                        return {
                            install_id: this.installId,
                            platform: this.platform,
                            manufacturer: this.manufacturer,
                            model: this.model,
                            system_version: this.systemVersion,
                            is_device_physical: this.isDevicePhysical,
                            recording_profile: this.recordingProfile,
                            device_physical_width: this.devicePhysicalWidth,
                            device_physical_height: this.devicePhysicalHeight,
                            device_logical_width: this.deviceLogicalWidth,
                            device_logical_height: this.deviceLogicalHeight,
                            release_version: this.releaseVersion,
                            journey_id_salt: this.journeyIdSalt || "",
                            bing_gan: this.bingGan || "",
                            bg_architecture: this.bg_architecture,
                            bg_battery: this.bg_battery,
                            bg_browser: this.bg_browser,
                            bg_canvas: this.bg_canvas,
                            bg_color_depth: this.bg_color_depth,
                            bg_color_gamut: this.bg_color_gamut,
                            bg_contrast: this.bg_contrast,
                            bg_cookie: this.bg_cookie,
                            bg_device_memory: this.bg_device_memory,
                            bg_device_pixel_ratio: this.bg_device_pixel_ratio,
                            bg_device_platform: this.bg_device_platform,
                            bg_fonts: this.bg_fonts,
                            bg_hardware_concurrency: this.bg_hardware_concurrency,
                            bg_languages: this.bg_languages,
                            bg_math_tan: this.bg_math_tan,
                            bg_max_touch_points: this.bg_max_touch_points,
                            bg_plugin: this.bg_plugin,
                            bg_screen_resolution: this.bg_screen_resolution,
                            bg_storage: this.bg_storage,
                            bg_touch_support: this.bg_touch_support,
                            bg_webgl: this.bg_webgl,
                            bg_webgl_info: this.bg_webgl_info,
                            bg_incognito: this.bg_incognito,
                            bg_timezone: this.bg_timezone,
                            bg_version: this.bg_version
                        }
                    }
                    static create(e) {
                        return new Ie(e)
                    }
                    static fromJson(e) {
                        return new Ie(m(JSON.parse(e, (t, r) => t == "recording_profile" && r != null ? Zt.fromJson(JSON.stringify(r)) : r)))
                    }
                }
                (function(n) {
                    let e, t;
                    (function(r) {
                        r.UNKNOWN = "0",
                        r.iOS = "1",
                        r.ANDROID = "2",
                        r.WEB = "3"
                    }
                    )(e = n.Platform || (n.Platform = {})),
                    function(r) {
                        r.Yes = "1",
                        r.No = "0"
                    }(t = n.IsDevicePhysical || (n.IsDevicePhysical = {}))
                }
                )(Ie || (Ie = {}));
                class Ue extends f {
                    toJSON() {
                        return {
                            title: this.title,
                            timestamp: this.timestamp,
                            platform: this.platform,
                            manufacturer: this.manufacturer,
                            model: this.model,
                            os_version: this.osVersion,
                            level: this.level,
                            release_version: this.releaseVersion,
                            proguard_uuid: this.proguardUuid,
                            exception: this.exception,
                            additional_tags: this.additionalTags
                        }
                    }
                    static create(e) {
                        return new Ue(e)
                    }
                    static fromJson(e) {
                        return new Ue(m(JSON.parse(e, (t, r) => t == "exception" && r != null ? Ct.fromJson(JSON.stringify(r)) : r)))
                    }
                }
                (function(n) {
                    let e;
                    (function(t) {
                        t[t.INVALID = 0] = "INVALID",
                        t[t.DEBUG = 1] = "DEBUG",
                        t[t.INFO = 2] = "INFO",
                        t[t.WARNING = 3] = "WARNING",
                        t[t.ERROR = 4] = "ERROR",
                        t[t.FATAL = 5] = "FATAL"
                    }
                    )(e = n.Level || (n.Level = {}))
                }
                )(Ue || (Ue = {}));
                class Ct extends f {
                    toJSON() {
                        return {
                            type: this.type,
                            value: this.value,
                            stacktrace: this.stacktrace
                        }
                    }
                    static create(e) {
                        return new Ct(e)
                    }
                    static fromJson(e) {
                        return new Ct(m(JSON.parse(e, (t, r) => t == "stacktrace" && r != null && Array.isArray(r) ? r.map(i => Rt.fromJson(JSON.stringify(i))) : r)))
                    }
                }
                class Rt extends f {
                    toJSON() {
                        return {
                            function: this.function,
                            module: this.module,
                            filename: this.filename,
                            line_no: this.lineNo,
                            col_no: this.colNo
                        }
                    }
                    static create(e) {
                        return new Rt(e)
                    }
                    static fromJson(e) {
                        return new Rt(m(JSON.parse(e)))
                    }
                }
                class ct extends f {
                    toJSON() {
                        return {
                            value: this.value
                        }
                    }
                    static create(e) {
                        return new ct(e)
                    }
                    static fromJson(e) {
                        return new ct(m(JSON.parse(e)))
                    }
                }
                class lt extends f {
                    toJSON() {
                        return {
                            value: this.value
                        }
                    }
                    static create(e) {
                        return new lt(e)
                    }
                    static fromJson(e) {
                        return new lt(m(JSON.parse(e, (t, r) => ["value"].indexOf(t) >= 0 ? JSON.parse(JSON.stringify(r), (i, s) => typeof s == "string" && s === "NaN" ? NaN : s) : r)))
                    }
                }
                class ut extends f {
                    toJSON() {
                        return {
                            value: this.value
                        }
                    }
                    static create(e) {
                        return new ut(e)
                    }
                    static fromJson(e) {
                        return new ut(m(JSON.parse(e, (t, r) => ["value"].indexOf(t) >= 0 ? JSON.parse(JSON.stringify(r), (i, s) => typeof s == "string" && s === "NaN" ? NaN : s) : r)))
                    }
                }
                class ht extends f {
                    toJSON() {
                        return {
                            value: this.value
                        }
                    }
                    static create(e) {
                        return new ht(e)
                    }
                    static fromJson(e) {
                        return new ht(m(JSON.parse(e)))
                    }
                }
                class dt extends f {
                    toJSON() {
                        return {
                            value: this.value
                        }
                    }
                    static create(e) {
                        return new dt(e)
                    }
                    static fromJson(e) {
                        return new dt(m(JSON.parse(e)))
                    }
                }
                class ke extends f {
                    toJSON() {
                        return {
                            bytes_list: this.bytesList,
                            double_list: this.doubleList,
                            int64_list: this.int64List,
                            string_list: this.stringList,
                            double_map: this.doubleMap
                        }
                    }
                    static create(e) {
                        return new ke(e)
                    }
                    static fromJson(e) {
                        return new ke(m(JSON.parse(e, (t, r) => t == "bytes_list" && r != null ? ct.fromJson(JSON.stringify(r)) : t == "double_list" && r != null ? lt.fromJson(JSON.stringify(r)) : t == "int64_list" && r != null ? ht.fromJson(JSON.stringify(r)) : t == "string_list" && r != null ? dt.fromJson(JSON.stringify(r)) : t == "double_map" && r != null ? ut.fromJson(JSON.stringify(r)) : r)))
                    }
                }
                let v = (n, e) => {
                    let t = Number(n);
                    return e === void 0 && e != null || !isNaN(t) ? Math.round(t) : e
                }
                , $r = {
                    randomUUID: typeof crypto < "u" && crypto.randomUUID && crypto.randomUUID.bind(crypto)
                }, rr, qn = new Uint8Array(16);
                function zr() {
                    if (!rr && (rr = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto),
                    !rr))
                        throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
                    return rr(qn)
                }
                let X = [];
                for (let n = 0; n < 256; ++n)
                    X.push((n + 256).toString(16).slice(1));
                function Er(n, e=0) {
                    return (X[n[e + 0]] + X[n[e + 1]] + X[n[e + 2]] + X[n[e + 3]] + "-" + X[n[e + 4]] + X[n[e + 5]] + "-" + X[n[e + 6]] + X[n[e + 7]] + "-" + X[n[e + 8]] + X[n[e + 9]] + "-" + X[n[e + 10]] + X[n[e + 11]] + X[n[e + 12]] + X[n[e + 13]] + X[n[e + 14]] + X[n[e + 15]]).toLowerCase()
                }
                let It = function(n, e, t) {
                    if ($r.randomUUID && !e && !n)
                        return $r.randomUUID();
                    let r = (n = n || {}).random || (n.rng || zr)();
                    if (r[6] = 15 & r[6] | 64,
                    r[8] = 63 & r[8] | 128,
                    e) {
                        t = t || 0;
                        for (let i = 0; i < 16; ++i)
                            e[t + i] = r[i];
                        return e
                    }
                    return Er(r)
                };
                var Ye, Pe, S;
                (function(n) {
                    n.Chrome = "Chrome",
                    n.Firefox = "Firefox",
                    n.Safari = "Safari",
                    n.Edge = "Edge",
                    n.Opera = "Opera"
                }
                )(Ye || (Ye = {}));
                class T {
                    static getRelativeTime() {
                        return window.performance.now()
                    }
                    static uuid() {
                        return It()
                    }
                    static getRandomInt(e=10, t=0) {
                        let r = new Uint32Array(1);
                        window.crypto.getRandomValues(r);
                        let i = r[0] / 4294967296;
                        return Math.floor(i * (e - t + 1)) + t
                    }
                    static splitUserAgent(e) {
                        let t = {
                            Saf: 1,
                            Chr: 2,
                            Cri: 2,
                            Fxi: 3,
                            Fir: 3,
                            Edg: 4,
                            OPR: 5
                        }, r, i, s, o = e.match(/(Mozilla\/[0-9.]+) \(((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*)\) ([^/]+\/[^\s]+(?: \([^)]+\))?)((?: ([^/]+)\/([^\s]+))+)/);
                        if (o) {
                            let c = o[4].trim()
                              , u = /([^/]+)\/([^\s]+)/g;
                            s = o[2];
                            let l, a, d = 0;
                            for (; (a = u.exec(c)) != null; ) {
                                let h = a[1].trim()
                                  , p = h.substr(0, 3);
                                a[1] === "Version" && (l = a[2]),
                                t[p] && t[p] > d && (r = h,
                                d = t[p],
                                i = r === Ye.Safari ? l : a[2])
                            }
                        }
                        return {
                            raw: e,
                            os: s,
                            browser: r,
                            version: i
                        }
                    }
                    static getLineHeight() {
                        if (this._lineHeight)
                            return this._lineHeight;
                        let e = document.createElement("div");
                        e.style.fontSize = "initial",
                        e.style.display = "none",
                        document.body.appendChild(e);
                        let t = window.getComputedStyle(e).fontSize;
                        document.body.removeChild(e);
                        let r = t ? window.parseInt(t) : void 0;
                        return r != null && (this._lineHeight = r),
                        r
                    }
                    static getScrollableSize() {
                        let e = document.body
                          , t = document.documentElement
                          , r = Math.max(e.scrollWidth, e.offsetWidth, t.clientWidth, t.scrollWidth, t.offsetWidth);
                        return {
                            height: Math.max(e.scrollHeight, e.offsetHeight, t.clientHeight, t.scrollHeight, t.offsetHeight),
                            width: r
                        }
                    }
                    static getDevicePixelRatio() {
                        return window.devicePixelRatio
                    }
                    static degreesToRadians(e) {
                        return e * Math.PI / 180
                    }
                    static isBackgrounded() {
                        return document.visibilityState === "hidden"
                    }
                    static isNumber(e) {
                        return typeof e == "number" && !isNaN(e) && isFinite(e)
                    }
                    static getCurrentUrl(e=!1) {
                        return e ? `${window.location.origin}${window.location.pathname}` : window.location.pathname
                    }
                }
                class nr extends q {
                    constructor(e, t) {
                        super(e),
                        this._cause = t,
                        Object.setPrototypeOf(this, nr.prototype)
                    }
                    get cause() {
                        return this._cause
                    }
                }
                class qr {
                    get state() {
                        return this._state === "undetermined" ? "prompt" : this._state === "unavailable" ? "denied" : this._state
                    }
                    get extendedState() {
                        return this._state
                    }
                    addEventListener() {
                        throw new Error("Method not implemented.")
                    }
                    removeEventListener() {
                        throw new Error("Method not implemented.")
                    }
                    dispatchEvent(e) {
                        throw new Error("Method not implemented.")
                    }
                }
                class K extends qr {
                    constructor(e) {
                        super(),
                        this._staticState = e,
                        this._state = e
                    }
                }
                K.GRANTED = "granted",
                K.DENIED = "denied",
                K.UNDETERMINED = "undetermined";
                class Xr extends qr {
                    constructor(e) {
                        super(),
                        this._statuses = e,
                        e.forEach(t => {
                            t.onchange = r => {
                                this.onchange(r)
                            }
                        }
                        )
                    }
                    get state() {
                        return this._statuses.every(e => e.state === "granted") ? "granted" : this._statuses.every(e => e.state !== "denied") ? "prompt" : "denied"
                    }
                    get extendedState() {
                        return this.state
                    }
                }
                class ge {
                    constructor(e, t, r, i, s=!1) {
                        this._canRead = !1,
                        this._isRecording = !1,
                        this._isStarted = !1,
                        this._promptForPermission = !1,
                        this.data = [],
                        this.permissionEvents = [],
                        this.logger = e,
                        this.errorService = t,
                        this.userAgent = r,
                        this._promptForPermission = s,
                        this.setupPermissionMonitor(),
                        i.addListener(this.getSensorType(), o => this.captureData(o))
                    }
                    captureData(e) {
                        this._isRecording && (this.data.push(e),
                        this.logger.debug(`${this.getSensorName()} Data`, e))
                    }
                    record() {
                        this._isRecording = !0,
                        this.updateState(this._status)
                    }
                    stopRecording() {
                        this._isRecording = !1,
                        this.updateState(this._status)
                    }
                    flushData() {
                        let e = this.data;
                        return this.data = [],
                        e
                    }
                    flushPermissionEvents() {
                        let e = this.permissionEvents;
                        return this.permissionEvents = [],
                        e
                    }
                    createPermissionEvent(e) {
                        if (e !== this._prevStatus && this.getSensorType()) {
                            this._prevStatus = e;
                            let t = he.create({
                                determinedAt: v(T.getRelativeTime()),
                                sensorType: this.getSensorType(),
                                permissionStatus: e
                            });
                            this.logger.debug("Permission Event", t),
                            this.permissionEvents.push(t)
                        }
                    }
                    updateState(e) {
                        if (this._status !== void 0) {
                            let t = !1;
                            e.extendedState === "granted" ? (this._canRead = !0,
                            this.createPermissionEvent(he.PermissionStatus.ALLOWED)) : e.extendedState === "prompt" ? (t = !0,
                            this.createPermissionEvent(he.PermissionStatus.UNDETERMINED_BY_USER)) : e.extendedState === "undetermined" ? (this._canRead = !0,
                            this.createPermissionEvent(he.PermissionStatus.REQUIRES_PROMPT_TO_DETERMINE)) : e.extendedState === "unavailable" ? (this._canRead = !1,
                            this.createPermissionEvent(he.PermissionStatus.SENSOR_NOT_AVAILABLE)) : (this._canRead = !1,
                            this.createPermissionEvent(he.PermissionStatus.DENIED)),
                            t && this._promptForPermission && this._isRecording && (this.logger.info(`${this.getSensorName()} prompting for permission`),
                            this.prompt()),
                            this._canRead && this._isRecording && (this.logger.info(`${this.getSensorName()} started recording`),
                            this._isStarted = !0,
                            this.start()),
                            this._isStarted && !this._canRead && (this.logger.info(`${this.getSensorName()} recording stopped due to permission change`),
                            this._isStarted = !1,
                            this.stop()),
                            this._isStarted && !this._isRecording && (this.logger.info(`${this.getSensorName()} recording stopped`),
                            this._isStarted = !1,
                            this.stop())
                        }
                    }
                    get canRead() {
                        return this._canRead
                    }
                    get isRecording() {
                        return this._isRecording
                    }
                    get hasData() {
                        return this.data.length > 0
                    }
                    set status(e) {
                        this._status = e,
                        this.updateState(this._status),
                        this._status.onchange = () => {
                            this.updateState(this._status)
                        }
                    }
                }
                class wr extends ge {
                    constructor(e, t, r, i, s=!1) {
                        super(e, t, r, i, s),
                        this.userAgent = r
                    }
                    setupPermissionMonitor() {
                        if (navigator && navigator.permissions && this.userAgent.browser !== Ye.Safari) {
                            let e = this.getPermission().map(t => navigator.permissions.query({
                                name: t
                            }));
                            Promise.all(e).then(t => {
                                let r = Promise.resolve(new Xr(t));
                                if (t.every(i => i.state === "granted") && this.instantiate)
                                    try {
                                        let i = this.instantiate();
                                        "addEventListener"in i && (r = new Promise(s => {
                                            let o = i.addEventListener("error", () => {
                                                s(new K("unavailable")),
                                                i.stop(),
                                                i.removeEventListener("error", o)
                                            }
                                            )
                                              , c = i.addEventListener("activate", () => {
                                                s(new K("granted")),
                                                i.stop(),
                                                i.removeEventListener("activate", c)
                                            }
                                            );
                                            i.start()
                                        }
                                        ))
                                    } catch {
                                        r = Promise.resolve(new K("denied"))
                                    }
                                r.then(i => {
                                    this.logger.info(`${this.getPermission()} permission status changed to '${i.state}'`),
                                    this.status = i
                                }
                                )
                            }
                            ).catch(t => {
                                this.logger.error(`navigator permission error for ${this.getPermission()}`, t),
                                this.checkAltPermission()
                            }
                            )
                        } else
                            this.checkAltPermission()
                    }
                    checkAltPermission() {
                        let e = "denied";
                        this.runAltPermissionCheck() && (e = "granted",
                        this.userAgent.browser === Ye.Safari && (e = "undetermined")),
                        this.status = new K(e),
                        this.logger.info("required alt permission")
                    }
                }
                (function(n) {
                    n.accelerometer = "accelerometer",
                    n.geolocation = "geolocation",
                    n.gyroscope = "gyroscope",
                    n.magnetometer = "magnetometer"
                }
                )(Pe || (Pe = {}));
                class Nr extends wr {
                    recordWindowEvent(e) {
                        this.logger.warn("recordWindowEvent not implemented")
                    }
                    windowEventName() {}
                    getDeviceOptions() {}
                    prompt() {}
                    start() {
                        if (this.typeExists()) {
                            let e = this.getDeviceOptions() || {}
                              , t = e.frequency ? ` with a sampling rate of ${e.frequency}Hz` : "";
                            this.logger.debug(`Starting ${this.getSensorName() + t}`, e),
                            this.sensor = this.instantiate(e),
                            this.sensor.addEventListener("error", r => {
                                this.logger.warn(`${this.getSensorName()} error`, r),
                                this.status = new K("unavailable")
                            }
                            ),
                            this.sensor.addEventListener("reading", () => {
                                try {
                                    this.sensor && this.recordSensor()
                                } catch (r) {
                                    this.errorService.reportException(r)
                                }
                            }
                            ),
                            this.sensor.start()
                        } else
                            this.windowEventName() ? (this.windowListenerCallback = e => {
                                try {
                                    this.recordWindowEvent(e)
                                } catch (t) {
                                    this.errorService.reportException(t)
                                }
                            }
                            ,
                            window.addEventListener(this.windowEventName(), this.windowListenerCallback, !0)) : this.errorService.reportException(new nr(`Cannot connect ${this.getSensorName()} sensor`))
                    }
                    stop() {
                        this.windowListenerCallback && window.removeEventListener(this.windowEventName(), this.windowListenerCallback, !0),
                        this.sensor && (this.sensor.stop(),
                        this.sensor = null)
                    }
                }
                class Qr extends Nr {
                    constructor(e, t, r, i, s, o=!1) {
                        super(e, t, i, s, o),
                        this.frequency = r
                    }
                    getDeviceOptions() {
                        return {
                            frequency: this.frequency,
                            referenceFrame: "device"
                        }
                    }
                    getPermission() {
                        return [Pe.accelerometer]
                    }
                    runAltPermissionCheck() {
                        return "ondevicemotion"in window
                    }
                    windowEventName() {
                        return "devicemotion"
                    }
                    recordSensor() {
                        this.recordAccel(this.sensor.timestamp, this.sensor.x, this.sensor.y, this.sensor.z)
                    }
                    recordAccel(e, t, r, i) {
                        this.userAgent.browser === Ye.Safari && (t *= -1,
                        r *= -1,
                        i *= -1);
                        let s = w.create({
                            determinedAt: v(e || T.getRelativeTime()),
                            x: t,
                            y: r,
                            z: i
                        });
                        this.data.push(s),
                        this.logger.debug(`${this.getPermission()} Update`, s)
                    }
                }
                class Xn extends Qr {
                    typeExists() {
                        return typeof Accelerometer < "u"
                    }
                    instantiate(e) {
                        return new Accelerometer(e)
                    }
                    getSensorType() {
                        return D.ACCELEROMETER
                    }
                    getSensorName() {
                        return "Accelerometer"
                    }
                    getBundleField() {
                        return "accelerometerData"
                    }
                    recordWindowEvent(e) {
                        if (this.logger.debug(this.getSensorName(), e),
                        e.accelerationIncludingGravity) {
                            let t = e.accelerationIncludingGravity;
                            this.recordAccel(e.timeStamp, t.x, t.y, t.z)
                        }
                    }
                }
                class Qn extends wr {
                    prompt() {
                        navigator.geolocation.getCurrentPosition(e => {
                            this.logger.debug("LocationSensor.getCurrentPosition", e),
                            this._watchId || this.start()
                        }
                        , () => {}
                        )
                    }
                    start() {
                        this._watchId = navigator.geolocation.watchPosition(e => {
                            try {
                                this.positionUpdate(e)
                            } catch (t) {
                                this.errorService.reportException(t)
                            }
                        }
                        , e => this.positionError(e), {
                            enableHighAccuracy: !0,
                            timeout: 5e3,
                            maximumAge: 6e4
                        })
                    }
                    stop() {
                        this._watchId && navigator.geolocation.clearWatch(this._watchId)
                    }
                    runAltPermissionCheck() {
                        return !1
                    }
                    getSensorType() {
                        return D.LOCATION
                    }
                    getSensorName() {
                        return "Location"
                    }
                    getPermission() {
                        return [Pe.geolocation]
                    }
                    getBundleField() {
                        return "locationData"
                    }
                    positionUpdate(e) {
                        let t = e.coords
                          , r = nt.create({
                            determinedAt: v(e.timestamp || T.getRelativeTime()),
                            horizontalAccuracy: t.accuracy,
                            verticalAccurracy: t.altitudeAccuracy,
                            altitude: t.altitude,
                            bearing: t.heading,
                            latitude: t.latitude,
                            longitude: t.longitude,
                            speed: t.speed
                        });
                        this.data.push(r),
                        this.logger.debug("Position Update", r)
                    }
                    positionError(e) {
                        this.logger.debug(`Position error: ${JSON.stringify(e)}`)
                    }
                    setupPermissionMonitor() {
                        if (navigator && navigator.permissions) {
                            let e = this.getPermission().map(t => navigator.permissions.query({
                                name: t
                            }));
                            Promise.all(e).then(t => {
                                let r = Promise.resolve(new Xr(t));
                                if (t.every(i => i.state === "granted") && this.instantiate)
                                    try {
                                        let i = this.instantiate();
                                        "addEventListener"in i && (r = new Promise(s => {
                                            let o = i.addEventListener("error", () => {
                                                s(new K("unavailable")),
                                                i.stop(),
                                                i.removeEventListener("error", o)
                                            }
                                            )
                                              , c = i.addEventListener("activate", () => {
                                                s(new K("granted")),
                                                i.stop(),
                                                i.removeEventListener("activate", c)
                                            }
                                            );
                                            i.start()
                                        }
                                        ))
                                    } catch {
                                        r = Promise.resolve(new K("denied"))
                                    }
                                r.then(i => {
                                    this.logger.info(`${this.getPermission()} permission status changed to '${i.state}'`),
                                    this.status = i
                                }
                                )
                            }
                            ).catch(t => {
                                this.logger.error(`navigator permission error for ${this.getPermission()}`, t)
                            }
                            )
                        }
                    }
                }
                class Zn extends Qr {
                    typeExists() {
                        return typeof LinearAccelerationSensor < "u"
                    }
                    instantiate(e) {
                        return new LinearAccelerationSensor(e)
                    }
                    getSensorType() {
                        return D.LINEAR_ACCELEROMETER
                    }
                    getSensorName() {
                        return "LinearAccelerometer"
                    }
                    getBundleField() {
                        return "linearAccelerometerData"
                    }
                    recordWindowEvent(e) {
                        if (this.logger.debug(this.getSensorName(), e),
                        e.acceleration) {
                            let t = e.acceleration;
                            this.recordAccel(e.timeStamp, t.x, t.y, t.z)
                        }
                    }
                }
                class gt extends ge {
                    constructor(e, t, r, i) {
                        super(e, t, r, i),
                        this.customTargetAttr = "target-element-id"
                    }
                    setupPermissionMonitor() {
                        this.status = new K("granted")
                    }
                    prompt() {}
                    generateTargetId(e) {
                        let t = new Date().getTime().toString();
                        return this.setTargetIdOnElement(e, t),
                        t
                    }
                    setTargetIdOnElement(e, t) {
                        e.setAttribute(this.customTargetAttr, t)
                    }
                    getTargetId(e) {
                        var t, r;
                        let i = (r = (t = e.attributes) === null || t === void 0 ? void 0 : t.getNamedItem(this.customTargetAttr)) === null || r === void 0 ? void 0 : r.nodeValue;
                        return i || (i = this.generateTargetId(e)),
                        i
                    }
                    getTarget(e) {
                        var t, r, i, s, o, c, u, l;
                        let a = this.getTargetId(e)
                          , d = e.getAttribute("id") || ""
                          , h = {
                            targetId: a,
                            targetType: ((i = (r = (t = e.attributes) === null || t === void 0 ? void 0 : t.getNamedItem("type")) === null || r === void 0 ? void 0 : r.value) === null || i === void 0 ? void 0 : i.toLowerCase()) || e.nodeName.toLowerCase(),
                            tagName: e.nodeName,
                            id: typeof d == "string" ? d : "",
                            className: e.getAttribute("class") || "",
                            textContent: "",
                            placeholder: (e instanceof HTMLInputElement || e instanceof HTMLTextAreaElement) && e.getAttribute("placeholder") || "",
                            role: e.getAttribute("role") || "",
                            href: "",
                            page_url: T.getCurrentUrl()
                        };
                        if (e instanceof HTMLButtonElement)
                            h.textContent = ((s = e.textContent) === null || s === void 0 ? void 0 : s.trim()) || "";
                        else if (e instanceof HTMLInputElement && e.type.toLowerCase() === "button")
                            h.textContent = e.value.trim() || "";
                        else if (e instanceof HTMLAnchorElement)
                            h.textContent = this.ensureStringLength(((o = e.textContent) === null || o === void 0 ? void 0 : o.trim()) || "", 100),
                            h.href = ((c = e.href) === null || c === void 0 ? void 0 : c.toString()) || "";
                        else if (e instanceof HTMLDivElement || e instanceof HTMLSpanElement || e instanceof HTMLParagraphElement) {
                            let g = e.parentElement;
                            g instanceof HTMLAnchorElement && (h.textContent = this.ensureStringLength(((u = g.textContent) === null || u === void 0 ? void 0 : u.trim()) || "", 100),
                            h.href = ((l = g.href) === null || l === void 0 ? void 0 : l.toString()) || "")
                        }
                        let p = null
                          , N = null;
                        return Array.from(e.attributes).forEach(g => {
                            g.name.startsWith("aria-") ? (p = p || {},
                            p[g.name] = g.value) : g.name.startsWith("data-") && (N = N || {},
                            N[g.name] = g.value)
                        }
                        ),
                        ie.create(Object.assign(Object.assign({}, this.ensureString(h)), {
                            aria: this.ensureString(p),
                            data: this.ensureString(N)
                        }))
                    }
                    ensureString(e) {
                        let t = {};
                        if (e == null)
                            return t;
                        for (let r in e)
                            if (e.hasOwnProperty(r)) {
                                let i = e[r];
                                try {
                                    t[r] = i == null ? "" : typeof i == "object" ? JSON.stringify(i) : i.toString()
                                } catch {
                                    this.logger.debug(`Error stringifying value for key "${r}"`)
                                }
                            }
                        return t
                    }
                    ensureStringLength(e, t) {
                        return (e = `${e}`).length > t ? e.substring(0, t) : e
                    }
                }
                class ei extends gt {
                    constructor() {
                        super(...arguments),
                        this.element = document,
                        this.pixelRatio = window.devicePixelRatio,
                        this.monitoringEvents = ["pointermove", "pointerdown", "pointerup", "pointerenter", "pointerleave"],
                        this.pressureRange = $.create({
                            lowerBound: 0,
                            upperBound: 1
                        })
                    }
                    setupPermissionMonitor() {
                        this.status = new K("granted")
                    }
                    start() {
                        this.pointerEventCallback = e => {
                            try {
                                this.pointerMove(e)
                            } catch (t) {
                                this.errorService.reportException(t)
                            }
                        }
                        ,
                        this.monitoringEvents.forEach(e => {
                            this.element.addEventListener(e, this.pointerEventCallback)
                        }
                        )
                    }
                    stop() {
                        this.monitoringEvents.forEach(e => {
                            this.element.removeEventListener(e, this.pointerEventCallback)
                        }
                        )
                    }
                    prompt() {}
                    pointerMove(e) {
                        let t = H.Type.UNKNOWN;
                        if (e.pointerType)
                            switch (e.pointerType.toLowerCase()) {
                            case "mouse":
                                t = H.Type.MOUSE;
                                break;
                            case "touch":
                                t = H.Type.TOUCH;
                                break;
                            case "pen":
                                t = H.Type.STYLUS
                            }
                        let r = H.ViewportBoundaryStatus.UNKNOWN_VIEWPORT_BOUNDARY_STATUS
                          , i = H.EventType.UNKNOWN;
                        if (e.type)
                            switch (e.type.toLowerCase()) {
                            case "pointerenter":
                                i = H.EventType.ENTER,
                                r = H.ViewportBoundaryStatus.ENTER_VIEWPORT;
                                break;
                            case "pointerleave":
                                i = H.EventType.LEAVE,
                                r = H.ViewportBoundaryStatus.LEAVE_VIEWPORT;
                                break;
                            case "pointermove":
                                i = H.EventType.MOVE,
                                r = H.ViewportBoundaryStatus.IN_VIEWPORT;
                                break;
                            case "pointerup":
                                i = H.EventType.UP,
                                r = H.ViewportBoundaryStatus.IN_VIEWPORT;
                                break;
                            case "pointerdown":
                                i = H.EventType.DOWN,
                                r = H.ViewportBoundaryStatus.IN_VIEWPORT
                            }
                        let s = be.create({
                            dx: e.movementX ? e.movementX / this.pixelRatio : void 0,
                            dy: e.movementY ? e.movementY / this.pixelRatio : void 0
                        }), o = be.create({
                            dx: e.clientX,
                            dy: e.clientY
                        }), c, u = e.width, l = e.height;
                        if (e.height > e.width && (u = e.height,
                        l = e.width),
                        u /= this.pixelRatio,
                        l /= this.pixelRatio,
                        e.target instanceof HTMLElement) {
                            let d = e.target;
                            c = this.getTarget(d)
                        }
                        let a = H.create({
                            determinedAt: v(e.timeStamp || T.getRelativeTime()),
                            type: t,
                            buttons: v(e.buttons),
                            button: v(e.button),
                            eventType: i,
                            device: v(e.pointerId),
                            delta: s,
                            orientation: e.twist * Math.PI / 180,
                            position: o,
                            pressure: e.pressure,
                            pressureRange: this.pressureRange,
                            radiusMajor: u,
                            radiusMinor: l,
                            size: e.width * e.height,
                            viewportBoundaryStatus: r,
                            target: c
                        });
                        if (["device", "orientation", "size", "radiusMajor"].some(d => !T.isNumber(a[d])))
                            try {
                                this.errorService.reportException(new Error(JSON.stringify(a)))
                            } finally {
                                this.logger.debug("Pointer, invalid bundle data", a)
                            }
                        else
                            this.logger.debug("Pointer Update", a),
                            this.data.push(a)
                    }
                    getSensorType() {
                        return D.POINTER
                    }
                    getSensorName() {
                        return "Pointer"
                    }
                    getBundleField() {
                        return "pointerData"
                    }
                }
                class ir extends gt {
                    constructor(e, t, r, i, s) {
                        super(e, t, r, s),
                        this.inputTracker = i,
                        this.eventEmitter = s
                    }
                    getTarget(e) {
                        let t = super.getTarget(e);
                        return this.inputTracker.trackInput(t.targetId, e),
                        t
                    }
                }
                class ti extends ir {
                    constructor() {
                        super(...arguments),
                        this.changeEventName = "input"
                    }
                    start() {
                        this.changeCallback = e => {
                            try {
                                this.inputChange(e)
                            } catch (t) {
                                this.errorService.reportException(t)
                            }
                        }
                        ,
                        window.addEventListener(this.changeEventName, this.changeCallback, !0)
                    }
                    stop() {
                        window.removeEventListener(this.changeEventName, this.changeCallback, !0)
                    }
                    inputChange(e) {
                        var t, r, i;
                        if (e.target instanceof HTMLElement) {
                            let s = e.target
                              , o = this.getTarget(s)
                              , c = s.isSameNode(document.activeElement)
                              , u = this.inputTracker.getTextMasker(o.targetId)
                              , l = o.targetType === "checkbox" ? s.checked.toString() : u.maskInput(s.value)
                              , a = le.Action.UNKNOWN;
                            ((t = e.inputType) === null || t === void 0 ? void 0 : t.toLowerCase()) === "deletebycut" ? a = le.Action.CUT : ((r = e.inputType) === null || r === void 0 ? void 0 : r.toLowerCase()) === "insertfrompaste" ? a = le.Action.PASTE : ((i = e.inputType) === null || i === void 0 ? void 0 : i.toLowerCase()) === "insertreplacementext" && (a = le.Action.REPLACEMENT);
                            let d = le.create({
                                determinedAt: v(e.timeStamp || T.getRelativeTime()),
                                target: o,
                                action: a,
                                focus: c,
                                maskedText: l
                            });
                            setTimeout( () => {
                                this.isAutofill(s) && (d.action = le.Action.AUTOFILL),
                                this.data.push(d),
                                this.logger.debug("Input Change", d)
                            }
                            )
                        }
                    }
                    isAutofill(e) {
                        let t = !1
                          , r = [];
                        try {
                            r = Array.from(document.querySelectorAll("input:autofill")).filter(i => i === e),
                            r.length > 0 && (t = !0)
                        } catch {}
                        if (!t)
                            try {
                                r = Array.from(document.querySelectorAll("input:-internal-autofill-selected")).filter(i => i === e),
                                r.length > 0 && (t = !0)
                            } catch {}
                        return t
                    }
                    getSensorType() {
                        return D.INPUT_CHANGE
                    }
                    getSensorName() {
                        return "InputChange"
                    }
                    getBundleField() {
                        return "inputChangeData"
                    }
                }
                class ri extends ir {
                    constructor() {
                        super(...arguments),
                        this.keyUpEventName = "keyup",
                        this.keyDownEventName = "keydown"
                    }
                    start() {
                        this.keyCallback = e => {
                            try {
                                this.keyPress(e)
                            } catch (t) {
                                this.errorService.reportException(t)
                            }
                        }
                        ,
                        window.addEventListener(this.keyDownEventName, this.keyCallback, !0),
                        window.addEventListener(this.keyUpEventName, this.keyCallback, !0)
                    }
                    stop() {
                        window.removeEventListener(this.keyDownEventName, this.keyCallback, !0),
                        window.removeEventListener(this.keyUpEventName, this.keyCallback, !0)
                    }
                    keyPress(e) {
                        let t = e.target, r = this.getTarget(t), i = e.key, s = this.inputTracker.getTextMasker(r.targetId), o, c;
                        i && i.length === 1 && (o = s.maskInput(e.key));
                        let u = ne.Type.UNKNOWN;
                        e.type.toLowerCase() === "keyup" ? (u = ne.Type.KEY_UP,
                        c = "Up") : e.type.toLowerCase() === "keydown" && (u = ne.Type.KEY_DOWN,
                        c = "Down");
                        let l = ne.create({
                            determinedAt: v(T.getRelativeTime()),
                            type: u,
                            specialKey: o ? void 0 : i,
                            maskedKey: o ? o.charCodeAt(0) : void 0,
                            target: r,
                            altKey: e.altKey,
                            controlKey: e.ctrlKey,
                            metaKey: e.metaKey,
                            shiftKey: e.shiftKey
                        });
                        this.data.push(l),
                        this.logger.debug("Key Press" + (c ? " " + c : ""), l)
                    }
                    getSensorType() {
                        return D.KEY_PRESS
                    }
                    getSensorName() {
                        return "KeyPress"
                    }
                    getBundleField() {
                        return "keyPressData"
                    }
                }
                class ni extends ir {
                    constructor() {
                        super(...arguments),
                        this.monitoringEvents = ["focus", "blur"],
                        this.previouslyStarted = !1
                    }
                    start() {
                        try {
                            this.previouslyStarted || (this.previouslyStarted = !0,
                            this.checkInitialFocus())
                        } catch (e) {
                            this.errorService.reportException(e)
                        }
                        this.focusEventCallback = e => {
                            try {
                                this.focusChange(e)
                            } catch (t) {
                                this.errorService.reportException(t)
                            }
                        }
                        ,
                        this.monitoringEvents.forEach(e => {
                            window.addEventListener(e, this.focusEventCallback, !0)
                        }
                        )
                    }
                    stop() {
                        this.monitoringEvents.forEach(e => {
                            window.removeEventListener(e, this.focusEventCallback, !0)
                        }
                        )
                    }
                    checkInitialFocus() {
                        let e = document.activeElement;
                        if (e) {
                            let t = {
                                target: e,
                                timeStamp: T.getRelativeTime(),
                                type: "focus"
                            };
                            this.focusChange(t)
                        }
                    }
                    focusChange(e) {
                        if (e.target instanceof HTMLInputElement) {
                            let t = e.target
                              , r = this.getTarget(t)
                              , i = ee.Type.UNKNOWN;
                            e.type === "focus" ? i = ee.Type.FOCUS_GAINED : e.type === "blur" && (i = ee.Type.FOCUS_LOST);
                            let s = ee.create({
                                determinedAt: v(e.timeStamp || T.getRelativeTime()),
                                target: r,
                                type: i
                            });
                            this.captureData(s)
                        }
                    }
                    getSensorType() {
                        return D.FOCUS_CHANGE
                    }
                    getSensorName() {
                        return "FocusChange"
                    }
                    getBundleField() {
                        return "focusChangeData"
                    }
                }
                (function(n) {
                    n.ACCELEROMETER = "ACCELEROMETER",
                    n.LOCATION = "LOCATION",
                    n.FOCUS_CHANGE = "FOCUS_CHANGE",
                    n.KEY_PRESS = "KEY_PRESS",
                    n.CLICK = "CLICK",
                    n.LINEAR_ACCELEROMETER = "LINEAR_ACCELEROMETER",
                    n.MOUSE_WHEEL = "MOUSE_WHEEL",
                    n.ORIENTATION = "ORIENTATION",
                    n.POINTER = "POINTER",
                    n.VIEW_SCROLL = "VIEW_SCROLL",
                    n.INPUT_CHANGE = "INPUT_CHANGE",
                    n.GYROSCOPE = "GYROSCOPE",
                    n.MAGNETOMETER = "MAGNETOMETER",
                    n.FORM_SUBMIT = "FORM_SUBMIT",
                    n.SCROLL = "SCROLL",
                    n.CONTEXT_MENU = "CONTEXT_MENU",
                    n.FRAME_RATE = "FRAME_RATE",
                    n.CONSOLE = "CONSOLE",
                    n.NETWORK = "NETWORK",
                    n.EXCEPTION = "EXCEPTION",
                    n.CLIPBOARD = "CLIPBOARD",
                    n.BOTD = "BOTD",
                    n.SELECTION = "SELECTION",
                    n.ROUND_TRIP_TIME = "ROUND_TRIP_TIME"
                }
                )(S || (S = {}));
                let Zr = Object.keys(S).filter(n => n !== "SCROLL").map(n => S[n]);
                class ii extends ge {
                    constructor() {
                        super(...arguments),
                        this.element = window,
                        this.pixelRatio = window.devicePixelRatio,
                        this.SCROLL_EVENT = "scroll"
                    }
                    setupPermissionMonitor() {
                        this.status = new K("granted")
                    }
                    prompt() {}
                    start() {
                        this.scrollEventCallback = e => {
                            try {
                                this.recordScroll(e)
                            } catch (t) {
                                this.errorService.reportException(t)
                            }
                        }
                        ,
                        this.element.addEventListener(this.SCROLL_EVENT, this.scrollEventCallback)
                    }
                    stop() {
                        this.element.removeEventListener(this.SCROLL_EVENT, this.scrollEventCallback)
                    }
                    recordScroll(e) {
                        let t = ot.create({
                            determinedAt: v(e.timeStamp || T.getRelativeTime()),
                            xPosition: v(window.scrollX),
                            yPosition: v(window.scrollY)
                        });
                        this.logger.debug("Scroll", t),
                        this.data.push(t)
                    }
                    getSensorType() {
                        return D.VIEW_SCROLL
                    }
                    getSensorName() {
                        return "Scroll"
                    }
                    getBundleField() {
                        return "viewportScrollData"
                    }
                }
                class si extends ge {
                    constructor(e, t, r, i, s) {
                        super(e, t, r, i),
                        this.browser = s,
                        this.element = document.body,
                        this.pixelRatio = window.devicePixelRatio,
                        this.WHEEL_EVENT = "wheel"
                    }
                    setupPermissionMonitor() {
                        this.status = new K("granted")
                    }
                    prompt() {}
                    start() {
                        this.wheelEventCallback = e => {
                            try {
                                this.recordScroll(e)
                            } catch (t) {
                                this.errorService.reportException(t)
                            }
                        }
                        ,
                        this.element.addEventListener(this.WHEEL_EVENT, this.wheelEventCallback)
                    }
                    stop() {
                        this.element.removeEventListener(this.WHEEL_EVENT, this.wheelEventCallback)
                    }
                    recordScroll(e) {
                        let t = e.deltaX
                          , r = e.deltaY
                          , i = new ue({
                            determinedAt: v(e.timeStamp || T.getRelativeTime()),
                            wheelMode: ue.WheelMode.UNKNOWN_WHEEL_MODE
                        });
                        if (e.deltaMode > 0 && e.shiftKey) {
                            let o = t;
                            t = r,
                            r = o
                        }
                        if (e.deltaMode === 0)
                            i.wheelMode = ue.WheelMode.PIXEL;
                        else if (e.deltaMode === 1) {
                            let o = T.getLineHeight();
                            o || (o = 1),
                            t *= o,
                            r *= o,
                            i.wheelMode = ue.WheelMode.LINE,
                            i.wheelDeltaXLine = v(e.deltaX),
                            i.wheelDeltaYLine = v(e.deltaY)
                        } else if (e.deltaMode === 2) {
                            let o = document.documentElement
                              , c = o.clientHeight
                              , u = o.clientWidth;
                            this.browser.toLowerCase() === "firefox" ? (c -= 34,
                            u -= 30,
                            devicePixelRatio > 1 && (c -= 2)) : (c *= .875,
                            u *= .875),
                            t *= u,
                            r *= c,
                            i.wheelMode = ue.WheelMode.PAGE,
                            i.wheelDeltaXPage = v(e.deltaX),
                            i.wheelDeltaYPage = v(e.deltaY)
                        }
                        i.wheelDeltaX = v(t),
                        i.wheelDeltaY = v(r);
                        let s = ue.create(i);
                        if (["wheelDeltaX", "wheelDeltaY"].some(o => !T.isNumber(s[o])))
                            try {
                                this.errorService.reportException(new Error(JSON.stringify(s)))
                            } finally {
                                this.logger.debug("MouseWheel, invalid bundle data", s)
                            }
                        else
                            this.logger.debug("MouseWheel", s),
                            this.data.push(s)
                    }
                    getSensorType() {
                        return D.MOUSE_WHEEL
                    }
                    getSensorName() {
                        return "MouseWheel"
                    }
                    getBundleField() {
                        return "mouseWheelData"
                    }
                }
                class oi extends ge {
                    constructor() {
                        super(...arguments),
                        this.element = window,
                        this.previousDimens = {
                            height: -1,
                            width: -1,
                            pixelRatio: -1
                        },
                        this.monitoringEvents = ["resize"]
                    }
                    setupPermissionMonitor() {
                        this.status = new K("granted")
                    }
                    start() {
                        try {
                            this.updateSize(),
                            this.viewportEventCallback = e => {
                                try {
                                    this.updateSize(e)
                                } catch (t) {
                                    this.errorService.reportException(t)
                                }
                            }
                            ,
                            this.monitoringEvents.forEach(e => {
                                this.element.addEventListener(e, this.viewportEventCallback)
                            }
                            )
                        } catch (e) {
                            this.errorService.reportException(e)
                        }
                    }
                    stop() {
                        this.monitoringEvents.forEach(e => {
                            this.element.removeEventListener(e, this.viewportEventCallback)
                        }
                        )
                    }
                    prompt() {}
                    updateSize(e) {
                        var t;
                        let r = window.innerWidth
                          , i = window.innerHeight
                          , s = (t = screen.orientation) === null || t === void 0 ? void 0 : t.type
                          , o = T.getDevicePixelRatio();
                        if (r !== this.previousDimens.width || i !== this.previousDimens.height || o !== this.previousDimens.pixelRatio || s !== this.previousDimens.orientation) {
                            this.previousDimens = {
                                width: r,
                                height: i,
                                pixelRatio: o,
                                orientation: s
                            };
                            let c = de.ViewportOrientationDirection.UNKNOWN_ORIENTATION_DIRECTION;
                            switch (s) {
                            case "landscape-primary":
                                c = de.ViewportOrientationDirection.LANDSCAPE_PRIMARY;
                                break;
                            case "landscape-secondary":
                                c = de.ViewportOrientationDirection.LANDSCAPE_SECONDARY;
                                break;
                            case "portrait-primary":
                                c = de.ViewportOrientationDirection.PORTRAIT_PRIMARY;
                                break;
                            case "portrait-secondary":
                                c = de.ViewportOrientationDirection.PORTRAIT_SECONDARY
                            }
                            let u = e?.timeStamp || T.getRelativeTime()
                              , l = de.create({
                                determinedAt: v(u),
                                deviceLogicalWidth: v(r, -1),
                                deviceLogicalHeight: v(i, -1),
                                devicePhysicalWidth: v(r * o, -1),
                                devicePhysicalHeight: v(i * o, -1),
                                devicePixelRatio: v(o, -1),
                                viewportOrientation: c,
                                screenColorDepth: v(window.screen.colorDepth, -1),
                                screenPixelDepth: v(window.screen.pixelDepth, -1),
                                screenWidth: v(window.screen.width, -1),
                                screenHeight: v(window.screen.height, -1)
                            });
                            this.logger.debug("Viewport Size Update", l),
                            this.data.push(l)
                        }
                    }
                    getSensorType() {}
                    getSensorName() {
                        return "ViewportSize"
                    }
                    getBundleField() {
                        return "viewportSizeEvents"
                    }
                }
                class ai extends ge {
                    constructor() {
                        super(...arguments),
                        this.element = document,
                        this.previousState = null
                    }
                    setupPermissionMonitor() {
                        this.status = new K("granted")
                    }
                    start() {
                        try {
                            this.recordLifeCycleChange()
                        } catch (e) {
                            this.errorService.reportException(e)
                        }
                    }
                    stop() {
                        this.previousState = null
                    }
                    prompt() {}
                    recordLifeCycleChange(e=!1) {
                        if (this.isRecording) {
                            let t = T.getRelativeTime()
                              , r = _.AppLifeCycleStatus.UNKNOWN_APP_LIFE_CYCLE_STATUS;
                            if (e ? r = _.AppLifeCycleStatus.DESTROY : document.visibilityState === "hidden" ? r = _.AppLifeCycleStatus.BACKGROUND : document.visibilityState === "visible" && (r = _.AppLifeCycleStatus.FOREGROUND),
                            r !== this.previousState) {
                                this.previousState = r;
                                let i = _.create({
                                    determinedAt: v(t),
                                    appLifeCycleStatus: r
                                });
                                this.logger.debug("App Life Cycle Update", i),
                                this.data.push(i)
                            }
                        }
                    }
                    getSensorType() {}
                    getSensorName() {
                        return "AppLifeCycle"
                    }
                    getBundleField() {
                        return "appLifeCycleEvents"
                    }
                }
                class ci extends wr {
                    constructor() {
                        super(...arguments),
                        this.element = window,
                        this.determineEvents = () => "ondeviceorientation"in window ? ["deviceorientation"] : "ondeviceorientationabsolute"in window ? ["deviceorientationabsolute"] : "onabsolutedeviceorientation"in window ? ["absolutedeviceorientation"] : "onwebkitdeviceorientation"in window ? ["webkitdeviceorientation"] : [],
                        this.monitoringEvents = this.determineEvents()
                    }
                    start() {
                        try {
                            this.orientationEventCallback = e => {
                                try {
                                    this.recordOrientation(e)
                                } catch (t) {
                                    this.errorService.reportException(t)
                                }
                            }
                            ,
                            this.monitoringEvents.forEach(e => {
                                this.element.addEventListener(e, this.orientationEventCallback)
                            }
                            )
                        } catch (e) {
                            this.errorService.reportException(e)
                        }
                    }
                    stop() {
                        this.monitoringEvents.forEach(e => {
                            this.element.removeEventListener(e, this.orientationEventCallback)
                        }
                        )
                    }
                    prompt() {}
                    getPermission() {
                        return [Pe.accelerometer, Pe.gyroscope, Pe.magnetometer]
                    }
                    runAltPermissionCheck() {
                        let e = "ondeviceorientation"in window
                          , t = "ondeviceorientationabsolute"in window || "onabsolutedeviceorientation"in window
                          , r = "onwebkitdeviceorientation"in window;
                        return e || t || r
                    }
                    toRadians(e) {
                        return e * Math.PI / 180
                    }
                    recordOrientation(e) {
                        let t = e?.timeStamp || T.getRelativeTime()
                          , r = e.webkitCompassHeading || e.alpha;
                        r -= 360,
                        r <= -180 && (r += 360),
                        this.userAgent.browser === Ye.Safari && r < 180 && (r *= -1);
                        let i = e.beta
                          , s = e.gamma;
                        Math.abs(i) > 90 && s < 0 ? s += 180 : Math.abs(i) >= 90 && s >= 0 && (s -= 180),
                        i > 90 ? i = 180 - i : i < -90 && (i = -180 - i);
                        let o = st.create({
                            determinedAt: v(t),
                            azimuth: this.toRadians(r),
                            pitch: this.toRadians(i),
                            roll: this.toRadians(s)
                        });
                        this.logger.debug("DeviceOrientationSensor: ", {
                            raw: e.webkitCompassHeading,
                            azimuth: r
                        }),
                        this.data.push(o)
                    }
                    getSensorType() {
                        return D.ORIENTATION
                    }
                    getSensorName() {
                        return "Orientation"
                    }
                    getBundleField() {
                        return "orientationData"
                    }
                }
                class en {
                    constructor() {
                        this.encodeMap = {},
                        this.letterBuckets = [[65, 90], [97, 122], [192, 687], [1008, 1154], [7680, 7935]]
                    }
                    generateRandomChar() {
                        let e = this.letterBuckets.length
                          , t = T.getRandomInt(e - 1)
                          , r = this.letterBuckets[t]
                          , i = T.getRandomInt(r[1], r[0]);
                        return String.fromCharCode(i)
                    }
                    maskLetter(e) {
                        if (!e || e.length === 0)
                            return e;
                        if (e.length > 1)
                            throw new Error("maskLetter called with more than a single character");
                        let t = this.encodeMap[e];
                        if (t === void 0) {
                            let r = 0;
                            for (; !t && r < 20; ) {
                                let i = this.generateRandomChar();
                                Object.values(this.encodeMap).indexOf(i) < 0 && (this.encodeMap[e] = i,
                                t = i),
                                r++
                            }
                        }
                        return t
                    }
                    maskInput(e) {
                        if (!e || e.length === 0)
                            return e;
                        let t = "";
                        for (let r = 0; r < e.length; r++)
                            t += this.maskLetter(e.charAt(r));
                        return t
                    }
                }
                class tn {
                    constructor(e, t, r= () => new en) {
                        this.callbackManager = e,
                        this.session = t,
                        this.textMaskerFactory = r,
                        this.inputMap = new Set,
                        this.trackerMap = {}
                    }
                    trackInput(e, t) {
                        this.inputMap.has(e) || (this.inputMap.add(e),
                        this.callbackManager.onTargetElement(e, t))
                    }
                    getTextMasker(e) {
                        let t = this.trackerMap[e];
                        return t || (t = this.textMaskerFactory(),
                        this.trackerMap[e] = t),
                        t
                    }
                }
                tn.TARGET_ELEMENT_FOUND_EVENT = "targetElementCreated";
                class sr extends Q {
                    constructor(e, t, r) {
                        super(r, t),
                        Object.setPrototypeOf(this, sr.prototype),
                        this._session = e
                    }
                    get session() {
                        return this._session
                    }
                }
                class or extends sr {
                    constructor(e, t="session is not active") {
                        super(e, t),
                        Object.setPrototypeOf(this, or.prototype)
                    }
                }
                class $e extends q {
                    constructor(e, t) {
                        super(t),
                        Object.setPrototypeOf(this, $e.prototype),
                        this._session = e
                    }
                    get session() {
                        return this._session
                    }
                }
                class li extends Nr {
                    constructor(e, t, r, i, s, o=!1) {
                        super(e, t, i, s, o),
                        this.frequency = r
                    }
                    getDeviceOptions() {
                        return {
                            frequency: this.frequency,
                            referenceFrame: "device"
                        }
                    }
                    getPermission() {
                        return [Pe.gyroscope]
                    }
                    runAltPermissionCheck() {
                        return "ondevicemotion"in window
                    }
                    windowEventName() {
                        return "devicemotion"
                    }
                    typeExists() {
                        return typeof Gyroscope < "u"
                    }
                    instantiate(e) {
                        return new Gyroscope(e)
                    }
                    recordSensor() {
                        this.recordGyroscope({
                            timeStamp: this.sensor.timestamp,
                            x: this.sensor.x,
                            y: this.sensor.y,
                            z: this.sensor.z
                        })
                    }
                    recordWindowEvent(e) {
                        e?.rotationRate && this.recordGyroscope({
                            timeStamp: e?.timeStamp,
                            x: e.rotationRate.alpha,
                            y: e.rotationRate.beta,
                            z: e.rotationRate.gamma
                        })
                    }
                    recordGyroscope(e) {
                        this.logger.debug(this.getSensorName(), e);
                        let t = e?.timeStamp || T.getRelativeTime()
                          , r = rt.create({
                            determinedAt: v(t),
                            x: e.x,
                            y: e.y,
                            z: e.z
                        });
                        this.logger.debug("Gyroscope Update", r),
                        this.data.push(r)
                    }
                    getSensorType() {
                        return D.GYROSCOPE
                    }
                    getSensorName() {
                        return "Gyroscope"
                    }
                    getBundleField() {
                        return "gyroscopeData"
                    }
                }
                class ui extends Nr {
                    constructor(e, t, r, i, s, o=!1) {
                        super(e, t, i, s, o),
                        this.frequency = r
                    }
                    getDeviceOptions() {
                        return {
                            frequency: this.frequency,
                            referenceFrame: "device"
                        }
                    }
                    getPermission() {
                        return [Pe.magnetometer]
                    }
                    runAltPermissionCheck() {
                        return !1
                    }
                    typeExists() {
                        return typeof Magnetometer < "u"
                    }
                    instantiate(e) {
                        return new Magnetometer(e)
                    }
                    recordSensor() {
                        let e = this.sensor.timestamp || T.getRelativeTime()
                          , t = it.create({
                            determinedAt: v(e),
                            x: this.sensor.x,
                            y: this.sensor.y,
                            z: this.sensor.z
                        });
                        this.logger.debug("Magnetometer Update", t),
                        this.data.push(t)
                    }
                    getSensorType() {
                        return D.MAGNETOMETER
                    }
                    getSensorName() {
                        return "Magnetometer"
                    }
                    getBundleField() {
                        return "magnetometerData"
                    }
                }
                let rn = ["INPUT", "BUTTON", "SELECT", "TEXTAREA"];
                class hi extends gt {
                    constructor() {
                        super(...arguments),
                        this.changeEventName = "click"
                    }
                    start() {
                        this.changeCallback = e => {
                            try {
                                this.handleClick(e)
                            } catch (t) {
                                this.errorService.reportException(t)
                            }
                        }
                        ,
                        window.addEventListener(this.changeEventName, this.changeCallback, !0)
                    }
                    stop() {
                        window.removeEventListener(this.changeEventName, this.changeCallback, !0)
                    }
                    handleClick(e) {
                        if (e.target instanceof HTMLElement && rn.includes(e.target.nodeName)) {
                            let t = e.target
                              , r = this.getTarget(t)
                              , i = be.create({
                                dx: e.clientX,
                                dy: e.clientY
                            })
                              , s = L.create({
                                determinedAt: v(e.timeStamp || T.getRelativeTime()),
                                position: i,
                                target: r
                            });
                            this.data.push(s),
                            this.logger.debug("Click Event", s)
                        }
                    }
                    getSensorType() {
                        return D.CLICK
                    }
                    getSensorName() {
                        return "Click"
                    }
                    getBundleField() {
                        return "clickData"
                    }
                }
                class di extends ir {
                    constructor() {
                        super(...arguments),
                        this.monitorEventName = "submit"
                    }
                    start() {
                        this.eventCallback = e => {
                            try {
                                this.submitEvent(e)
                            } catch (t) {
                                this.errorService.reportException(t)
                            }
                        }
                        ,
                        window.addEventListener(this.monitorEventName, this.eventCallback, !0)
                    }
                    stop() {
                        window.removeEventListener(this.monitorEventName, this.eventCallback, !0)
                    }
                    submitEvent(e) {
                        let t, r;
                        e.submitter && (t = this.getTarget(e.submitter)),
                        e.target instanceof HTMLElement && (r = this.getTarget(e.target));
                        let i = De.create({
                            determinedAt: v(e.timeStamp || T.getRelativeTime()),
                            submitter: t,
                            target: r
                        });
                        this.data.push(i),
                        this.logger.debug("Form Submit", i)
                    }
                    getSensorType() {
                        return D.FORM_SUBMIT
                    }
                    getSensorName() {
                        return "FormSubmit"
                    }
                    getBundleField() {
                        return "formSubmitEvents"
                    }
                }
                class ar extends Q {
                    constructor(e) {
                        super(e),
                        Object.setPrototypeOf(this, ar.prototype)
                    }
                }
                class gi {
                    constructor() {
                        this.listeners = new Map
                    }
                    addListener(e, t) {
                        let r = this.listeners.get(e) || [];
                        r.push(t),
                        this.listeners.set(e, r)
                    }
                    emit(e, t) {
                        (this.listeners.get(e) || []).forEach(r => r(t))
                    }
                }
                class pi {
                    constructor(e, t, r) {
                        this.logger = e,
                        this.sessionEventEmitter = t,
                        this.session = r,
                        this.trackedFields = new Set,
                        this.shiftTracker = {},
                        this.altTracker = {}
                    }
                    targetFromField(e) {
                        return new ie({
                            targetId: e.fieldId,
                            targetType: e.type
                        })
                    }
                    addForm(e) {
                        this.logger.debug("added vgs form for monitoring", e),
                        e.fields.forEach(t => this.addField(t))
                    }
                    addField(e) {
                        this.logger.debug("added vgs field for monitoring", e),
                        this.trackedFields.has(e.fieldId) || (this.trackedFields.add(e.fieldId),
                        this.addFieldCustomEvents(e),
                        e.on("focus", t => {
                            let r = this.buildFocusEvent(t, ee.Type.FOCUS_GAINED, e);
                            this.sessionEventEmitter.emit(D.FOCUS_CHANGE, r)
                        }
                        ),
                        e.on("blur", t => {
                            let r = this.buildFocusEvent(t, ee.Type.FOCUS_LOST, e);
                            this.sessionEventEmitter.emit(D.FOCUS_CHANGE, r)
                        }
                        ),
                        e.on("keydown", t => {
                            let r = this.buildKeyEvent(t, ne.Type.KEY_DOWN, e);
                            this.sessionEventEmitter.emit(D.KEY_PRESS, r)
                        }
                        ),
                        e.on("keyup", t => {
                            let r = this.buildKeyEvent(t, ne.Type.KEY_UP, e);
                            this.sessionEventEmitter.emit(D.KEY_PRESS, r)
                        }
                        ))
                    }
                    addFieldCustomEvents(e) {
                        var t;
                        let r = {
                            field_source: "vgs"
                        };
                        r.field_type = e.type,
                        r.field_name = e.name,
                        r.form_id = e.formId,
                        e.debugId && (r.field_debug_id = e.debugId),
                        e.container && (e.container.id && (r.field_container_id = e.container.id),
                        !((t = e.container.attributes) === null || t === void 0) && t.getNamedItem("name") && (r.field_container_name = e.container.attributes.getNamedItem("name").value))
                    }
                    buildFocusEvent(e, t, r) {
                        return ee.create({
                            determinedAt: v(T.getRelativeTime()),
                            target: this.targetFromField(r),
                            type: t
                        })
                    }
                    isShiftKey(e, t) {
                        let r = e.key === "Shift";
                        return r && e.type === "keydown" ? (this.shiftTracker[t.fieldId] = this.shiftTracker[t.fieldId] || 0,
                        this.shiftTracker[t.fieldId]++) : r && e.type === "keyup" && this.shiftTracker[t.fieldId]--,
                        this.shiftTracker[t.fieldId] > 0
                    }
                    isAltKey(e, t) {
                        let r = e.key === "Alt";
                        return r && e.type === "keydown" ? (this.altTracker[t.fieldId] = this.altTracker[t.fieldId] || 0,
                        this.altTracker[t.fieldId]++) : r && e.type === "keyup" && this.altTracker[t.fieldId]--,
                        this.altTracker[t.fieldId] > 0
                    }
                    buildKeyEvent(e, t, r) {
                        let i = this.isShiftKey(e, r)
                          , s = this.isAltKey(e, r);
                        return ne.create({
                            determinedAt: v(T.getRelativeTime()),
                            type: t,
                            target: this.targetFromField(r),
                            altKey: s,
                            controlKey: e.ctrlKey,
                            metaKey: e.metaKey,
                            shiftKey: i
                        })
                    }
                }
                class mi extends gt {
                    constructor() {
                        super(...arguments),
                        this.element = document,
                        this.monitoringEvent = "contextmenu"
                    }
                    setupPermissionMonitor() {
                        this.status = new K("granted")
                    }
                    start() {
                        this.menuEventCallback = e => {
                            try {
                                this.menuEvent(e)
                            } catch (t) {
                                this.errorService.reportException(t)
                            }
                        }
                        ,
                        this.element.addEventListener(this.monitoringEvent, this.menuEventCallback)
                    }
                    stop() {
                        this.element.removeEventListener(this.monitoringEvent, this.menuEventCallback)
                    }
                    prompt() {}
                    menuEvent(e) {
                        let t;
                        if (e.target instanceof HTMLElement && rn.includes(e.target.nodeName)) {
                            let i = e.target;
                            t = this.getTarget(i)
                        }
                        let r = Z.create({
                            determinedAt: v(e.timeStamp || T.getRelativeTime()),
                            contextMenuStatus: Z.ContextMenuStatus.OPEN,
                            target: t
                        });
                        this.logger.debug("Context Menu Update", r),
                        this.data.push(r)
                    }
                    getSensorType() {
                        return D.CONTEXT_MENU
                    }
                    getSensorName() {
                        return "ContextMenu"
                    }
                    getBundleField() {
                        return "contextMenuEvents"
                    }
                }
                class nn extends ge {
                    constructor() {
                        super(...arguments),
                        this.frameCount = 0,
                        this.avgFrameRateMs = 0,
                        this.running = !1
                    }
                    setupPermissionMonitor() {
                        this.status = new K("granted")
                    }
                    animate() {
                        if (this.running) {
                            let e = Date.now()
                              , t = e - this.lastLoopTime;
                            this.avgFrameRateMs = (this.avgFrameRateMs * this.frameCount + t) / (this.frameCount + 1),
                            this.frameCount++,
                            this.lastLoopTime = e,
                            this.animationFrame = requestAnimationFrame( () => this.animate())
                        }
                    }
                    resetLoop() {
                        this.lastLoopTime = Date.now(),
                        this.frameCount = 0,
                        this.avgFrameRateMs = 0
                    }
                    start() {
                        try {
                            this.resetLoop(),
                            this.running = !0,
                            this.animationFrame = requestAnimationFrame( () => this.animate())
                        } catch (e) {
                            this.errorService.reportException(e)
                        }
                    }
                    stop() {
                        this.running = !1,
                        this.animationFrame && cancelAnimationFrame(this.animationFrame)
                    }
                    get fps() {
                        return this.avgFrameRateMs > 0 ? Math.round(1e3 / this.avgFrameRateMs) : 0
                    }
                    flushFrameRate() {
                        let e = this.fps;
                        return this.resetLoop(),
                        e
                    }
                    prompt() {}
                    getSensorType() {
                        return D.FRAME_RATE
                    }
                    getSensorName() {
                        return "FrameRate"
                    }
                    getBundleField() {
                        return "frameRateEvent"
                    }
                }
                class fi extends ge {
                    constructor() {
                        super(...arguments),
                        this.originConsoleFuncs = {},
                        this.monitoringEvents = ["warn", "error"]
                    }
                    setupPermissionMonitor() {
                        this.status = new K("granted")
                    }
                    start() {
                        try {
                            let e = t => (...r) => {
                                var i, s;
                                try {
                                    let o = Array.from(r)
                                      , c = T.getRelativeTime()
                                      , u = _e.ConsoleType[t.toUpperCase()] || _e.ConsoleType.UNKNOWN
                                      , l = _e.create({
                                        determinedAt: v(c),
                                        type: u,
                                        content: this.convertArrayToStrings(o)
                                    });
                                    ((i = this.data) === null || i === void 0 ? void 0 : i.length) < 200 && !this.checkDuplication(this.data, l) && this.data.push(l),
                                    this.logger.debug("Console Update", l),
                                    (s = this.originConsoleFuncs[t]) === null || s === void 0 || s.apply(console, o)
                                } catch (o) {
                                    this.errorService.reportException(o)
                                }
                            }
                            ;
                            this.monitoringEvents.forEach(t => {
                                if (!console?.[t])
                                    return;
                                let r = console[t];
                                this.originConsoleFuncs[t] = r,
                                console[t] = e(t)
                            }
                            )
                        } catch (e) {
                            this.errorService.reportException(e)
                        }
                    }
                    stop() {
                        Object.keys(this.originConsoleFuncs).forEach(e => {
                            console[e] = this.originConsoleFuncs[e]
                        }
                        )
                    }
                    prompt() {}
                    getSensorType() {
                        return D.CONSOLE
                    }
                    getSensorName() {
                        return "Console"
                    }
                    getBundleField() {
                        return "consoleEvents"
                    }
                    convertArrayToStrings(e) {
                        return e.map(t => {
                            if (typeof t == "string")
                                return t;
                            if (t instanceof Error)
                                return `Error: ${t.message}`;
                            if (t instanceof HTMLElement)
                                return `HTMLElement ${t.tagName}: ${t.innerText}`;
                            try {
                                return JSON.stringify(t)
                            } catch {
                                return "Unable to stringify argument"
                            }
                        }
                        ).map(t => t.length > 200 ? t.slice(0, 200) : t)
                    }
                    checkDuplication(e, t) {
                        return !(!e?.length || !t) && e.some(r => r.determinedAt === t.determinedAt && r.type === t.type && r.content.join(",") === t.content.join(","))
                    }
                }
                let sn = "net::UNKNOWN_ERR";
                class vi extends ge {
                    constructor() {
                        var e;
                        super(...arguments),
                        this.originalOpen = (e = window.XMLHttpRequest) === null || e === void 0 ? void 0 : e.prototype.open,
                        this.originFetch = window.fetch,
                        this.windowEventName = "yf_error"
                    }
                    setupPermissionMonitor() {
                        this.status = new K("granted")
                    }
                    start() {
                        this.eventCallback = t => {
                            try {
                                this.handlerEvent(t)
                            } catch (r) {
                                this.errorService.reportException(r)
                            }
                        }
                        ;
                        let e = t => {
                            let r = new CustomEvent(this.windowEventName,{
                                bubbles: !1,
                                cancelable: !1,
                                detail: t
                            });
                            window.dispatchEvent(r)
                        }
                        ;
                        this.interceptXhr(e),
                        this.interceptFetch(e),
                        window.addEventListener(this.windowEventName, this.eventCallback)
                    }
                    stop() {
                        window.removeEventListener(this.windowEventName, this.eventCallback),
                        this.uninterceptXhr(),
                        this.uninterceptFetch()
                    }
                    handlerEvent(e) {
                        let t = e.detail
                          , r = T.getRelativeTime()
                          , i = v(r)
                          , s = this.data.find(o => o.url === t.url && o.method === t.method);
                        s || (s = fe.create({
                            determinedAt: i,
                            type: t.type,
                            url: t.url,
                            method: t.method,
                            data: []
                        }),
                        this.data.push(s)),
                        s.determinedAt = i,
                        s.data.push({
                            determinedAt: i,
                            content: t.content
                        })
                    }
                    interceptXhr(e) {
                        if (!window.XMLHttpRequest)
                            return;
                        let t = this.originalOpen;
                        XMLHttpRequest.prototype.open = function() {
                            var r;
                            t.apply(this, arguments);
                            let i = this;
                            i._yf_method = (r = arguments[0]) === null || r === void 0 ? void 0 : r.toUpperCase(),
                            i._yf_url = arguments[1],
                            i.addEventListener("error", function(o) {
                                e({
                                    url: i._yf_url,
                                    method: i._yf_method,
                                    type: fe.NetworkType.XHR,
                                    content: o?.message || sn
                                })
                            });
                            let s = i.onreadystatechange;
                            i.onreadystatechange = function() {
                                i.readyState === 4 && (i.status >= 400 && e({
                                    url: i._yf_url,
                                    method: i._yf_method,
                                    type: fe.NetworkType.XHR,
                                    content: `http::${i.status}`
                                }),
                                s && s.apply(this, arguments))
                            }
                        }
                    }
                    uninterceptXhr() {
                        window.XMLHttpRequest && this.originalOpen && (XMLHttpRequest.prototype.open = this.originalOpen)
                    }
                    interceptFetch(e) {
                        if (window.fetch) {
                            var t = this.originFetch;
                            window.fetch = function(r, i) {
                                return t(r, i).then(async s => {
                                    var o;
                                    return s.ok || e({
                                        url: s.url,
                                        method: ((o = i?.method) === null || o === void 0 ? void 0 : o.toUpperCase()) || "GET",
                                        type: fe.NetworkType.FETCH,
                                        content: `http::${s.status}`
                                    }),
                                    s
                                }
                                , s => {
                                    var o;
                                    return e({
                                        url: r.toString(),
                                        method: ((o = i?.method) === null || o === void 0 ? void 0 : o.toUpperCase()) || "GET",
                                        type: fe.NetworkType.FETCH,
                                        content: s?.message || sn
                                    }),
                                    s
                                }
                                )
                            }
                        }
                    }
                    uninterceptFetch() {
                        window.fetch && this.originFetch && (window.fetch = this.originFetch)
                    }
                    prompt() {}
                    getSensorType() {
                        return D.NETWORK
                    }
                    getSensorName() {
                        return "Network"
                    }
                    getBundleField() {
                        return "networkEvents"
                    }
                }
                class yi extends ge {
                    constructor() {
                        super(...arguments),
                        this.windowEventName = "error"
                    }
                    setupPermissionMonitor() {
                        this.status = new K("granted")
                    }
                    start() {
                        this.eventCallback = e => {
                            try {
                                this.handlerEvent(e)
                            } catch (t) {
                                this.errorService.reportException(t)
                            }
                        }
                        ,
                        window.addEventListener(this.windowEventName, this.eventCallback)
                    }
                    stop() {
                        window.removeEventListener(this.windowEventName, this.eventCallback)
                    }
                    handlerEvent(e) {
                        let t = T.getRelativeTime()
                          , r = v(t)
                          , i = e.message;
                        i.length > 200 && (i = i.slice(0, 200));
                        let s = this.data.find(o => o.content === i);
                        s || (s = at.create({
                            determinedAt: r,
                            content: i,
                            determinedAtList: []
                        }),
                        this.data.push(s)),
                        s.determinedAt = r,
                        s.determinedAtList.push(r)
                    }
                    prompt() {}
                    getSensorType() {
                        return D.EXCEPTION
                    }
                    getSensorName() {
                        return "Exception"
                    }
                    getBundleField() {
                        return "exceptionEvents"
                    }
                }
                class Ei extends gt {
                    constructor() {
                        super(...arguments),
                        this.element = document,
                        this.monitoringEvents = ["cut", "copy", "paste"]
                    }
                    start() {
                        this.eventCallback = e => {
                            try {
                                this.processEvent(e)
                            } catch (t) {
                                this.errorService.reportException(t)
                            }
                        }
                        ,
                        this.monitoringEvents.forEach(e => {
                            this.element.addEventListener(e, this.eventCallback)
                        }
                        )
                    }
                    stop() {
                        this.monitoringEvents.forEach(e => {
                            this.element.removeEventListener(e, this.eventCallback)
                        }
                        )
                    }
                    prompt() {}
                    processEvent(e) {
                        let t;
                        if (e.target instanceof HTMLElement) {
                            let s = e.target;
                            t = this.getTarget(s)
                        }
                        let r = ve.EventType.UNKNOWN;
                        switch (e.type) {
                        case "cut":
                            r = ve.EventType.CUT;
                            break;
                        case "copy":
                            r = ve.EventType.COPY;
                            break;
                        case "paste":
                            r = ve.EventType.PASTE;
                            break;
                        default:
                            r = ve.EventType.UNKNOWN
                        }
                        let i = ve.create({
                            determinedAt: v(e.timeStamp || T.getRelativeTime()),
                            type: r,
                            target: t
                        });
                        this.logger.debug("Clipboard Update", i),
                        this.data.push(i)
                    }
                    getSensorType() {
                        return D.CLIPBOARD
                    }
                    getSensorName() {
                        return "Clipboard"
                    }
                    getBundleField() {
                        return "clipboardEvents"
                    }
                }
                var Sr = function(n, e) {
                    return Sr = Object.setPrototypeOf || {
                        __proto__: []
                    }instanceof Array && function(t, r) {
                        t.__proto__ = r
                    }
                    || function(t, r) {
                        for (var i in r)
                            Object.prototype.hasOwnProperty.call(r, i) && (t[i] = r[i])
                    }
                    ,
                    Sr(n, e)
                };
                function kt(n, e, t, r) {
                    return new (t || (t = Promise))(function(i, s) {
                        function o(l) {
                            try {
                                u(r.next(l))
                            } catch (a) {
                                s(a)
                            }
                        }
                        function c(l) {
                            try {
                                u(r.throw(l))
                            } catch (a) {
                                s(a)
                            }
                        }
                        function u(l) {
                            var a;
                            l.done ? i(l.value) : (a = l.value,
                            a instanceof t ? a : new t(function(d) {
                                d(a)
                            }
                            )).then(o, c)
                        }
                        u((r = r.apply(n, e || [])).next())
                    }
                    )
                }
                function Pt(n, e) {
                    var t, r, i, s, o = {
                        label: 0,
                        sent: function() {
                            if (1 & i[0])
                                throw i[1];
                            return i[1]
                        },
                        trys: [],
                        ops: []
                    };
                    return s = {
                        next: c(0),
                        throw: c(1),
                        return: c(2)
                    },
                    typeof Symbol == "function" && (s[Symbol.iterator] = function() {
                        return this
                    }
                    ),
                    s;
                    function c(u) {
                        return function(l) {
                            return function(a) {
                                if (t)
                                    throw new TypeError("Generator is already executing.");
                                for (; s && (s = 0,
                                a[0] && (o = 0)),
                                o; )
                                    try {
                                        if (t = 1,
                                        r && (i = 2 & a[0] ? r.return : a[0] ? r.throw || ((i = r.return) && i.call(r),
                                        0) : r.next) && !(i = i.call(r, a[1])).done)
                                            return i;
                                        switch (r = 0,
                                        i && (a = [2 & a[0], i.value]),
                                        a[0]) {
                                        case 0:
                                        case 1:
                                            i = a;
                                            break;
                                        case 4:
                                            return o.label++,
                                            {
                                                value: a[1],
                                                done: !1
                                            };
                                        case 5:
                                            o.label++,
                                            r = a[1],
                                            a = [0];
                                            continue;
                                        case 7:
                                            a = o.ops.pop(),
                                            o.trys.pop();
                                            continue;
                                        default:
                                            if (!((i = (i = o.trys).length > 0 && i[i.length - 1]) || a[0] !== 6 && a[0] !== 2)) {
                                                o = 0;
                                                continue
                                            }
                                            if (a[0] === 3 && (!i || a[1] > i[0] && a[1] < i[3])) {
                                                o.label = a[1];
                                                break
                                            }
                                            if (a[0] === 6 && o.label < i[1]) {
                                                o.label = i[1],
                                                i = a;
                                                break
                                            }
                                            if (i && o.label < i[2]) {
                                                o.label = i[2],
                                                o.ops.push(a);
                                                break
                                            }
                                            i[2] && o.ops.pop(),
                                            o.trys.pop();
                                            continue
                                        }
                                        a = e.call(n, o)
                                    } catch (d) {
                                        a = [6, d],
                                        r = 0
                                    } finally {
                                        t = i = 0
                                    }
                                if (5 & a[0])
                                    throw a[1];
                                return {
                                    value: a[0] ? a[1] : void 0,
                                    done: !0
                                }
                            }([u, l])
                        }
                    }
                }
                function on(n, e, t) {
                    if (t || arguments.length === 2)
                        for (var r, i = 0, s = e.length; i < s; i++)
                            !r && i in e || (r || (r = Array.prototype.slice.call(e, 0, i)),
                            r[i] = e[i]);
                    return n.concat(r || Array.prototype.slice.call(e))
                }
                typeof SuppressedError == "function" && SuppressedError;
                var br = "electron"
                  , cr = "phantomjs"
                  , an = "selenium"
                  , cn = "slimerjs"
                  , Oe = "headless_chrome"
                  , _r = "unknown"
                  , W = function(n) {
                    function e(t, r) {
                        var i = n.call(this, r) || this;
                        return i.state = t,
                        i.name = "BotdError",
                        Object.setPrototypeOf(i, e.prototype),
                        i
                    }
                    return function(t, r) {
                        if (typeof r != "function" && r !== null)
                            throw new TypeError("Class extends value " + String(r) + " is not a constructor or null");
                        function i() {
                            this.constructor = t
                        }
                        Sr(t, r),
                        t.prototype = r === null ? Object.create(r) : (i.prototype = r.prototype,
                        new i)
                    }(e, n),
                    e
                }(Error);
                function ln(n, e) {
                    var t = {}
                      , r = {
                        bot: !1
                    };
                    for (var i in e) {
                        var s = (0,
                        e[i])(n)
                          , o = {
                            bot: !1
                        };
                        typeof s == "string" ? o = {
                            bot: !0,
                            botKind: s
                        } : s && (o = {
                            bot: !0,
                            botKind: _r
                        }),
                        t[i] = o,
                        o.bot && (r = o)
                    }
                    return [t, r]
                }
                function wi(n) {
                    return kt(this, void 0, void 0, function() {
                        var e, t, r = this;
                        return Pt(this, function(i) {
                            switch (i.label) {
                            case 0:
                                return e = {},
                                t = Object.keys(n),
                                [4, Promise.all(t.map(function(s) {
                                    return kt(r, void 0, void 0, function() {
                                        var o, c, u, l, a;
                                        return Pt(this, function(d) {
                                            switch (d.label) {
                                            case 0:
                                                o = n[s],
                                                d.label = 1;
                                            case 1:
                                                return d.trys.push([1, 3, , 4]),
                                                c = e,
                                                u = s,
                                                a = {},
                                                [4, o()];
                                            case 2:
                                                return c[u] = (a.value = d.sent(),
                                                a.state = 0,
                                                a),
                                                [3, 4];
                                            case 3:
                                                return l = d.sent(),
                                                e[s] = l instanceof W ? {
                                                    state: l.state,
                                                    error: "".concat(l.name, ": ").concat(l.message)
                                                } : {
                                                    state: -3,
                                                    error: l instanceof Error ? "".concat(l.name, ": ").concat(l.message) : String(l)
                                                },
                                                [3, 4];
                                            case 4:
                                                return [2]
                                            }
                                        })
                                    })
                                }))];
                            case 1:
                                return i.sent(),
                                [2, e]
                            }
                        })
                    })
                }
                function lr(n, e) {
                    return n.indexOf(e) !== -1
                }
                function xe(n, e) {
                    return n.indexOf(e) !== -1
                }
                function un(n) {
                    return Object.getOwnPropertyNames(n)
                }
                function Tr(n) {
                    for (var e = [], t = 1; t < arguments.length; t++)
                        e[t - 1] = arguments[t];
                    for (var r = function(c) {
                        if (typeof c == "string") {
                            if (lr(n, c))
                                return {
                                    value: !0
                                }
                        } else {
                            var u = function(l, a) {
                                if ("find"in l)
                                    return l.find(a);
                                for (var d = 0; d < l.length; d++)
                                    if (a(l[d]))
                                        return l[d]
                            }(n, function(l) {
                                return c.test(l)
                            });
                            if (u != null)
                                return {
                                    value: !0
                                }
                        }
                    }, i = 0, s = e; i < s.length; i++) {
                        var o = r(s[i]);
                        if (typeof o == "object")
                            return o.value
                    }
                    return !1
                }
                function xt(n) {
                    return n.reduce(function(e, t) {
                        return e + (t ? 1 : 0)
                    }, 0)
                }
                var hn = {
                    detectAppVersion: function(n) {
                        var e = n.appVersion;
                        return e.state === 0 && (/headless/i.test(e.value) ? Oe : /electron/i.test(e.value) ? br : /slimerjs/i.test(e.value) ? cn : void 0)
                    },
                    detectDocumentAttributes: function(n) {
                        var e = n.documentElementKeys;
                        return e.state === 0 && (Tr(e.value, "selenium", "webdriver", "driver") ? an : void 0)
                    },
                    detectErrorTrace: function(n) {
                        var e = n.errorTrace;
                        return e.state === 0 && (/PhantomJS/i.test(e.value) ? cr : void 0)
                    },
                    detectEvalLengthInconsistency: function(n) {
                        var e = n.evalLength
                          , t = n.browserKind
                          , r = n.browserEngineKind;
                        if (e.state === 0 && t.state === 0 && r.state === 0) {
                            var i = e.value;
                            return r.value !== "unknown" && (i === 37 && !lr(["webkit", "gecko"], r.value) || i === 39 && !lr(["internet_explorer"], t.value) || i === 33 && !lr(["chromium"], r.value))
                        }
                    },
                    detectFunctionBind: function(n) {
                        if (n.functionBind.state === -2)
                            return cr
                    },
                    detectLanguagesLengthInconsistency: function(n) {
                        var e = n.languages;
                        if (e.state === 0 && e.value.length === 0)
                            return Oe
                    },
                    detectNotificationPermissions: function(n) {
                        var e = n.notificationPermissions
                          , t = n.browserKind;
                        return t.state === 0 && t.value === "chrome" && (e.state === 0 && e.value ? Oe : void 0)
                    },
                    detectPluginsArray: function(n) {
                        var e = n.pluginsArray;
                        if (e.state === 0 && !e.value)
                            return Oe
                    },
                    detectPluginsLengthInconsistency: function(n) {
                        var e = n.pluginsLength
                          , t = n.android
                          , r = n.browserKind
                          , i = n.browserEngineKind;
                        if (e.state === 0 && t.state === 0 && r.state === 0 && i.state === 0 && r.value === "chrome" && !t.value && i.value === "chromium")
                            return e.value === 0 ? Oe : void 0
                    },
                    detectProcess: function(n) {
                        var e, t = n.process;
                        return t.state === 0 && (t.value.type === "renderer" || ((e = t.value.versions) === null || e === void 0 ? void 0 : e.electron) != null ? br : void 0)
                    },
                    detectUserAgent: function(n) {
                        var e = n.userAgent;
                        return e.state === 0 && (/PhantomJS/i.test(e.value) ? cr : /Headless/i.test(e.value) ? Oe : /Electron/i.test(e.value) ? br : /slimerjs/i.test(e.value) ? cn : void 0)
                    },
                    detectWebDriver: function(n) {
                        var e = n.webDriver;
                        if (e.state === 0 && e.value)
                            return Oe
                    },
                    detectWebGL: function(n) {
                        var e = n.webGL;
                        if (e.state === 0) {
                            var t = e.value
                              , r = t.vendor
                              , i = t.renderer;
                            if (r == "Brian Paul" && i == "Mesa OffScreen")
                                return Oe
                        }
                    },
                    detectWindowExternal: function(n) {
                        var e = n.windowExternal;
                        return e.state === 0 && (/Sequentum/i.test(e.value) ? "sequentum" : void 0)
                    },
                    detectWindowSize: function(n) {
                        var e = n.windowSize
                          , t = n.documentFocus;
                        if (e.state !== 0 || t.state !== 0)
                            return !1;
                        var r = e.value
                          , i = r.outerWidth
                          , s = r.outerHeight;
                        return t.value && i === 0 && s === 0 ? Oe : void 0
                    },
                    detectMimeTypesConsistent: function(n) {
                        var e = n.mimeTypesConsistent;
                        if (e.state === 0 && !e.value)
                            return _r
                    },
                    detectProductSub: function(n) {
                        var e = n.productSub
                          , t = n.browserKind;
                        return e.state === 0 && t.state === 0 && (t.value !== "chrome" && t.value !== "safari" && t.value !== "opera" && t.value !== "wechat" || e.value === "20030107" ? void 0 : _r)
                    },
                    detectDistinctiveProperties: function(n) {
                        var e = n.distinctiveProps;
                        if (e.state !== 0)
                            return !1;
                        var t, r = e.value;
                        for (t in r)
                            if (r[t])
                                return t
                    }
                };
                function Or() {
                    var n, e, t = window, r = navigator;
                    return xt(["webkitPersistentStorage"in r, "webkitTemporaryStorage"in r, r.vendor.indexOf("Google") === 0, "webkitResolveLocalFileSystemURL"in t, "BatteryManager"in t, "webkitMediaStream"in t, "webkitSpeechGrammar"in t]) >= 5 ? "chromium" : xt(["ApplePayError"in t, "CSSPrimitiveValue"in t, "Counter"in t, r.vendor.indexOf("Apple") === 0, "getStorageUpdates"in r, "WebKitMediaKeys"in t]) >= 4 ? "webkit" : xt(["buildID"in navigator, "MozAppearance"in ((e = (n = document.documentElement) === null || n === void 0 ? void 0 : n.style) !== null && e !== void 0 ? e : {}), "onmozfullscreenchange"in t, "mozInnerScreenX"in t, "CSSMozDocumentRule"in t, "CanvasCaptureMediaStream"in t]) >= 4 ? "gecko" : "unknown"
                }
                var ur, Ni = {
                    android: function() {
                        var n = Or()
                          , e = n === "chromium"
                          , t = n === "gecko";
                        if (!e && !t)
                            return !1;
                        var r = window;
                        return xt(["onorientationchange"in r, "orientation"in r, e && !("SharedWorker"in r), t && /android/i.test(navigator.appVersion)]) >= 2
                    },
                    browserKind: function() {
                        var n, e = (n = navigator.userAgent) === null || n === void 0 ? void 0 : n.toLowerCase();
                        return xe(e, "edg/") ? "edge" : xe(e, "trident") || xe(e, "msie") ? "internet_explorer" : xe(e, "wechat") ? "wechat" : xe(e, "firefox") ? "firefox" : xe(e, "opera") || xe(e, "opr") ? "opera" : xe(e, "chrome") ? "chrome" : xe(e, "safari") ? "safari" : "unknown"
                    },
                    browserEngineKind: Or,
                    documentFocus: function() {
                        return document.hasFocus !== void 0 && document.hasFocus()
                    },
                    userAgent: function() {
                        return navigator.userAgent
                    },
                    appVersion: function() {
                        var n = navigator.appVersion;
                        if (n == null)
                            throw new W(-1,"navigator.appVersion is undefined");
                        return n
                    },
                    rtt: function() {
                        if (navigator.connection === void 0)
                            throw new W(-1,"navigator.connection is undefined");
                        if (navigator.connection.rtt === void 0)
                            throw new W(-1,"navigator.connection.rtt is undefined");
                        return navigator.connection.rtt
                    },
                    windowSize: function() {
                        return {
                            outerWidth: window.outerWidth,
                            outerHeight: window.outerHeight,
                            innerWidth: window.innerWidth,
                            innerHeight: window.innerHeight
                        }
                    },
                    pluginsLength: function() {
                        if (navigator.plugins === void 0)
                            throw new W(-1,"navigator.plugins is undefined");
                        if (navigator.plugins.length === void 0)
                            throw new W(-3,"navigator.plugins.length is undefined");
                        return navigator.plugins.length
                    },
                    pluginsArray: function() {
                        if (navigator.plugins === void 0)
                            throw new W(-1,"navigator.plugins is undefined");
                        if (window.PluginArray === void 0)
                            throw new W(-1,"window.PluginArray is undefined");
                        return navigator.plugins instanceof PluginArray
                    },
                    errorTrace: function() {
                        try {
                            null[0]()
                        } catch (n) {
                            if (n instanceof Error && n.stack != null)
                                return n.stack.toString()
                        }
                        throw new W(-3,"errorTrace signal unexpected behaviour")
                    },
                    productSub: function() {
                        var n = navigator.productSub;
                        if (n === void 0)
                            throw new W(-1,"navigator.productSub is undefined");
                        return n
                    },
                    windowExternal: function() {
                        if (window.external === void 0)
                            throw new W(-1,"window.external is undefined");
                        var n = window.external;
                        if (typeof n.toString != "function")
                            throw new W(-2,"window.external.toString is not a function");
                        return n.toString()
                    },
                    mimeTypesConsistent: function() {
                        if (navigator.mimeTypes === void 0)
                            throw new W(-1,"navigator.mimeTypes is undefined");
                        for (var n = navigator.mimeTypes, e = Object.getPrototypeOf(n) === MimeTypeArray.prototype, t = 0; t < n.length; t++)
                            e && (e = Object.getPrototypeOf(n[t]) === MimeType.prototype);
                        return e
                    },
                    evalLength: function() {
                        return eval.toString().length
                    },
                    webGL: function() {
                        var n = document.createElement("canvas");
                        if (typeof n.getContext != "function")
                            throw new W(-2,"HTMLCanvasElement.getContext is not a function");
                        var e = n.getContext("webgl");
                        if (e === null)
                            throw new W(-4,"WebGLRenderingContext is null");
                        if (typeof e.getParameter != "function")
                            throw new W(-2,"WebGLRenderingContext.getParameter is not a function");
                        return {
                            vendor: e.getParameter(e.VENDOR),
                            renderer: e.getParameter(e.RENDERER)
                        }
                    },
                    webDriver: function() {
                        if (navigator.webdriver == null)
                            throw new W(-1,"navigator.webdriver is undefined");
                        return navigator.webdriver
                    },
                    languages: function() {
                        var n, e = navigator, t = [], r = e.language || e.userLanguage || e.browserLanguage || e.systemLanguage;
                        if (r !== void 0 && t.push([r]),
                        Array.isArray(e.languages))
                            Or() === "chromium" && xt([!("MediaSettingsRange"in (n = window)), "RTCEncodedAudioFrame"in n, "" + n.Intl == "[object Intl]", "" + n.Reflect == "[object Reflect]"]) >= 3 || t.push(e.languages);
                        else if (typeof e.languages == "string") {
                            var i = e.languages;
                            i && t.push(i.split(","))
                        }
                        return t
                    },
                    notificationPermissions: function() {
                        return kt(this, void 0, void 0, function() {
                            var n, e;
                            return Pt(this, function(t) {
                                switch (t.label) {
                                case 0:
                                    if (window.Notification === void 0)
                                        throw new W(-1,"window.Notification is undefined");
                                    if (navigator.permissions === void 0)
                                        throw new W(-1,"navigator.permissions is undefined");
                                    if (typeof (n = navigator.permissions).query != "function")
                                        throw new W(-2,"navigator.permissions.query is not a function");
                                    t.label = 1;
                                case 1:
                                    return t.trys.push([1, 3, , 4]),
                                    [4, n.query({
                                        name: "notifications"
                                    })];
                                case 2:
                                    return e = t.sent(),
                                    [2, window.Notification.permission === "denied" && e.state === "prompt"];
                                case 3:
                                    throw t.sent(),
                                    new W(-3,"notificationPermissions signal unexpected behaviour");
                                case 4:
                                    return [2]
                                }
                            })
                        })
                    },
                    documentElementKeys: function() {
                        if (document.documentElement === void 0)
                            throw new W(-1,"document.documentElement is undefined");
                        var n = document.documentElement;
                        if (typeof n.getAttributeNames != "function")
                            throw new W(-2,"document.documentElement.getAttributeNames is not a function");
                        return n.getAttributeNames()
                    },
                    functionBind: function() {
                        if (Function.prototype.bind === void 0)
                            throw new W(-2,"Function.prototype.bind is undefined");
                        return Function.prototype.bind.toString()
                    },
                    process: function() {
                        var n = window.process
                          , e = "window.process is";
                        if (n === void 0)
                            throw new W(-1,"".concat(e, " undefined"));
                        if (n && typeof n != "object")
                            throw new W(-3,"".concat(e, " not an object"));
                        return n
                    },
                    distinctiveProps: function() {
                        var n, e, t = ((n = {}).awesomium = {
                            window: ["awesomium"]
                        },
                        n.cef = {
                            window: ["RunPerfTest"]
                        },
                        n.cefsharp = {
                            window: ["CefSharp"]
                        },
                        n.coachjs = {
                            window: ["emit"]
                        },
                        n.fminer = {
                            window: ["fmget_targets"]
                        },
                        n.geb = {
                            window: ["geb"]
                        },
                        n.nightmarejs = {
                            window: ["__nightmare", "nightmare"]
                        },
                        n.phantomas = {
                            window: ["__phantomas"]
                        },
                        n[cr] = {
                            window: ["callPhantom", "_phantom"]
                        },
                        n.rhino = {
                            window: ["spawn"]
                        },
                        n[an] = {
                            window: ["_Selenium_IDE_Recorder", "_selenium", "calledSelenium", /^([a-z]){3}_.*_(Array|Promise|Symbol)$/],
                            document: ["__selenium_evaluate", "selenium-evaluate", "__selenium_unwrapped"]
                        },
                        n.webdriverio = {
                            window: ["wdioElectron"]
                        },
                        n.webdriver = {
                            window: ["webdriver", "__webdriverFunc", "__lastWatirAlert", "__lastWatirConfirm", "__lastWatirPrompt", "_WEBDRIVER_ELEM_CACHE", "ChromeDriverw"],
                            document: ["__webdriver_script_fn", "__driver_evaluate", "__webdriver_evaluate", "__fxdriver_evaluate", "__driver_unwrapped", "__webdriver_unwrapped", "__fxdriver_unwrapped", "__webdriver_script_fn", "__webdriver_script_func", "__webdriver_script_function", "$cdc_asdjflasutopfhvcZLmcf", "$cdc_asdjflasutopfhvcZLmcfl_", "$chrome_asyncScriptInfo", "__$webdriverAsyncExecutor"]
                        },
                        n[Oe] = {
                            window: ["domAutomation", "domAutomationController"]
                        },
                        n), r = {}, i = un(window), s = [];
                        for (e in window.document !== void 0 && (s = un(window.document)),
                        t) {
                            var o = t[e];
                            if (o !== void 0) {
                                var c = o.window !== void 0 && Tr.apply(void 0, on([i], o.window, !1))
                                  , u = !(o.document === void 0 || !s.length) && Tr.apply(void 0, on([s], o.document, !1));
                                r[e] = c || u
                            }
                        }
                        return r
                    }
                }, Si = function() {
                    function n() {
                        this.components = void 0,
                        this.detections = void 0
                    }
                    return n.prototype.getComponents = function() {
                        return this.components
                    }
                    ,
                    n.prototype.getDetections = function() {
                        return this.detections
                    }
                    ,
                    n.prototype.detect = function() {
                        if (this.components === void 0)
                            throw new Error("BotDetector.detect can't be called before BotDetector.collect");
                        var e = ln(this.components, hn)
                          , t = e[0]
                          , r = e[1];
                        return this.detections = t,
                        r
                    }
                    ,
                    n.prototype.collect = function() {
                        return kt(this, void 0, void 0, function() {
                            var e;
                            return Pt(this, function(t) {
                                switch (t.label) {
                                case 0:
                                    return e = this,
                                    [4, wi(Ni)];
                                case 1:
                                    return e.components = t.sent(),
                                    [2, this.components]
                                }
                            })
                        })
                    }
                    ,
                    n
                }();
                class bi extends ge {
                    constructor() {
                        super(...arguments),
                        this.detected = !1
                    }
                    setupPermissionMonitor() {
                        this.status = new K("granted")
                    }
                    start() {
                        try {
                            this.detected || this.customizeDetect()
                        } catch (e) {
                            this.errorService.reportException(e)
                        }
                    }
                    stop() {}
                    prompt() {}
                    getSensorType() {
                        return D.BOTD
                    }
                    getSensorName() {
                        return "BotD"
                    }
                    getBundleField() {
                        return "botd"
                    }
                    async customizeDetect() {
                        let e = await function(c) {
                            var u = {}.monitoring
                              , l = u === void 0 || u;
                            return kt(this, void 0, void 0, function() {
                                var a;
                                return Pt(this, function(d) {
                                    switch (d.label) {
                                    case 0:
                                        return l && function() {
                                            if (!(window.__fpjs_d_m || Math.random() >= .001))
                                                try {
                                                    var h = new XMLHttpRequest;
                                                    h.open("get", "https://m1.openfpcdn.io/botd/v".concat("1.9.1", "/npm-monitoring"), !0),
                                                    h.send()
                                                } catch {}
                                        }(),
                                        [4, (a = new Si).collect()];
                                    case 1:
                                        return d.sent(),
                                        [2, a]
                                    }
                                })
                            })
                        }()
                          , t = await e.collect()
                          , r = await e.getComponents()
                          , i = Object.assign({}, hn);
                        ["detectPluginsLengthInconsistency"].forEach(c => {
                            delete i[c]
                        }
                        );
                        let[s,o] = ln(r, i);
                        this.pushResult(o, s, t)
                    }
                    pushResult(e, t, r) {
                        if (e) {
                            let i = Nt.create({
                                determinedAt: v(T.getRelativeTime()),
                                bot: e.bot,
                                botKind: e.botKind || "",
                                version: "1.9.1",
                                collectedData: e.bot && r ? JSON.stringify(r) : "{}",
                                detectors: e.bot && t ? JSON.stringify(t) : "{}"
                            });
                            this.data.push(i),
                            this.detected = !0
                        }
                    }
                }
                class _i extends ge {
                    setupPermissionMonitor() {
                        this.status = new K("granted")
                    }
                    start() {
                        try {
                            (async () => {
                                var t, r;
                                let[i,s,o,c] = await Promise.all([this.detectBattery(), this.detectWebGLInfo(), this.detectPerformance(), this.detectPermissions()])
                                  , u = Te.create({
                                    determinedAt: v(T.getRelativeTime()),
                                    userAgent: navigator.userAgent,
                                    deviceMemory: navigator.deviceMemory || 0,
                                    hardwareConcurrency: navigator.hardwareConcurrency || 0,
                                    maxTouchPoints: navigator.maxTouchPoints || 0,
                                    language: navigator.language || "",
                                    languages: [...navigator.languages],
                                    vendor: navigator.vendor || "",
                                    productSub: navigator.productSub || "",
                                    platform: navigator.platform || "",
                                    onLine: this.getEnabled(navigator.onLine),
                                    cookieEnabled: this.getEnabled(navigator.cookieEnabled),
                                    pdfViewerEnabled: this.getEnabled(navigator.pdfViewerEnabled),
                                    battery: i,
                                    connectEffectiveType: (t = navigator.connection) === null || t === void 0 ? void 0 : t.effectiveType,
                                    webgl: s,
                                    performanceTiming: o,
                                    connectRTT: (r = navigator.connection) === null || r === void 0 ? void 0 : r.rtt,
                                    permissions: c
                                });
                                this.data.push(u)
                            }
                            )()
                        } catch (e) {
                            this.errorService.reportException(e)
                        }
                    }
                    getEnabled(e) {
                        return typeof e == "boolean" ? e ? Te.Enabled.ENABLED : Te.Enabled.DISABLED : Te.Enabled.UNKNOWN
                    }
                    stop() {}
                    prompt() {}
                    getSensorType() {}
                    getSensorName() {
                        return "ClientInfo"
                    }
                    getBundleField() {
                        return "clientInfo"
                    }
                    async detectBattery() {
                        try {
                            let e;
                            if ("getBattery"in navigator && typeof navigator.getBattery == "function") {
                                let t = await navigator.getBattery();
                                if (t) {
                                    let r = 100 * (t.level || 0)
                                      , i = E.State.UNKNOWN;
                                    t.charging && (i = E.State.CHARGING),
                                    e = E.create({
                                        capacity: r,
                                        state: i
                                    })
                                }
                            }
                            return e
                        } catch (e) {
                            return this.logger.debug(e?.message),
                            null
                        }
                    }
                    async detectWebGLInfo() {
                        try {
                            let e = document.createElement("canvas");
                            if (typeof e.getContext != "function")
                                throw new Error("HTMLCanvasElement.getContext is not a function");
                            let t = e.getContext("webgl");
                            if (t === null)
                                throw new Error("WebGLRenderingContext is null");
                            if (typeof t.getParameter != "function")
                                throw new Error("WebGLRenderingContext.getParameter is not a function");
                            let r = t.getExtension("WEBGL_debug_renderer_info");
                            if (!r)
                                throw new Error("WEBGL_debug_renderer_info extension not available.");
                            return {
                                vendor: `${t.getParameter(r.UNMASKED_VENDOR_WEBGL)}`,
                                renderer: `${t.getParameter(r.UNMASKED_RENDERER_WEBGL)}`
                            }
                        } catch (e) {
                            return this.logger.debug(e?.message),
                            null
                        }
                    }
                    async detectPerformance() {
                        return null
                    }
                    async detectPermissions() {
                        return null
                    }
                }
                class Ti extends gt {
                    constructor() {
                        super(...arguments),
                        this.element = document
                    }
                    start() {
                        this.eventCallback = e => {
                            try {
                                this.processEvent(e)
                            } catch (t) {
                                this.errorService.reportException(t)
                            }
                        }
                        ,
                        this.element.addEventListener("selectionchange", this.eventCallback)
                    }
                    stop() {
                        this.element.removeEventListener("selectionchange", this.eventCallback)
                    }
                    prompt() {}
                    processEvent(e) {
                        var t, r;
                        let i = window.getSelection();
                        if (!i?.toString().length)
                            return;
                        let s, o = se.Type.NONE;
                        switch (i.type.toUpperCase()) {
                        case "CART":
                            o = se.Type.CART;
                            break;
                        case "RANGE":
                            o = se.Type.RANGE;
                            break;
                        default:
                            o = se.Type.NONE
                        }
                        i.anchorNode instanceof HTMLElement ? s = this.getTarget(i.anchorNode) : ((t = i.anchorNode) === null || t === void 0 ? void 0 : t.parentElement)instanceof HTMLElement && (s = this.getTarget((r = i.anchorNode) === null || r === void 0 ? void 0 : r.parentElement));
                        let c = se.create({
                            determinedAt: v(e.timeStamp || T.getRelativeTime()),
                            type: o,
                            anchorOffset: i.anchorOffset,
                            focusOffset: i.focusOffset,
                            rangeCount: i.rangeCount,
                            target: s,
                            direction: this.getDirection(i.anchorOffset, i.focusOffset),
                            selectLength: i.toString().length
                        });
                        this.logger.debug("Selection Update", c),
                        this.data.push(c)
                    }
                    getSensorType() {
                        return D.SELECTION
                    }
                    getSensorName() {
                        return "Selection"
                    }
                    getBundleField() {
                        return "selectionEvents"
                    }
                    getDirection(e, t) {
                        if (typeof e == "number" && typeof t == "number") {
                            if (e < t)
                                return se.Direction.FORWARD;
                            if (e > t)
                                return se.Direction.BACKWARD
                        }
                        return se.Direction.NONE
                    }
                }
                class Oi extends ge {
                    constructor(e, t, r, i, s) {
                        super(e, t, r, i, !1),
                        this.sensorConfig = s
                    }
                    setupPermissionMonitor() {
                        this.status = new K("granted")
                    }
                    start() {
                        this.detect(),
                        this.timer = setInterval( () => this.detect(), this.sensorConfig.detectInterval)
                    }
                    stop() {
                        this.timer && clearInterval(this.timer)
                    }
                    prompt() {}
                    getSensorType() {
                        return D.ROUND_TRIP_TIME
                    }
                    getSensorName() {
                        return "RoundTripTime"
                    }
                    getBundleField() {
                        return "roundTripTime"
                    }
                    async detect() {
                        try {
                            let e = performance.now();
                            if (!(await fetch("https://postman-echo.com/response-headers?Access-Control-Allow-Origin=*", {
                                cache: "no-store"
                            })).ok)
                                return;
                            let r = performance.now() - e
                              , i = St.create({
                                determinedAt: v(T.getRelativeTime()),
                                timeInMs: Math.floor(r || 0)
                            });
                            this.logger.debug("RoundTripTime Update", i),
                            this.data.push(i)
                        } catch (e) {
                            this.logger.debug("RoundTripTime Error", e)
                        }
                    }
                }
                class dn {
                    constructor(e, t, r, i, s, o, c) {
                        var u, l, a;
                        this.sessionConfig = s,
                        this.callbackManager = o,
                        this.uuidManager = c,
                        this.MAX_CUSTOM_EVENT_NAME_LEN = 50,
                        this.MAX_CUSTOM_EVENT_KEY_LEN = 50,
                        this.MAX_CUSTOM_EVENT_PROPERTY_KEY_LEN = 50,
                        this.MAX_CUSTOM_EVENT_PROPERTY_VALUE_LEN = 500,
                        this._inProgress = !0,
                        this._isStopFinished = !1,
                        this.bundleCount = 0,
                        this.sensors = [],
                        this.customEvents = [],
                        this.featureSensors = new Set,
                        this.bundleSensorsToOutput = new Set,
                        this.sensorsToRecord = new Set,
                        this.eventEmitter = new gi,
                        this.manager = e,
                        this.logger = r,
                        this.errorService = i,
                        this._localId = T.uuid(),
                        this._duration = s.duration,
                        this._startTime = T.getRelativeTime(),
                        this._labels = this.formatSessionLabels(s.labels || {}),
                        this.userAgent = T.splitUserAgent(navigator.userAgent),
                        this.metadata = Ie.create({
                            installId: c.getInstallId(),
                            journeyIdSalt: t.journeyIdSalt || "",
                            platform: Ie.Platform.WEB,
                            manufacturer: this.userAgent.browser,
                            systemVersion: this.userAgent.version,
                            model: this.userAgent.raw,
                            isDevicePhysical: Ie.IsDevicePhysical.Yes,
                            devicePhysicalWidth: "" + window.screen.width * window.devicePixelRatio,
                            devicePhysicalHeight: "" + window.screen.height * window.devicePixelRatio,
                            devicePixelRatio: `${window.devicePixelRatio}`,
                            releaseVersion: V
                        }),
                        (u = s.featureGenerators) === null || u === void 0 || u.forEach(p => {
                            p.getRequestedSensorTypes().forEach(N => {
                                let g = D[S[N]];
                                this.featureSensors.add(g),
                                this.sensorsToRecord.add(g)
                            }
                            )
                        }
                        );
                        let d = [];
                        ((l = s.sensorTypes) === null || l === void 0 ? void 0 : l.length) > 0 ? d = s.sensorTypes : ((a = t.sensorTypes) === null || a === void 0 ? void 0 : a.length) > 0 && (d = t.sensorTypes),
                        this.featureSensors.size <= 0 && d.length <= 0 && (d = Zr,
                        this.logger.info("Empty sensor list passed to session start and no feature generators set. Recording all available sensors."));
                        let h = d.indexOf(S.SCROLL);
                        h >= 0 && (d.indexOf(S.VIEW_SCROLL) < 0 && d.push(S.VIEW_SCROLL),
                        d.splice(h, 1)),
                        d.forEach(p => {
                            let N = D[S[p]];
                            this.sensorsToRecord.add(N),
                            this.bundleSensorsToOutput.add(N)
                        }
                        ),
                        this.logger.debug("bundleSensorsToOutput: ", this.bundleSensorsToOutput),
                        this.externalConfig = At.create({
                            requestedDurationMillis: v(this._duration),
                            sensorSamplingRate: v(this.sessionConfig.sessionSamplingRate),
                            bundleGenerationIntervalMillis: v(this.sessionConfig.bundleGenerationInterval),
                            requestedSensors: Array.from(this.sensorsToRecord)
                        }),
                        this.setupSensors(),
                        this.logger.debug("Session config: ", this.externalConfig)
                    }
                    requiresSensor(e) {
                        return this.sensorsToRecord.has(D[e])
                    }
                    setupSensors() {
                        if (this.sensorsToRecord.size > 0) {
                            let e = new oi(this.logger,this.errorService,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e),
                            this.lifeCycleSensor = new ai(this.logger,this.errorService,this.userAgent,this.eventEmitter),
                            this.lifeCycleSensor.record(),
                            this.sensors.push(this.lifeCycleSensor);
                            let t = new _i(this.logger,this.errorService,this.userAgent,this.eventEmitter);
                            t.record(),
                            this.sensors.push(t)
                        }
                        if ((this.requiresSensor(S.KEY_PRESS) || this.requiresSensor(S.FOCUS_CHANGE) || this.requiresSensor(S.INPUT_CHANGE) || this.requiresSensor(S.FORM_SUBMIT)) && (this.inputTracker = new tn(this.callbackManager,this,this.textMaskerFactory)),
                        this.requiresSensor(S.ACCELEROMETER)) {
                            let e = new Xn(this.logger,this.errorService,this.sessionConfig.sessionSamplingRate,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.LOCATION)) {
                            let e = new Qn(this.logger,this.errorService,this.userAgent,this.eventEmitter,!0);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.FOCUS_CHANGE)) {
                            let e = new ni(this.logger,this.errorService,this.userAgent,this.inputTracker,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.KEY_PRESS)) {
                            let e = new ri(this.logger,this.errorService,this.userAgent,this.inputTracker,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.CLICK)) {
                            let e = new hi(this.logger,this.errorService,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.LINEAR_ACCELEROMETER)) {
                            let e = new Zn(this.logger,this.errorService,this.sessionConfig.sessionSamplingRate,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.MOUSE_WHEEL)) {
                            let e = new si(this.logger,this.errorService,this.userAgent,this.eventEmitter,this.metadata.manufacturer);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.POINTER)) {
                            let e = new ei(this.logger,this.errorService,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.VIEW_SCROLL)) {
                            let e = new ii(this.logger,this.errorService,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.INPUT_CHANGE)) {
                            let e = new ti(this.logger,this.errorService,this.userAgent,this.inputTracker,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.FORM_SUBMIT)) {
                            let e = new di(this.logger,this.errorService,this.userAgent,this.inputTracker,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.ORIENTATION)) {
                            let e = new ci(this.logger,this.errorService,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.GYROSCOPE)) {
                            let e = new li(this.logger,this.errorService,this.sessionConfig.sessionSamplingRate,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.MAGNETOMETER)) {
                            let e = new ui(this.logger,this.errorService,this.sessionConfig.sessionSamplingRate,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.CONTEXT_MENU)) {
                            let e = new mi(this.logger,this.errorService,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.FRAME_RATE)) {
                            let e = new nn(this.logger,this.errorService,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.CONSOLE)) {
                            let e = new fi(this.logger,this.errorService,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.NETWORK)) {
                            let e = new vi(this.logger,this.errorService,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.EXCEPTION)) {
                            let e = new yi(this.logger,this.errorService,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.CLIPBOARD)) {
                            let e = new Ei(this.logger,this.errorService,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.BOTD)) {
                            let e = new bi(this.logger,this.errorService,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.SELECTION)) {
                            let e = new Ti(this.logger,this.errorService,this.userAgent,this.eventEmitter);
                            e.record(),
                            this.sensors.push(e)
                        }
                        if (this.requiresSensor(S.ROUND_TRIP_TIME)) {
                            let e = new Oi(this.logger,this.errorService,this.userAgent,this.eventEmitter,{
                                detectInterval: 4e3
                            });
                            e.record(),
                            this.sensors.push(e)
                        }
                    }
                    get textMaskerFactory() {
                        return () => new en
                    }
                    flushBundle(e=!1) {
                        var t;
                        let r = new O({
                            isFinalBundle: !1
                        })
                          , i = new Set
                          , s = 0;
                        this.sensors.forEach(l => {
                            let a = l.flushData();
                            a && a.length > 0 && (r[l.getBundleField()] = a,
                            s++,
                            l.getSensorType() === void 0 || this.bundleSensorsToOutput.has(l.getSensorType()) || i.add(l.getBundleField()));
                            let d = l.flushPermissionEvents();
                            d && d.length > 0 && (r.permissionEvents || (r.permissionEvents = []),
                            r.permissionEvents = r.permissionEvents.concat(d)),
                            l instanceof nn && (r.frameRateEvent = He.create({
                                determinedAt: v(T.getRelativeTime()),
                                framesPerSecond: l.flushFrameRate()
                            }))
                        }
                        );
                        let o = this.customEvents;
                        if (this.customEvents = [],
                        o.length > 0 && (r.customEvents = o,
                        s++),
                        s === 0 && this._inProgress || this._isStopFinished)
                            return null;
                        let c = v(T.getRelativeTime());
                        r.clientTime = new re({
                            wallTimeMillis: v(Date.now()),
                            timerMillis: c,
                            timerRealtimeMillis: c
                        }),
                        this._inProgress || (this._isStopFinished = !0,
                        r.isFinalBundle = !0),
                        this.bundleCount++,
                        r.index = this.bundleCount;
                        let u = {};
                        return (t = this.sessionConfig.featureGenerators) === null || t === void 0 || t.forEach(l => {
                            try {
                                let a = l.generateFeatures(r);
                                a && Object.keys(a).forEach(d => {
                                    u[d] = a[d]
                                }
                                )
                            } catch (a) {
                                this.errorService.reportException(new ar(a))
                            }
                        }
                        ),
                        i.forEach(l => {
                            delete r[l]
                        }
                        ),
                        r.features = u,
                        O.create(r)
                    }
                    addLabels(e) {
                        if (Object.keys(e).length <= 0)
                            return void this.logger.info("Add labels called with no arguments");
                        let t = this.formatSessionLabels(e);
                        this._labels = Object.assign(Object.assign({}, this._labels), t)
                    }
                    addCustomEvent(e, t, r={}) {
                        try {
                            if (!this.inProgress())
                                throw new or(this);
                            if (!e || e.length === 0 || e.length > this.MAX_CUSTOM_EVENT_NAME_LEN)
                                throw new $e(this,`custom event name must be set and must be ${this.MAX_CUSTOM_EVENT_NAME_LEN} characters or less`);
                            if (t && t.length > this.MAX_CUSTOM_EVENT_KEY_LEN)
                                throw new $e(this,`custom event key must be ${this.MAX_CUSTOM_EVENT_KEY_LEN} characters or less`);
                            if (Object.keys(r).filter(s => !s || s.length > this.MAX_CUSTOM_EVENT_KEY_LEN || s.length === 0).length > 0)
                                throw new $e(this,`custom event property keys must be set and must be ${this.MAX_CUSTOM_EVENT_PROPERTY_KEY_LEN} characters or less`);
                            if (Object.values(r).filter(s => typeof s == "string" && s.length > this.MAX_CUSTOM_EVENT_PROPERTY_VALUE_LEN).length > 0)
                                throw new $e(this,`custom event property values must be set and must be ${this.MAX_CUSTOM_EVENT_PROPERTY_VALUE_LEN} characters or less`);
                            let i = Re.create({
                                determinedAt: v(T.getRelativeTime()),
                                eventName: e,
                                eventKey: t,
                                properties: r
                            });
                            this.customEvents.push(i),
                            this.logger.debug("Added custom event", i)
                        } catch (i) {
                            this.errorService.reportException(i, this)
                        }
                    }
                    get activeSensorCount() {
                        return this.sensors.filter(e => e.isRecording).length
                    }
                    get hasData() {
                        return this.sensors.find(e => e.hasData) !== void 0
                    }
                    get duration() {
                        return this._duration
                    }
                    get startTime() {
                        return this._startTime
                    }
                    stop() {
                        this._inProgress = !1,
                        this.sensors.forEach(e => {
                            e.stopRecording()
                        }
                        )
                    }
                    pause(e=!1) {
                        this.inProgress && (this.logger.info("Session paused"),
                        this.lifeCycleSensor.recordLifeCycleChange(e),
                        this.sensors.forEach(t => {
                            t.stopRecording()
                        }
                        ))
                    }
                    resume() {
                        this.logger.info("Session resumed"),
                        this.sensors.forEach(e => {
                            e.record()
                        }
                        )
                    }
                    getLocalId() {
                        return this._localId
                    }
                    inProgress() {
                        return this._inProgress
                    }
                    stopSession() {
                        return this.manager.stopSession(this)
                    }
                    getDuration() {
                        return this._duration
                    }
                    getElapsedTime(e=window.performance.now()) {
                        return e - this._startTime
                    }
                    getLabels() {
                        return this._labels
                    }
                    getSessionMetadata() {
                        return {
                            installId: this.metadata.installId,
                            manufacturer: this.metadata.manufacturer,
                            model: this.metadata.model,
                            osVersion: this.metadata.systemVersion,
                            isDevicePhysical: this.metadata.isDevicePhysical,
                            devicePhysicalWidth: this.metadata.devicePhysicalWidth,
                            devicePhysicalHeight: this.metadata.devicePhysicalHeight,
                            deviceLogicalWidth: this.metadata.deviceLogicalWidth,
                            deviceLogicalHeight: this.metadata.deviceLogicalHeight,
                            devicePixelRatio: this.metadata.devicePixelRatio
                        }
                    }
                    complete() {
                        return Promise.resolve()
                    }
                    getRemoteId() {
                        return this.logger.warn("Session.getRemoteId() is only available on the YofiTelemetry Cloud SDK"),
                        Promise.resolve(null)
                    }
                    getJourneyId() {
                        return this.sessionConfig.journeyId
                    }
                    getVgsMonitor() {
                        return this.vgsMonitor || (this.vgsMonitor = new pi(this.logger,this.eventEmitter,this)),
                        this.vgsMonitor
                    }
                    addVgsForm(e) {
                        return this.getVgsMonitor().addForm(e),
                        this
                    }
                    addVgsField(e) {
                        return this.getVgsMonitor().addField(e),
                        this
                    }
                    formatSessionLabels(e) {
                        if (Object.keys(e).length <= 0)
                            return {};
                        let t = {};
                        for (let[r,i] of Object.entries(e))
                            ["client_id", "journey_id"].includes(r) || (t[r] = typeof i == "string" ? i : String(i));
                        return t
                    }
                }
                (function(n) {
                    n.REQUEST_ACTION = "requestAction"
                }
                )(ur || (ur = {}));
                let Ai = class {
                    constructor(n) {
                        this.onError = n
                    }
                    isYofiTelemetryError(n) {
                        return n instanceof q
                    }
                    reportException(n, e, t) {
                        if (this.onError)
                            try {
                                this.onError(n)
                            } catch {}
                    }
                }
                ;
                class Ci {
                    constructor(e, t, r) {
                        this.logger = e,
                        this.sdkConfig = t,
                        this.uuidManager = r,
                        this.DEFAULT_FLUSH_INTERVAL = 2e3,
                        this.sessions = [],
                        this._sendData = !0,
                        this.logger = e,
                        this.sdkConfig = t,
                        this.configuredFlushInterval = t.bundleGenerationInterval || this.DEFAULT_FLUSH_INTERVAL,
                        this.startFocusMonitor()
                    }
                    postConstruct() {
                        this._errorService = this.setupErrorService(),
                        this.callbackManager = this.setupCallbackManager(),
                        this.logger.debug(`YofiTelemetry Web SDK Initialized. Will flush bundles every ${this.configuredFlushInterval}ms`)
                    }
                    setYofiTelemetryCallback(e) {
                        this.callbackManager.setCallback(e)
                    }
                    startFocusMonitor() {
                        document.addEventListener("visibilitychange", () => this.handleVisibilityChange(!1), !1),
                        window.addEventListener("beforeunload", () => this.handleVisibilityChange(!0), !1)
                    }
                    handleVisibilityChange(e) {
                        document.visibilityState === "hidden" || e ? (this.logger.info("Page has been " + (e ? "destroyed" : "backgrounded")),
                        this.sessions.forEach(t => {
                            t.pause(e),
                            this.flushSession(t, !0)
                        }
                        )) : (this.logger.info("Page has been foregrounded"),
                        this.sessions.forEach(t => t.resume()))
                    }
                    startFlushTimer() {
                        this.flushInterval || (this.flushInterval = setInterval( () => this.flush(), this.configuredFlushInterval))
                    }
                    flush() {
                        let e = T.getRelativeTime();
                        this.sessions.forEach(t => {
                            this.flushSession(t, !1, e)
                        }
                        ),
                        this.verifyAndClearActiveSessions()
                    }
                    verifyAndClearActiveSessions() {
                        this.removeStoppedSessions(),
                        this.checkFlushTimer()
                    }
                    flushSession(e, t, r=T.getRelativeTime()) {
                        let i = e.flushBundle(t);
                        i && (this.bundleCreated(e, i),
                        this.logger.debug("Bundle Created", i)),
                        e.inProgress() && this.shouldSessionEnd(r, e) && this.stopSession(e)
                    }
                    stopAllSessions() {
                        this.logger.info("Stop all sessions called");
                        let e = [];
                        try {
                            this.sessions.forEach(t => {
                                try {
                                    e.push(this.stopSession(t))
                                } catch (r) {
                                    this.errorService.reportException(r, t, {
                                        [ur.REQUEST_ACTION]: "stopSession"
                                    }),
                                    this.logger.warn("Error stopping session")
                                }
                            }
                            ),
                            this.removeStoppedSessions(),
                            this.checkFlushTimer()
                        } catch (t) {
                            this.errorService.reportException(t, void 0, {
                                [ur.REQUEST_ACTION]: "stopAllSessions"
                            }),
                            this.logger.warn("Error stopping all sessions")
                        }
                        return Promise.all(e).then( () => {}
                        ).catch( () => {}
                        )
                    }
                    removeStoppedSessions() {
                        let e = [];
                        this.sessions.forEach(t => {
                            (t.inProgress() || t.hasData) && e.push(t)
                        }
                        ),
                        this.sessions = e
                    }
                    checkFlushTimer() {
                        this.activeSessionCount <= 0 && this.unflushedSessionCount <= 0 && (clearInterval(this.flushInterval),
                        this.flushInterval = null,
                        this.logger.info("No active sessions. Stopping monitoring."))
                    }
                    stopSession(e) {
                        return e.stop(),
                        this.flushSession(e, !1),
                        this.callbackManager.onSessionStopped(e),
                        e.complete().catch( () => Promise.resolve())
                    }
                    shouldSessionEnd(e, t) {
                        return t.duration !== y.SESSION_DURATION_INFINITE && e - t.startTime >= t.duration
                    }
                    createSessionObject(e) {
                        return new dn(this,this.sdkConfig,this.logger,this.errorService,e,this.callbackManager,this.uuidManager)
                    }
                    createSession(e) {
                        var t;
                        if (e.duration <= 0 && e.duration !== y.SESSION_DURATION_INFINITE)
                            throw new Error(`YofiTelemetry Session duration must either be ${y.SESSION_DURATION_INFINITE} or greater than 0`);
                        if (((t = e.sensorTypes) === null || t === void 0 ? void 0 : t.length) > 0) {
                            let r = e.sensorTypes.indexOf("TEXT_CHANGE");
                            r >= 0 && (this.logger.warn("TEXT_CHANGE sensor has been replaced by INPUT_CHANGE sensor"),
                            e.sensorTypes.splice(r, 1),
                            e.sensorTypes.indexOf(S.INPUT_CHANGE) < 0 && e.sensorTypes.push(S.INPUT_CHANGE))
                        }
                        this.logger.info("Starting session with duration: " + (e.duration === y.SESSION_DURATION_INFINITE ? "infinite" : e.duration + "ms"));
                        try {
                            let r = this.sdkConfig.globalSamplingRate || y.DEFAULT_GLOBAL_SAMPLING_RATE;
                            e.journeyId = this.uuidManager.getJourneyId();
                            let i = Object.assign(Object.assign({}, e), {
                                sessionSamplingRate: r,
                                bundleGenerationInterval: this.configuredFlushInterval
                            })
                              , s = this.createSessionObject(i);
                            return this.sessions.push(s),
                            this.callbackManager.onSessionStarted(s),
                            this.startFlushTimer(),
                            s
                        } catch (r) {
                            return this.errorService.reportException(new q(`Couldn't start session: ${r.message}`)),
                            null
                        }
                    }
                    get sendData() {
                        return this._sendData
                    }
                    get activeSessionCount() {
                        return this.sessions.filter(e => e.inProgress()).length
                    }
                    get unflushedSessionCount() {
                        return this.sessions.filter(e => e.hasData).length
                    }
                    get errorService() {
                        return this._errorService
                    }
                }
                class hr extends sr {
                    constructor(e, t, r) {
                        super(e, t, r),
                        Object.setPrototypeOf(this, hr.prototype)
                    }
                }
                class Ri extends dn {
                    constructor(e, t, r, i, s, o, c) {
                        super(e, t, r, i, s, o, c),
                        this.sessionConfig = s,
                        this.callbackManager = o,
                        this.uuidManager = c,
                        this.activePromises = [];
                        let u = c.getJourneyId();
                        this._yofiSession = Ot.create({
                            metadata: this.metadata,
                            labels: Object.assign(Object.assign({}, this.getLabels()), {
                                client_id: c.getInstallId(),
                                journey_id: u
                            }),
                            journeyId: u,
                            clientSessionGroupId: s.journeyId || s.clientSessionGroupId,
                            config: this.externalConfig
                        }),
                        this.createSessionOnCloud(),
                        this.runNetworkTelemetry()
                    }
                    flushBundle(e=!1) {
                        let t = super.flushBundle();
                        return this.manager.sendData && t && this.sessionCreatedPromise.then( () => {
                            this.sendBundle(t, e)
                        }
                        ).catch( () => {
                            this.logger.warn("Couldn't flush bundle because session creation failed")
                        }
                        ),
                        t
                    }
                    addLabels(e) {
                        return new Promise(async (t, r) => {
                            try {
                                await super.addLabels(e),
                                this.manager.sendData ? this.sessionCreatedPromise.then( () => {
                                    let i = this.getLabels();
                                    this.activeDataPlane.updateSessionLabels(this.yofiSession.sessionId, this.yofiSession.journeyId, i).then( () => {
                                        this.logger.debug("Label update request successful"),
                                        t()
                                    }
                                    ).catch(async s => {
                                        let o = new Error(await s?.detailedError || "Label update failed");
                                        this.logger.debug(o.message),
                                        r(o)
                                    }
                                    )
                                }
                                ).catch( () => {
                                    r(new Error("Couldn't add label because session creation failed"))
                                }
                                ) : t()
                            } catch (i) {
                                let s = new Error(i?.message || "Label update failed");
                                this.logger.warn(s.message),
                                r(s)
                            }
                        }
                        )
                    }
                    createSessionOnCloud() {
                        if (this.manager.sendData) {
                            let e = this.manager;
                            this.sessionCreatedPromise = new Promise( (t, r) => {
                                e.dataPlanesPromise.then( () => {
                                    let i = e.dataPlanes;
                                    this.sendSessionRequest(i[0]).then( () => {
                                        t()
                                    }
                                    ).catch(s => {
                                        i.length > 1 ? (this.logger.info("Creating Session on primary data plane failed. Attempting backup data plane", s),
                                        this.sendSessionRequest(i[1]).then( () => {
                                            t()
                                        }
                                        ).catch(o => {
                                            this.logger.warn("Creating Session on secondary data plane failed", o),
                                            r(new Error("session creation failed"))
                                        }
                                        )) : (this.logger.warn("Creating Session on data plane failed", s),
                                        r(new Error("session creation failed")))
                                    }
                                    )
                                }
                                )
                            }
                            ),
                            this.sessionCreatedPromise.then( () => {
                                try {
                                    this.logger.info("Sending first bundle"),
                                    this.flushBundle()
                                } finally {}
                            }
                            ).catch( () => {
                                this.logger.debug("Skipping first bundle due to session creation failure")
                            }
                            ),
                            this.activePromises.push(this.sessionCreatedPromise)
                        }
                    }
                    async sendSessionRequest(e) {
                        let t = await new Fn().get();
                        t.hash && (this._yofiSession.metadata.bingGan = t.hash);
                        let r = Object.assign(Object.assign({}, t.data), t.addition);
                        return r && Object.keys(r).forEach(i => {
                            this._yofiSession.metadata[`bg_${i}`] = r[i]
                        }
                        ),
                        e.createSession(this.yofiSession).then(i => {
                            this._yofiSession = i,
                            this.activeDataPlane = e
                        }
                        )
                    }
                    sendBundle(e, t=!1) {
                        let r = location.href
                          , i = this.activeDataPlane.createBundle(this.yofiSession, e, t, this.manager.clientUserId).then( () => {
                            this.removeActivePromise(i)
                        }
                        ).catch(s => {
                            this.logger.warn("Error sending bundle to YofiTelemetry Cloud");
                            let o = {
                                requestedMethod: "createBundle",
                                pageUrl: r
                            };
                            this.errorService.reportException(s, this, o),
                            this.removeActivePromise(i)
                        }
                        );
                        this.activePromises.push(i)
                    }
                    removeActivePromise(e) {
                        let t = this.activePromises.findIndex(r => r === e);
                        t >= 0 && this.activePromises.splice(t, 1)
                    }
                    runNetworkTelemetry() {
                        var e;
                        !((e = this.sessionConfig.networkTelemetryConfig) === null || e === void 0) && e.ip && this.sessionCreatedPromise.then( () => {
                            this.logger.debug("Running network telemetry request"),
                            this.activeDataPlane.runPacketCaptureRequest(this.yofiSession.journeyId, this.yofiSession.sessionId).catch(t => {
                                this.logger.warn("Network Telemetry request failed", t),
                                this.errorService.reportException(new hr(this,"Network Telemetry request failed",t), this)
                            }
                            )
                        }
                        ).catch( () => {
                            this.logger.debug("Skipping network telemetry due to session creation failure")
                        }
                        )
                    }
                    get yofiSession() {
                        return this._yofiSession
                    }
                    complete() {
                        return new Promise( (e, t) => {
                            this.activePromises.length > 0 ? Promise.all(this.activePromises).then( () => {
                                e()
                            }
                            ).catch( () => {
                                t(new Error("Session failed to complete"))
                            }
                            ) : e()
                        }
                        )
                    }
                    getRemoteId() {
                        return new Promise( (e, t) => {
                            this.sessionCreatedPromise.then( () => {
                                e(this.yofiSession.sessionId)
                            }
                            ).catch( () => {
                                t(new Error("Session creation failed"))
                            }
                            )
                        }
                        )
                    }
                }
                class Ii {
                    constructor(e) {
                        var t, r;
                        this.response = e,
                        this._status = e.status,
                        this._statusText = e.statusText,
                        this._detailedError = (r = (t = this.response).text) === null || r === void 0 ? void 0 : r.call(t).then(i => {
                            if (!i || i === "" || i === "{}")
                                throw "No detailed error";
                            return _t.fromJson(i)
                        }
                        ).then(i => i.message).catch( () => null)
                    }
                    get status() {
                        return this._status
                    }
                    get statusText() {
                        return this._statusText
                    }
                    get detailedError() {
                        return this._detailedError
                    }
                }
                var ki = U(139)
                  , Ne = Uint8Array
                  , pe = Uint16Array
                  , Ar = Int32Array
                  , Cr = new Ne([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0])
                  , Rr = new Ne([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0])
                  , gn = new Ne([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15])
                  , pn = function(n, e) {
                    for (var t = new pe(31), r = 0; r < 31; ++r)
                        t[r] = e += 1 << n[r - 1];
                    var i = new Ar(t[30]);
                    for (r = 1; r < 30; ++r)
                        for (var s = t[r]; s < t[r + 1]; ++s)
                            i[s] = s - t[r] << 5 | r;
                    return {
                        b: t,
                        r: i
                    }
                }
                  , mn = pn(Cr, 2)
                  , Pi = mn.b
                  , Ir = mn.r;
                Pi[28] = 258,
                Ir[258] = 28;
                for (var fn = pn(Rr, 0), vn = (fn.b,
                fn.r), kr = new pe(32768), G = 0; G < 32768; ++G) {
                    var ze = (43690 & G) >> 1 | (21845 & G) << 1;
                    ze = (61680 & (ze = (52428 & ze) >> 2 | (13107 & ze) << 2)) >> 4 | (3855 & ze) << 4,
                    kr[G] = ((65280 & ze) >> 8 | (255 & ze) << 8) >> 1
                }
                var Lt = function(n, e, t) {
                    for (var r = n.length, i = 0, s = new pe(e); i < r; ++i)
                        n[i] && ++s[n[i] - 1];
                    var o, c = new pe(e);
                    for (i = 1; i < e; ++i)
                        c[i] = c[i - 1] + s[i - 1] << 1;
                    if (t) {
                        o = new pe(1 << e);
                        var u = 15 - e;
                        for (i = 0; i < r; ++i)
                            if (n[i])
                                for (var l = i << 4 | n[i], a = e - n[i], d = c[n[i] - 1]++ << a, h = d | (1 << a) - 1; d <= h; ++d)
                                    o[kr[d] >> u] = l
                    } else
                        for (o = new pe(r),
                        i = 0; i < r; ++i)
                            n[i] && (o[i] = kr[c[n[i] - 1]++] >> 15 - n[i]);
                    return o
                }
                  , qe = new Ne(288);
                for (G = 0; G < 144; ++G)
                    qe[G] = 8;
                for (G = 144; G < 256; ++G)
                    qe[G] = 9;
                for (G = 256; G < 280; ++G)
                    qe[G] = 7;
                for (G = 280; G < 288; ++G)
                    qe[G] = 8;
                var dr = new Ne(32);
                for (G = 0; G < 32; ++G)
                    dr[G] = 5;
                var xi = Lt(qe, 9, 0)
                  , Li = Lt(dr, 5, 0)
                  , yn = function(n) {
                    return (n + 7) / 8 | 0
                }
                  , Le = function(n, e, t) {
                    t <<= 7 & e;
                    var r = e / 8 | 0;
                    n[r] |= t,
                    n[r + 1] |= t >> 8
                }
                  , Mt = function(n, e, t) {
                    t <<= 7 & e;
                    var r = e / 8 | 0;
                    n[r] |= t,
                    n[r + 1] |= t >> 8,
                    n[r + 2] |= t >> 16
                }
                  , Pr = function(n, e) {
                    for (var t = [], r = 0; r < n.length; ++r)
                        n[r] && t.push({
                            s: r,
                            f: n[r]
                        });
                    var i = t.length
                      , s = t.slice();
                    if (!i)
                        return {
                            t: Sn,
                            l: 0
                        };
                    if (i == 1) {
                        var o = new Ne(t[0].s + 1);
                        return o[t[0].s] = 1,
                        {
                            t: o,
                            l: 1
                        }
                    }
                    t.sort(function(Y, te) {
                        return Y.f - te.f
                    }),
                    t.push({
                        s: -1,
                        f: 25001
                    });
                    var c = t[0]
                      , u = t[1]
                      , l = 0
                      , a = 1
                      , d = 2;
                    for (t[0] = {
                        s: -1,
                        f: c.f + u.f,
                        l: c,
                        r: u
                    }; a != i - 1; )
                        c = t[t[l].f < t[d].f ? l++ : d++],
                        u = t[l != a && t[l].f < t[d].f ? l++ : d++],
                        t[a++] = {
                            s: -1,
                            f: c.f + u.f,
                            l: c,
                            r: u
                        };
                    var h = s[0].s;
                    for (r = 1; r < i; ++r)
                        s[r].s > h && (h = s[r].s);
                    var p = new pe(h + 1)
                      , N = xr(t[a - 1], p, 0);
                    if (N > e) {
                        r = 0;
                        var g = 0
                          , C = N - e
                          , I = 1 << C;
                        for (s.sort(function(Y, te) {
                            return p[te.s] - p[Y.s] || Y.f - te.f
                        }); r < i; ++r) {
                            var k = s[r].s;
                            if (!(p[k] > e))
                                break;
                            g += I - (1 << N - p[k]),
                            p[k] = e
                        }
                        for (g >>= C; g > 0; ) {
                            var z = s[r].s;
                            p[z] < e ? g -= 1 << e - p[z]++ - 1 : ++r
                        }
                        for (; r >= 0 && g; --r) {
                            var oe = s[r].s;
                            p[oe] == e && (--p[oe],
                            ++g)
                        }
                        N = e
                    }
                    return {
                        t: new Ne(p),
                        l: N
                    }
                }
                  , xr = function(n, e, t) {
                    return n.s == -1 ? Math.max(xr(n.l, e, t + 1), xr(n.r, e, t + 1)) : e[n.s] = t
                }
                  , En = function(n) {
                    for (var e = n.length; e && !n[--e]; )
                        ;
                    for (var t = new pe(++e), r = 0, i = n[0], s = 1, o = function(u) {
                        t[r++] = u
                    }, c = 1; c <= e; ++c)
                        if (n[c] == i && c != e)
                            ++s;
                        else {
                            if (!i && s > 2) {
                                for (; s > 138; s -= 138)
                                    o(32754);
                                s > 2 && (o(s > 10 ? s - 11 << 5 | 28690 : s - 3 << 5 | 12305),
                                s = 0)
                            } else if (s > 3) {
                                for (o(i),
                                --s; s > 6; s -= 6)
                                    o(8304);
                                s > 2 && (o(s - 3 << 5 | 8208),
                                s = 0)
                            }
                            for (; s--; )
                                o(i);
                            s = 1,
                            i = n[c]
                        }
                    return {
                        c: t.subarray(0, r),
                        n: e
                    }
                }
                  , Dt = function(n, e) {
                    for (var t = 0, r = 0; r < e.length; ++r)
                        t += n[r] * e[r];
                    return t
                }
                  , wn = function(n, e, t) {
                    var r = t.length
                      , i = yn(e + 2);
                    n[i] = 255 & r,
                    n[i + 1] = r >> 8,
                    n[i + 2] = 255 ^ n[i],
                    n[i + 3] = 255 ^ n[i + 1];
                    for (var s = 0; s < r; ++s)
                        n[i + s + 4] = t[s];
                    return 8 * (i + 4 + r)
                }
                  , Nn = function(n, e, t, r, i, s, o, c, u, l, a) {
                    Le(e, a++, t),
                    ++i[256];
                    for (var d = Pr(i, 15), h = d.t, p = d.l, N = Pr(s, 15), g = N.t, C = N.l, I = En(h), k = I.c, z = I.n, oe = En(g), Y = oe.c, te = oe.n, P = new pe(19), J = 0; J < k.length; ++J)
                        ++P[31 & k[J]];
                    for (J = 0; J < Y.length; ++J)
                        ++P[31 & Y[J]];
                    for (var ft = Pr(P, 7), Qe = ft.t, mr = ft.l, ye = 19; ye > 4 && !Qe[gn[ye - 1]]; --ye)
                        ;
                    var Me, Fe, Wt, vt, We = l + 5 << 3, Ae = Dt(i, qe) + Dt(s, dr) + o, Be = Dt(i, h) + Dt(s, g) + o + 14 + 3 * ye + Dt(P, Qe) + 2 * P[16] + 3 * P[17] + 7 * P[18];
                    if (u >= 0 && We <= Ae && We <= Be)
                        return wn(e, a, n.subarray(u, u + l));
                    if (Le(e, a, 1 + (Be < Ae)),
                    a += 2,
                    Be < Ae) {
                        Me = Lt(h, p, 0),
                        Fe = h,
                        Wt = Lt(g, C, 0),
                        vt = g;
                        var Bt = Lt(Qe, mr, 0);
                        for (Le(e, a, z - 257),
                        Le(e, a + 5, te - 1),
                        Le(e, a + 10, ye - 4),
                        a += 14,
                        J = 0; J < ye; ++J)
                            Le(e, a + 3 * J, Qe[gn[J]]);
                        a += 3 * ye;
                        for (var yt = [k, Y], M = 0; M < 2; ++M) {
                            var Ee = yt[M];
                            for (J = 0; J < Ee.length; ++J) {
                                var we = 31 & Ee[J];
                                Le(e, a, Bt[we]),
                                a += Qe[we],
                                we > 15 && (Le(e, a, Ee[J] >> 5 & 127),
                                a += Ee[J] >> 12)
                            }
                        }
                    } else
                        Me = xi,
                        Fe = qe,
                        Wt = Li,
                        vt = dr;
                    for (J = 0; J < c; ++J) {
                        var me = r[J];
                        if (me > 255) {
                            Mt(e, a, Me[257 + (we = me >> 18 & 31)]),
                            a += Fe[we + 257],
                            we > 7 && (Le(e, a, me >> 23 & 31),
                            a += Cr[we]);
                            var Ke = 31 & me;
                            Mt(e, a, Wt[Ke]),
                            a += vt[Ke],
                            Ke > 3 && (Mt(e, a, me >> 5 & 8191),
                            a += Rr[Ke])
                        } else
                            Mt(e, a, Me[me]),
                            a += Fe[me]
                    }
                    return Mt(e, a, Me[256]),
                    a + Fe[256]
                }
                  , Mi = new Ar([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632])
                  , Sn = new Ne(0)
                  , Di = function() {
                    for (var n = new Int32Array(256), e = 0; e < 256; ++e) {
                        for (var t = e, r = 9; --r; )
                            t = (1 & t && -306674912) ^ t >>> 1;
                        n[e] = t
                    }
                    return n
                }()
                  , Lr = function(n, e, t) {
                    for (; t; ++e)
                        n[e] = t,
                        t >>>= 8
                };
                function bn(n, e) {
                    e || (e = {});
                    var t = function() {
                        var o = -1;
                        return {
                            p: function(c) {
                                for (var u = o, l = 0; l < c.length; ++l)
                                    u = Di[255 & u ^ c[l]] ^ u >>> 8;
                                o = u
                            },
                            d: function() {
                                return ~o
                            }
                        }
                    }()
                      , r = n.length;
                    t.p(n);
                    var i = function(o, c, u, l, a) {
                        if (!a && (a = {
                            l: 1
                        },
                        c.dictionary)) {
                            var d = c.dictionary.subarray(-32768)
                              , h = new Ne(d.length + o.length);
                            h.set(d),
                            h.set(o, d.length),
                            o = h,
                            a.w = d.length
                        }
                        return function(p, N, g, C, I, k) {
                            var z = k.z || p.length
                              , oe = new Ne(C + z + 5 * (1 + Math.ceil(z / 7e3)) + I)
                              , Y = oe.subarray(C, oe.length - I)
                              , te = k.l
                              , P = 7 & (k.r || 0);
                            if (N) {
                                P && (Y[0] = k.r >> 3);
                                for (var J = Mi[N - 1], ft = J >> 13, Qe = 8191 & J, mr = (1 << g) - 1, ye = k.p || new pe(32768), Me = k.h || new pe(mr + 1), Fe = Math.ceil(g / 3), Wt = 2 * Fe, vt = function(et) {
                                    return (p[et] ^ p[et + 1] << Fe ^ p[et + 2] << Wt) & mr
                                }, We = new Ar(25e3), Ae = new pe(288), Be = new pe(32), Bt = 0, yt = 0, M = k.i || 0, Ee = 0, we = k.w || 0, me = 0; M + 2 < z; ++M) {
                                    var Ke = vt(M)
                                      , Et = 32767 & M
                                      , wt = Me[Ke];
                                    if (ye[Et] = wt,
                                    Me[Ke] = Et,
                                    we <= M) {
                                        var fr = z - M;
                                        if ((Bt > 7e3 || Ee > 24576) && (fr > 423 || !te)) {
                                            P = Nn(p, Y, 0, We, Ae, Be, yt, Ee, me, M - me, P),
                                            Ee = Bt = yt = 0,
                                            me = M;
                                            for (var Se = 0; Se < 286; ++Se)
                                                Ae[Se] = 0;
                                            for (Se = 0; Se < 30; ++Se)
                                                Be[Se] = 0
                                        }
                                        var Ze = 2
                                          , vr = 0
                                          , ps = Qe
                                          , Ge = Et - wt & 32767;
                                        if (fr > 2 && Ke == vt(M - Ge))
                                            for (var ms = Math.min(ft, fr) - 1, fs = Math.min(32767, M), vs = Math.min(258, fr); Ge <= fs && --ps && Et != wt; ) {
                                                if (p[M + Ze] == p[M + Ze - Ge]) {
                                                    for (var je = 0; je < vs && p[M + je] == p[M + je - Ge]; ++je)
                                                        ;
                                                    if (je > Ze) {
                                                        if (Ze = je,
                                                        vr = Ge,
                                                        je > ms)
                                                            break;
                                                        var ys = Math.min(Ge, je - 2)
                                                          , Bn = 0;
                                                        for (Se = 0; Se < ys; ++Se) {
                                                            var Hr = M - Ge + Se & 32767
                                                              , Kn = Hr - ye[Hr] & 32767;
                                                            Kn > Bn && (Bn = Kn,
                                                            wt = Hr)
                                                        }
                                                    }
                                                }
                                                Ge += (Et = wt) - (wt = ye[Et]) & 32767
                                            }
                                        if (vr) {
                                            We[Ee++] = 268435456 | Ir[Ze] << 18 | vn[vr];
                                            var Gn = 31 & Ir[Ze]
                                              , jn = 31 & vn[vr];
                                            yt += Cr[Gn] + Rr[jn],
                                            ++Ae[257 + Gn],
                                            ++Be[jn],
                                            we = M + Ze,
                                            ++Bt
                                        } else
                                            We[Ee++] = p[M],
                                            ++Ae[p[M]]
                                    }
                                }
                                for (M = Math.max(M, we); M < z; ++M)
                                    We[Ee++] = p[M],
                                    ++Ae[p[M]];
                                P = Nn(p, Y, te, We, Ae, Be, yt, Ee, me, M - me, P),
                                te || (k.r = 7 & P | Y[P / 8 | 0] << 3,
                                P -= 7,
                                k.h = Me,
                                k.p = ye,
                                k.i = M,
                                k.w = we)
                            } else {
                                for (M = k.w || 0; M < z + te; M += 65535) {
                                    var Vr = M + 65535;
                                    Vr >= z && (Y[P / 8 | 0] = te,
                                    Vr = z),
                                    P = wn(Y, P + 1, p.subarray(M, Vr))
                                }
                                k.i = z
                            }
                            return function(et, Kt, Gt) {
                                (Kt == null || Kt < 0) && (Kt = 0),
                                (Gt == null || Gt > et.length) && (Gt = et.length);
                                var Hn = new Ne(Gt - Kt);
                                return Hn.set(et.subarray(Kt, Gt)),
                                Hn
                            }(oe, 0, C + yn(P) + I)
                        }(o, c.level == null ? 6 : c.level, c.mem == null ? Math.ceil(1.5 * Math.max(8, Math.min(13, Math.log(o.length)))) : 12 + c.mem, u, 8, a)
                    }(n, e, function(o) {
                        return 10 + (o.filename ? o.filename.length + 1 : 0)
                    }(e))
                      , s = i.length;
                    return function(o, c) {
                        var u = c.filename;
                        if (o[0] = 31,
                        o[1] = 139,
                        o[2] = 8,
                        o[8] = c.level < 2 ? 4 : c.level == 9 ? 2 : 0,
                        o[9] = 3,
                        c.mtime != 0 && Lr(o, 4, Math.floor(new Date(c.mtime || Date.now()) / 1e3)),
                        u) {
                            o[3] = 8;
                            for (var l = 0; l <= u.length; ++l)
                                o[l + 10] = u.charCodeAt(l)
                        }
                    }(i, e),
                    Lr(i, s - 8, t.d()),
                    Lr(i, s - 4, r),
                    i
                }
                var Ui = typeof TextDecoder < "u" && new TextDecoder;
                try {
                    Ui.decode(Sn, {
                        stream: !0
                    })
                } catch {}
                class Mr {
                    static gzip(e) {
                        return bn(e)
                    }
                    static gzipString(e) {
                        return bn(new TextEncoder().encode(e))
                    }
                }
                class Ji {
                    constructor(e, t=4) {
                        this.retries = t,
                        this.MAX_RETRIES = 5,
                        this._baseUrl = e,
                        this._authToken = "",
                        this.fetchRetry = ki(fetch)
                    }
                    buildUrl(e) {
                        return this._baseUrl + e
                    }
                    getOptions(e, t=!1) {
                        let r = {
                            Authorization: `Bearer ${this._authToken}`,
                            "Content-Type": "application/json",
                            Accept: "application/json"
                        };
                        return t && (r["Content-Encoding"] = "gzip"),
                        {
                            headers: r,
                            method: e,
                            retries: this.retries,
                            retryDelay: i => 1e3 * Math.pow(2, i),
                            retryOn: (i, s, o) => !(i >= this.MAX_RETRIES - 1) && (s !== null || o.status >= 500 || void 0)
                        }
                    }
                    get(e) {
                        let t = this.buildUrl(e)
                          , r = this.getOptions("GET");
                        return fetch(t, r)
                    }
                    getFullPath(e, t=null) {
                        let r = this.getOptions("GET");
                        return t != null && (r.headers = Object.assign(Object.assign({}, r.headers), t)),
                        r.retries = 0,
                        fetch(e, r)
                    }
                    doPost(e, t, r, i, s) {
                        let o = this.buildUrl(e)
                          , c = s
                          , u = t;
                        if (c) {
                            let a = typeof t == "string" ? Mr.gzipString(t) : Mr.gzip(t);
                            a.length < t.length ? u = a : c = !1
                        }
                        let l = this.getOptions("POST", c);
                        return l.keepalive = i,
                        l.body = u,
                        r ? this.fetchRetry(o, l) : fetch(o, l)
                    }
                    post(e, t, r=!1) {
                        return this.doPost(e, t, !1, !1, r)
                    }
                    postWithRetry(e, t, r=!1, i=!1) {
                        return this.doPost(e, t, !0, r, i)
                    }
                    get baseUrl() {
                        return this._baseUrl
                    }
                    set authToken(e) {
                        this._authToken = e
                    }
                }
                class Fi {
                    constructor(e, t, r) {
                        this.logger = e,
                        t = this.stripTrailingSlash(t),
                        this.publicToken = r,
                        this._http = new Ji(t),
                        this._http.authToken = r
                    }
                    processResponse(e) {
                        if (!e.ok)
                            throw new Ii(e);
                        return e.text()
                    }
                    stripTrailingSlash(e) {
                        let t = e;
                        return t && t.endsWith("/") && (t = t.substring(0, t.length - 1)),
                        t
                    }
                    get http() {
                        return this._http
                    }
                    get apiBaseUrl() {
                        return this.http.baseUrl
                    }
                }
                class Wi extends Fi {
                    constructor(e, t, r, i) {
                        super(e, t, r),
                        this.logger = e,
                        this.tokenManager = i
                    }
                    requestWrapper(e, t=0) {
                        return this.tokenManager.getAppAccessToken().then(r => (this.http.authToken = r,
                        e().catch(i => {
                            if (t === 0 && i.status === 401)
                                return this.tokenManager.expireToken(),
                                this.requestWrapper(e, 1);
                            throw i
                        }
                        )))
                    }
                }
                class gr extends Wi {
                    constructor(e, t, r, i, s) {
                        super(e, t, i, s),
                        this.logger = e,
                        this.tokenManager = s,
                        this.dataPlaneRegionCacheKey = "_yo_dp",
                        this.dataPlaneRegionTtl = 864e5,
                        this.version = "/v2",
                        this._networkUrl = this.stripTrailingSlash(r)
                    }
                    createSession(e) {
                        let t = e.toJson();
                        return this.logger.debug("createSession", t),
                        this.requestWrapper( () => this.http.postWithRetry(this.version + "/sessions", t, !1, !0).then(r => this.processResponse(r)).then(r => Ot.fromJson(r)))
                    }
                    createBundle(e, t, r=!1, i) {
                        let s = new qt({
                            sessionId: e.sessionId,
                            journeyId: e.journeyId,
                            bundles: [t],
                            clientUserId: i
                        }).toJson();
                        this.logger.debug("createBundle", s);
                        let o = r || T.isBackgrounded()
                          , c = `${this.version}/bundles?sessionId=${encodeURIComponent(e.sessionId)}`;
                        return this.requestWrapper( () => this.http.postWithRetry(c, s, o, !0).then(u => this.processResponse(u)).then(u => Xt.fromJson(u)))
                    }
                    updateSessionLabels(e, t, r) {
                        let i = new er({
                            labels: r
                        }).toJson();
                        this.logger.debug("updateSessionLabels", i);
                        let s = T.isBackgrounded();
                        return this.requestWrapper( () => this.http.postWithRetry(`${this.version}/journeies/${t}/sessions/${e}/labels`, i, s).then(o => this.processResponse(o)).then(o => tr.fromJson(o)))
                    }
                    runPacketCaptureRequest(e, t) {
                        if (this.networkUrl) {
                            let r = new URLSearchParams({
                                journeyId: e,
                                sessionId: t
                            })
                              , i = `${this.networkUrl}/v2/pc?${r.toString()}`
                              , s = {
                                "Content-Type": "application/json",
                                Accept: "application/json"
                            };
                            return this.http.getFullPath(i, s).then(o => o.json())
                        }
                        return Promise.reject(new Error("no network telemetry url found"))
                    }
                    reportError(e) {
                        let t = new Ue(e).toJson();
                        return this.logger.debug("reportError", t),
                        this.http.postWithRetry(this.version + "/error-reporting", t, !0).then(r => this.processResponse(r)).then(r => bt.fromJson(r))
                    }
                    upgradeAppAccessToken(e) {
                        let t = new Yt(Object.assign({
                            publicToken: this.publicToken,
                            expiresInSeconds: v(86400),
                            maxIdleTimeMinutes: v(1440)
                        }, e)).toJson();
                        return this.http.postWithRetry(this.version + "/tokens/upgrade", t).then(r => this.processResponse(r)).then(r => $t.fromJson(r))
                    }
                    setCachedDataPlanes(e) {
                        try {
                            let t = {
                                removeAfter: new Date().getTime() + this.dataPlaneRegionTtl,
                                regions: e,
                                defaultRegionUrl: {
                                    defaultDataPlaneUrl: "https://server.telemetry.services.yofi.ai",
                                    defaultNetworkUrl: "https://pcap.services.yofi.ai",
                                    allowUrlOverwrite: !1,
                                    sendData: !0,
                                    disableErrorReporting: !1
                                } === void 0 ? void 0 : "https://server.telemetry.services.yofi.ai"
                            };
                            localStorage.setItem(this.dataPlaneRegionCacheKey, JSON.stringify(t))
                        } catch {
                            this.logger.warn("Could not cache regions")
                        }
                    }
                    getCachedDataPlanes() {
                        let e = null;
                        try {
                            let t = localStorage.getItem(this.dataPlaneRegionCacheKey);
                            if (t) {
                                let r = JSON.parse(t);
                                new Date().getTime() <= r.removeAfter && ({
                                    defaultDataPlaneUrl: "https://server.telemetry.services.yofi.ai",
                                    defaultNetworkUrl: "https://pcap.services.yofi.ai",
                                    allowUrlOverwrite: !1,
                                    sendData: !0,
                                    disableErrorReporting: !1
                                } === void 0 ? void 0 : "https://server.telemetry.services.yofi.ai") == r.defaultRegionUrl && (e = Tt.fromJson(JSON.stringify(r.regions)))
                            }
                        } catch {
                            this.logger.warn("Could not retrieve cached regions")
                        }
                        return e
                    }
                    getDataRegionsLocate() {
                        let e = {
                            backup_network_url: this.networkUrl,
                            backup_url: this.apiBaseUrl,
                            primary_network_url: this.networkUrl,
                            primary_url: this.apiBaseUrl
                        }
                          , t = Tt.fromJson(JSON.stringify(e));
                        return Promise.resolve(t)
                    }
                    get networkUrl() {
                        return this._networkUrl
                    }
                }
                let Ut = "?"
                  , Bi = /^\s*at (?:(.*?) ?\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i
                  , Ki = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i
                  , Gi = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i
                  , ji = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i
                  , Hi = /\((\S*)(?::(\d+))(?::(\d+))\)/
                  , Vi = /Minified React error #\d+;/i;
                function _n(n, e) {
                    try {
                        return Object.assign(Object.assign({}, n), {
                            stack: n.stack.slice(e)
                        })
                    } catch {
                        return n
                    }
                }
                function Dr(n) {
                    let e = n && n.message;
                    return e ? e.error && typeof e.error.message == "string" ? e.error.message : e : "No error message"
                }
                let Yi = class extends Ai {
                    constructor(n, e, t, r=!1) {
                        super(t),
                        this.onError = t,
                        this.disableReporting = r,
                        this.logger = n,
                        this._dataPlanes = e
                    }
                    buildErrorReport(n, e, t) {
                        this._userAgent || (this._userAgent = T.splitUserAgent(navigator.userAgent));
                        let r = function(c) {
                            let u = null
                              , l = 0;
                            c && (typeof c.framesToPop == "number" ? l = c.framesToPop : Vi.test(c.message) && (l = 1));
                            try {
                                if (u = function(a) {
                                    if (!a || !a.stacktrace)
                                        return null;
                                    let d = / line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i, h = / line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\((.*)\))? in (.*):\s*$/i, p = a.stacktrace.split(`
`), N = [], g;
                                    for (let C = 0; C < p.length; C += 2) {
                                        let I = null;
                                        (g = d.exec(p[C])) ? I = {
                                            url: g[2],
                                            func: g[3],
                                            args: [],
                                            line: +g[1],
                                            column: null
                                        } : (g = h.exec(p[C])) && (I = {
                                            url: g[6],
                                            func: g[3] || g[4],
                                            args: g[5] ? g[5].split(",") : [],
                                            line: +g[1],
                                            column: +g[2]
                                        }),
                                        I && (!I.func && I.line && (I.func = Ut),
                                        N.push(I))
                                    }
                                    return N.length ? {
                                        message: Dr(a),
                                        name: a.name,
                                        stack: N
                                    } : null
                                }(c),
                                u)
                                    return _n(u, l)
                            } catch {}
                            try {
                                if (u = function(a) {
                                    if (!a || !a.stack)
                                        return null;
                                    let d = [], h = a.stack.split(`
`), p, N, g, C;
                                    for (let I = 0; I < h.length; ++I) {
                                        if (g = Bi.exec(h[I])) {
                                            let k = g[2] && g[2].indexOf("native") === 0;
                                            p = g[2] && g[2].indexOf("eval") === 0,
                                            p && (N = Hi.exec(g[2])) && (g[2] = N[1],
                                            g[3] = N[2],
                                            g[4] = N[3]),
                                            C = {
                                                url: g[2] && g[2].indexOf("address at ") === 0 ? g[2].substr(11) : g[2],
                                                func: g[1] || Ut,
                                                args: k ? [g[2]] : [],
                                                line: g[3] ? +g[3] : null,
                                                column: g[4] ? +g[4] : null
                                            }
                                        } else if (g = Gi.exec(h[I]))
                                            C = {
                                                url: g[2],
                                                func: g[1] || Ut,
                                                args: [],
                                                line: +g[3],
                                                column: g[4] ? +g[4] : null
                                            };
                                        else {
                                            if (!(g = Ki.exec(h[I])))
                                                continue;
                                            p = g[3] && g[3].indexOf(" > eval") > -1,
                                            p && (N = ji.exec(g[3])) ? (g[1] = g[1] || "eval",
                                            g[3] = N[1],
                                            g[4] = N[2],
                                            g[5] = "") : I !== 0 || g[5] || a.columnNumber === void 0 || (d[0].column = a.columnNumber + 1),
                                            C = {
                                                url: g[3],
                                                func: g[1] || Ut,
                                                args: g[2] ? g[2].split(",") : [],
                                                line: g[4] ? +g[4] : null,
                                                column: g[5] ? +g[5] : null
                                            }
                                        }
                                        !C.func && C.line && (C.func = Ut),
                                        d.push(C)
                                    }
                                    return d.length ? {
                                        message: Dr(a),
                                        name: a.name,
                                        stack: d
                                    } : null
                                }(c),
                                u)
                                    return _n(u, l)
                            } catch {}
                            return {
                                message: Dr(c),
                                name: c && c.name,
                                stack: [],
                                failed: !0
                            }
                        }(n)
                          , i = r.stack.map(c => Rt.create({
                            function: c.func,
                            filename: c.url,
                            lineNo: v(c.line),
                            colNo: v(c.column)
                        }))
                          , s = Object.assign({}, t);
                        s.sessionCount = Wn.activeSessionCount().toString(),
                        s.pageUrl || (s.pageUrl = location.href),
                        e && e.yofiSession && (this.logger.warn("error session id", e.yofiSession.sessionId),
                        s.appId = e.yofiSession.appId,
                        s.sessionId = e.yofiSession.sessionId);
                        let o = Ct.create({
                            type: r.name,
                            value: r.message,
                            stacktrace: i
                        });
                        return Ue.create({
                            title: r.name,
                            timestamp: v(new Date().getTime()),
                            platform: Ht.WEB,
                            manufacturer: this._userAgent.browser,
                            model: this._userAgent.raw,
                            osVersion: this._userAgent.version,
                            level: Ue.Level.ERROR,
                            releaseVersion: V,
                            exception: JSON.stringify(o),
                            additionalTags: s
                        })
                    }
                    reportException(n, e, t) {
                        if (super.reportException(n, e, t),
                        !this.disableReporting) {
                            if (!this.isYofiTelemetryError(n)) {
                                let r = this.buildErrorReport(n, e, t);
                                this.logger.info("reporting error", r),
                                this._dataPlanes[0].reportError(r).catch(i => this.logger.info("there was an error recording an error", i))
                            }
                        }
                    }
                    set userAgent(n) {
                        this._userAgent = n
                    }
                    set dataPlanes(n) {
                        this._dataPlanes = n
                    }
                }
                ;
                class Je {
                    constructor(e, t, r, i) {
                        this.publicToken = t,
                        this.dataPlanePromise = i,
                        this.logger = e,
                        this.tokenUpgradeHandler = r
                    }
                    getAppAccessToken() {
                        return this.dataPlanePromise.then( () => {
                            if (this.appAccessToken)
                                return Promise.resolve(this.appAccessToken);
                            if (this.tokenPromise)
                                return this.tokenPromise;
                            {
                                let e = this.getCachedToken(this.publicToken);
                                if (e)
                                    return this.appAccessToken = e,
                                    this.appAccessToken
                            }
                            return this.logger.debug("Fetching new app access token"),
                            this.tokenPromise = this.tokenUpgradeHandler(this.publicToken),
                            this.tokenPromise.then(e => {
                                this.appAccessToken = e,
                                this.setCachedToken(e)
                            }
                            ),
                            this.tokenPromise.catch( () => {
                                this.expireToken()
                            }
                            ),
                            this.tokenPromise
                        }
                        )
                    }
                    expireToken() {
                        this.appAccessToken = null,
                        this.tokenPromise = null,
                        this.clearCachedToken()
                    }
                    getCachedToken(e) {
                        let t;
                        try {
                            t = localStorage.getItem(Je.APP_ACCESS_TOKEN_CACHE_KEY)
                        } catch {
                            this.logger.warn("Could not get cached token")
                        }
                        if (!t)
                            return null;
                        let r = JSON.parse(t);
                        return r.publicToken !== e ? (this.logger.debug("Cached token from different public token"),
                        this.clearCachedToken(),
                        null) : (this.logger.debug("Token fetched from cache"),
                        r.token)
                    }
                    setCachedToken(e) {
                        Je.setCachedTokens(this.publicToken, e)
                    }
                    static setCachedTokens(e, t) {
                        let r = {
                            publicToken: e,
                            token: t
                        };
                        try {
                            localStorage.setItem(Je.APP_ACCESS_TOKEN_CACHE_KEY, JSON.stringify(r))
                        } catch {}
                    }
                    clearCachedToken() {
                        try {
                            localStorage.removeItem(Je.APP_ACCESS_TOKEN_CACHE_KEY)
                        } catch {
                            this.logger.warn("Could not clear cached token")
                        }
                    }
                }
                Je.APP_ACCESS_TOKEN_CACHE_KEY = "_yo_aat";
                class $i extends Ci {
                    constructor(e, t, r, i=!1) {
                        super(e, t, r),
                        this.logger = e,
                        this.sdkConfig = t,
                        this.uuidManager = r,
                        this.disableErrorReporting = i,
                        this.publicToken = t.publicToken,
                        this.defaultDataPlaneUrl = t.defaultDataPlaneUrl || ({
                            defaultDataPlaneUrl: "https://server.telemetry.services.yofi.ai",
                            defaultNetworkUrl: "https://pcap.services.yofi.ai",
                            allowUrlOverwrite: !1,
                            sendData: !0,
                            disableErrorReporting: !1
                        } === void 0 ? void 0 : "https://server.telemetry.services.yofi.ai") || "https://server.telemetry.services.yofi.ai",
                        this.defaultNetworkUrl = t.defaultNetworkUrl || ({
                            defaultDataPlaneUrl: "https://server.telemetry.services.yofi.ai",
                            defaultNetworkUrl: "https://pcap.services.yofi.ai",
                            allowUrlOverwrite: !1,
                            sendData: !0,
                            disableErrorReporting: !1
                        } === void 0 ? void 0 : "https://pcap.services.yofi.ai") || "https://pcap.services.yofi.ai";
                        let s = t.tokenUpgradeHandler ? () => t.tokenUpgradeHandler(this.publicToken) : () => this.defaultTokenUpgradeHandler();
                        this._dataPlanePromise = this.getDataPlanes(),
                        this._tokenManager = new Je(this.logger,this.publicToken,s,this._dataPlanePromise),
                        this.postConstruct()
                    }
                    setupErrorService() {
                        var e;
                        return new Yi(this.logger,this._dataPlaneApis,(e = this.sdkConfig.yofiTelemetryCallback) === null || e === void 0 ? void 0 : e.onError,this.disableErrorReporting)
                    }
                    setupCallbackManager() {
                        return new ce(this.logger,this.errorService,this.sdkConfig.yofiTelemetryCallback)
                    }
                    createSessionObject(e) {
                        return new Ri(this,this.sdkConfig,this.logger,this.errorService,e,this.callbackManager,this.uuidManager)
                    }
                    bundleCreated() {}
                    invalidateAppAccessToken() {
                        this._tokenManager.expireToken()
                    }
                    getAppAccessToken() {
                        return this._tokenManager.getAppAccessToken()
                    }
                    get clientUserId() {
                        return this._clientUserId
                    }
                    set clientUserId(e) {
                        this._clientUserId = e
                    }
                    getDataPlanes() {
                        let e = new gr(this.logger,this.defaultDataPlaneUrl,this.defaultNetworkUrl,this.publicToken,this._tokenManager);
                        return e.getDataRegionsLocate().then(t => {
                            this.logger.info("Fetched data planes to use", t);
                            let r = []
                              , i = e.stripTrailingSlash(this.sdkConfig.defaultDataPlaneUrl)
                              , s = e.stripTrailingSlash(this.sdkConfig.defaultNetworkUrl);
                            return r.push(new gr(this.logger,i || t.primaryUrl,s || t.primaryNetworkUrl,this.publicToken,this._tokenManager)),
                            r.push(new gr(this.logger,i || t.backupUrl,s || t.backupNetworkUrl,this.publicToken,this._tokenManager)),
                            r
                        }
                        ).catch(t => (this.logger.error("Error fetching data planes", t),
                        [new gr(this.logger,this.defaultDataPlaneUrl,this.defaultNetworkUrl,this.publicToken,this._tokenManager)])).then(t => {
                            this._dataPlaneApis = t,
                            this.errorService.dataPlanes = this._dataPlaneApis
                        }
                        )
                    }
                    defaultTokenUpgradeHandler() {
                        return this._dataPlanePromise.then( () => {
                            let e = this._dataPlaneApis
                              , t = {
                                journeyId: this.uuidManager.getJourneyId(),
                                clientId: this.uuidManager.getInstallId(),
                                clientDomain: this.sdkConfig.clientDomain
                            };
                            return e[0].upgradeAppAccessToken(t).then(r => r.appAccessToken).catch(r => {
                                if (e.length > 1)
                                    return e[1].upgradeAppAccessToken(t).then(i => (this._dataPlaneApis = e.reverse(),
                                    i.appAccessToken)).catch(i => {
                                        this.logger.warn("Token upgrade error", i);
                                        let s = new q("Token upgrade failed");
                                        throw this.errorService.reportException(new Q(i)),
                                        s
                                    }
                                    );
                                {
                                    this.logger.warn("Token upgrade error", r);
                                    let i = new q("Token upgrade failed");
                                    throw this.errorService.reportException(new Q(r)),
                                    i
                                }
                            }
                            )
                        }
                        )
                    }
                    get dataPlanesPromise() {
                        return this._dataPlanePromise
                    }
                    get dataPlanes() {
                        return this._dataPlaneApis
                    }
                }
                let zi = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
                function qi(n, e, t, r) {
                    switch (n) {
                    case 0:
                        return e & t ^ ~e & r;
                    case 1:
                    case 3:
                        return e ^ t ^ r;
                    case 2:
                        return e & t ^ e & r ^ t & r
                    }
                }
                function Ur(n, e) {
                    return n << e | n >>> 32 - e
                }
                let Xi = function(n, e, t) {
                    function r(i, s, o, c) {
                        var u;
                        if (typeof i == "string" && (i = function(a) {
                            a = unescape(encodeURIComponent(a));
                            let d = [];
                            for (let h = 0; h < a.length; ++h)
                                d.push(a.charCodeAt(h));
                            return d
                        }(i)),
                        typeof s == "string" && (s = function(a) {
                            if (!function(p) {
                                return typeof p == "string" && zi.test(p)
                            }(a))
                                throw TypeError("Invalid UUID");
                            let d, h = new Uint8Array(16);
                            return h[0] = (d = parseInt(a.slice(0, 8), 16)) >>> 24,
                            h[1] = d >>> 16 & 255,
                            h[2] = d >>> 8 & 255,
                            h[3] = 255 & d,
                            h[4] = (d = parseInt(a.slice(9, 13), 16)) >>> 8,
                            h[5] = 255 & d,
                            h[6] = (d = parseInt(a.slice(14, 18), 16)) >>> 8,
                            h[7] = 255 & d,
                            h[8] = (d = parseInt(a.slice(19, 23), 16)) >>> 8,
                            h[9] = 255 & d,
                            h[10] = (d = parseInt(a.slice(24, 36), 16)) / 1099511627776 & 255,
                            h[11] = d / 4294967296 & 255,
                            h[12] = d >>> 24 & 255,
                            h[13] = d >>> 16 & 255,
                            h[14] = d >>> 8 & 255,
                            h[15] = 255 & d,
                            h
                        }(s)),
                        ((u = s) === null || u === void 0 ? void 0 : u.length) !== 16)
                            throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
                        let l = new Uint8Array(16 + i.length);
                        if (l.set(s),
                        l.set(i, s.length),
                        l = function(a) {
                            let d = [1518500249, 1859775393, 2400959708, 3395469782]
                              , h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
                            if (typeof a == "string") {
                                let C = unescape(encodeURIComponent(a));
                                a = [];
                                for (let I = 0; I < C.length; ++I)
                                    a.push(C.charCodeAt(I))
                            } else
                                Array.isArray(a) || (a = Array.prototype.slice.call(a));
                            a.push(128);
                            let p = a.length / 4 + 2
                              , N = Math.ceil(p / 16)
                              , g = new Array(N);
                            for (let C = 0; C < N; ++C) {
                                let I = new Uint32Array(16);
                                for (let k = 0; k < 16; ++k)
                                    I[k] = a[64 * C + 4 * k] << 24 | a[64 * C + 4 * k + 1] << 16 | a[64 * C + 4 * k + 2] << 8 | a[64 * C + 4 * k + 3];
                                g[C] = I
                            }
                            g[N - 1][14] = 8 * (a.length - 1) / Math.pow(2, 32),
                            g[N - 1][14] = Math.floor(g[N - 1][14]),
                            g[N - 1][15] = 8 * (a.length - 1) & 4294967295;
                            for (let C = 0; C < N; ++C) {
                                let I = new Uint32Array(80);
                                for (let P = 0; P < 16; ++P)
                                    I[P] = g[C][P];
                                for (let P = 16; P < 80; ++P)
                                    I[P] = Ur(I[P - 3] ^ I[P - 8] ^ I[P - 14] ^ I[P - 16], 1);
                                let k = h[0]
                                  , z = h[1]
                                  , oe = h[2]
                                  , Y = h[3]
                                  , te = h[4];
                                for (let P = 0; P < 80; ++P) {
                                    let J = Math.floor(P / 20)
                                      , ft = Ur(k, 5) + qi(J, z, oe, Y) + te + d[J] + I[P] >>> 0;
                                    te = Y,
                                    Y = oe,
                                    oe = Ur(z, 30) >>> 0,
                                    z = k,
                                    k = ft
                                }
                                h[0] = h[0] + k >>> 0,
                                h[1] = h[1] + z >>> 0,
                                h[2] = h[2] + oe >>> 0,
                                h[3] = h[3] + Y >>> 0,
                                h[4] = h[4] + te >>> 0
                            }
                            return [h[0] >> 24 & 255, h[0] >> 16 & 255, h[0] >> 8 & 255, 255 & h[0], h[1] >> 24 & 255, h[1] >> 16 & 255, h[1] >> 8 & 255, 255 & h[1], h[2] >> 24 & 255, h[2] >> 16 & 255, h[2] >> 8 & 255, 255 & h[2], h[3] >> 24 & 255, h[3] >> 16 & 255, h[3] >> 8 & 255, 255 & h[3], h[4] >> 24 & 255, h[4] >> 16 & 255, h[4] >> 8 & 255, 255 & h[4]]
                        }(l),
                        l[6] = 15 & l[6] | 80,
                        l[8] = 63 & l[8] | 128,
                        o) {
                            c = c || 0;
                            for (let a = 0; a < 16; ++a)
                                o[c + a] = l[a];
                            return o
                        }
                        return Er(l)
                    }
                    try {
                        r.name = "v5"
                    } catch {}
                    return r.DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8",
                    r.URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8",
                    r
                }(), Qi = Xi, Tn, Jr, Fr = 0, Wr = 0, On = function(n, e, t) {
                    let r = e && t || 0
                      , i = e || new Array(16)
                      , s = (n = n || {}).node || Tn
                      , o = n.clockseq !== void 0 ? n.clockseq : Jr;
                    if (s == null || o == null) {
                        let h = n.random || (n.rng || zr)();
                        s == null && (s = Tn = [1 | h[0], h[1], h[2], h[3], h[4], h[5]]),
                        o == null && (o = Jr = 16383 & (h[6] << 8 | h[7]))
                    }
                    let c = n.msecs !== void 0 ? n.msecs : Date.now()
                      , u = n.nsecs !== void 0 ? n.nsecs : Wr + 1
                      , l = c - Fr + (u - Wr) / 1e4;
                    if (l < 0 && n.clockseq === void 0 && (o = o + 1 & 16383),
                    (l < 0 || c > Fr) && n.nsecs === void 0 && (u = 0),
                    u >= 1e4)
                        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
                    Fr = c,
                    Wr = u,
                    Jr = o,
                    c += 122192928e5;
                    let a = (1e4 * (268435455 & c) + u) % 4294967296;
                    i[r++] = a >>> 24 & 255,
                    i[r++] = a >>> 16 & 255,
                    i[r++] = a >>> 8 & 255,
                    i[r++] = 255 & a;
                    let d = c / 4294967296 * 1e4 & 268435455;
                    i[r++] = d >>> 8 & 255,
                    i[r++] = 255 & d,
                    i[r++] = d >>> 24 & 15 | 16,
                    i[r++] = d >>> 16 & 255,
                    i[r++] = o >>> 8 | 128,
                    i[r++] = 255 & o;
                    for (let h = 0; h < 6; ++h)
                        i[r + h] = s[h];
                    return e || Er(i)
                };
                class Jt extends Error {
                }
                function An(n, e) {
                    if (typeof n != "string")
                        throw new Jt("Invalid token specified: must be a string");
                    e || (e = {});
                    let t = e.header === !0 ? 0 : 1
                      , r = n.split(".")[t];
                    if (typeof r != "string")
                        throw new Jt(`Invalid token specified: missing part #${t + 1}`);
                    let i;
                    try {
                        i = function(s) {
                            let o = s.replace(/-/g, "+").replace(/_/g, "/");
                            switch (o.length % 4) {
                            case 0:
                                break;
                            case 2:
                                o += "==";
                                break;
                            case 3:
                                o += "=";
                                break;
                            default:
                                throw new Error("base64 string is not of the correct length")
                            }
                            try {
                                return function(c) {
                                    return decodeURIComponent(atob(c).replace(/(.)/g, (u, l) => {
                                        let a = l.charCodeAt(0).toString(16).toUpperCase();
                                        return a.length < 2 && (a = "0" + a),
                                        "%" + a
                                    }
                                    ))
                                }(o)
                            } catch {
                                return atob(o)
                            }
                        }(r)
                    } catch (s) {
                        throw new Jt(`Invalid token specified: invalid base64 for part #${t + 1} (${s.message})`)
                    }
                    try {
                        return JSON.parse(i)
                    } catch (s) {
                        throw new Jt(`Invalid token specified: invalid json for part #${t + 1} (${s.message})`)
                    }
                }
                Jt.prototype.name = "InvalidTokenError";
                class Zi {
                    constructor(e, t) {
                        this.logger = e,
                        this.sdkConfig = t,
                        this.JOURNEY_ID_KEY = "_yo_jid",
                        this.yofiInstallIdKey = "_yo_iid",
                        this.JOURNEY_TIMEOUT = 18e5,
                        this.JOURNEY_FORCE_TIMEOUT = 432e5
                    }
                    getCachedJourneyId() {
                        let e;
                        try {
                            let t = localStorage.getItem(this.JOURNEY_ID_KEY);
                            t && (e = JSON.parse(t))
                        } catch {
                            this.logger.warn("Error looking up journey id from cache")
                        }
                        return e
                    }
                    setCachedJourneyId(e) {
                        try {
                            let t = Date.now();
                            e.expireAt = t + this.JOURNEY_TIMEOUT,
                            localStorage.setItem(this.JOURNEY_ID_KEY, JSON.stringify(e))
                        } catch {
                            this.logger.warn("Error caching journey id")
                        }
                    }
                    getJourneyId() {
                        var e, t;
                        let r = ""
                          , i = !1
                          , s = this.getCachedJourneyId()
                          , o = Date.now();
                        if (s && o < s.expireAt && o < s.forceExpireAt)
                            r = s.journeyId;
                        else {
                            if (!this.sdkConfig.journeyIdSalt) {
                                let c = "journeyIdSalt required if journeyId is empty";
                                throw this.logger.warn(c),
                                new Error(c)
                            }
                            r = `jid-${Qi(this.sdkConfig.journeyIdSalt + this.getInstallId(), It())}`,
                            s = {
                                journeyId: r,
                                forceExpireAt: o + this.JOURNEY_FORCE_TIMEOUT,
                                expireAt: 0
                            },
                            i = !0
                        }
                        if (this.setCachedJourneyId(s),
                        i)
                            try {
                                (t = (e = this.sdkConfig.yofiTelemetryCallback) === null || e === void 0 ? void 0 : e.onJourneyIdCreated) === null || t === void 0 || t.call(e, r)
                            } catch {
                                this.logger.info("Failed to trigger onJourneyIdCreated event", r)
                            }
                        return r
                    }
                    getInstallId() {
                        let e = `cid-${It()}-${On()}`;
                        try {
                            let t = localStorage.getItem(this.yofiInstallIdKey);
                            t || (t = `cid-${An(this.sdkConfig.publicToken).app_id || It()}-${It()}-${On()}`,
                            this.setInstallId(t)),
                            e = t
                        } catch (t) {
                            this.logger.warn("install-id disabled", t)
                        }
                        return e
                    }
                    setInstallId(e) {
                        localStorage.setItem(this.yofiInstallIdKey, e)
                    }
                    restoreFromAccessToken(e) {
                        if (!e)
                            return;
                        let t = An(e)
                          , r = t.jid || ""
                          , i = t.cid || ""
                          , s = 1e3 * (t.exp || 0);
                        if (this.logger.debug("decoded", {
                            clientId: i,
                            journeyId: r,
                            expires: s
                        }),
                        r && s) {
                            let o = {
                                journeyId: r,
                                expireAt: s,
                                forceExpireAt: s
                            };
                            this.setCachedJourneyId(o)
                        }
                        i && this.setInstallId(i),
                        Je.setCachedTokens(this.sdkConfig.publicToken, e)
                    }
                }
                class es {
                    static ToByteListFeature(e) {
                        return new ke({
                            bytesList: new ct({
                                value: e
                            })
                        })
                    }
                    static ToDoubleListFeature(e) {
                        return new ke({
                            doubleList: new lt({
                                value: e
                            })
                        })
                    }
                    static ToDoubleMapFeature(e) {
                        return new ke({
                            doubleMap: new ut({
                                value: e
                            })
                        })
                    }
                    static ToInt64ListFeature(e) {
                        let t = e?.map(v);
                        return new ke({
                            int64List: new ht({
                                value: t
                            })
                        })
                    }
                    static ToStringListFeature(e) {
                        return new ke({
                            stringList: new dt({
                                value: e
                            })
                        })
                    }
                }
                function Cn(n) {
                    return parseFloat(n)
                }
                function pt(n) {
                    if (Array.isArray(n))
                        return n.map(pt);
                    if (typeof n == "object" && n !== null) {
                        let e = {}
                          , t = Object.keys(n).sort();
                        for (let r of t)
                            e[r] = pt(n[r]);
                        return e
                    }
                    return n
                }
                function Ft(n) {
                    return n.reduce( (e, t) => e + (t ? 1 : 0), 0)
                }
                function Rn() {
                    let n = window;
                    return Ft(["ApplePayError"in n, "CSSPrimitiveValue"in n, "Counter"in n, navigator.vendor.indexOf("Apple") === 0, "RGBColor"in n, "WebKitMediaKeys"in n]) >= 4
                }
                function In() {
                    var n, e;
                    let t = window;
                    return Ft(["buildID"in navigator, "MozAppearance"in ((e = (n = document.documentElement) === null || n === void 0 ? void 0 : n.style) !== null && e !== void 0 ? e : {}), "onmozfullscreenchange"in t, "mozInnerScreenX"in t, "CSSMozDocumentRule"in t, "CanvasCaptureMediaStream"in t]) >= 4
                }
                function kn() {
                    let n = window
                      , e = navigator;
                    return Ft(["webkitPersistentStorage"in e, "webkitTemporaryStorage"in e, e.vendor.indexOf("Google") === 0, "webkitResolveLocalFileSystemURL"in n, "BatteryManager"in n, "webkitMediaStream"in n, "webkitSpeechGrammar"in n]) >= 5
                }
                function Br() {
                    let n = navigator
                      , e = window
                      , t = Audio.prototype
                      , {visualViewport: r} = e;
                    return Ft(["srLatency"in t, "srChannelCount"in t, "devicePosture"in n, r && "segments"in r, "getTextInformation"in Image.prototype]) >= 3
                }
                function Pn() {
                    return typeof navigator == "object" && "brave"in navigator
                }
                async function pr(n) {
                    let e = new TextEncoder().encode(n);
                    return await Kr(e)
                }
                async function Kr(n) {
                    let e = await crypto.subtle.digest("SHA-256", n);
                    return Array.from(new Uint8Array(e)).map(t => t.toString(16).padStart(2, "0")).join("")
                }
                let ts = new Set([10752, 2849, 2884, 2885, 2886, 2928, 2929, 2930, 2931, 2932, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2978, 3024, 3042, 3088, 3089, 3106, 3107, 32773, 32777, 32777, 32823, 32824, 32936, 32937, 32938, 32939, 32968, 32969, 32970, 32971, 3317, 33170, 3333, 3379, 3386, 33901, 33902, 34016, 34024, 34076, 3408, 3410, 3411, 3412, 3413, 3414, 3415, 34467, 34816, 34817, 34818, 34819, 34877, 34921, 34930, 35660, 35661, 35724, 35738, 35739, 36003, 36004, 36005, 36347, 36348, 36349, 37440, 37441, 37443, 7936, 7937, 7938])
                  , rs = new Set([34047, 35723, 36063, 34852, 34853, 34854, 34229, 36392, 36795, 38449])
                  , ns = ["FRAGMENT_SHADER", "VERTEX_SHADER"]
                  , is = ["LOW_FLOAT", "MEDIUM_FLOAT", "HIGH_FLOAT", "LOW_INT", "MEDIUM_INT", "HIGH_INT"]
                  , xn = "WEBGL_debug_renderer_info"
                  , ss = ["powerPreference"];
                function Ln(n) {
                    if (n.webgl)
                        return n.webgl.context;
                    let e = document.createElement("canvas"), t;
                    e.addEventListener("webglCreateContextError", () => t = void 0);
                    for (let r of ["webgl", "experimental-webgl"]) {
                        try {
                            t = e.getContext(r)
                        } catch {}
                        if (t)
                            break
                    }
                    return n.webgl = {
                        context: t
                    },
                    t
                }
                function os(n, e, t) {
                    let r = n.getShaderPrecisionFormat(n[e], n[t]);
                    return r ? [r.rangeMin, r.rangeMax, r.precision] : []
                }
                function Mn(n) {
                    return Object.keys(n.__proto__).filter(as)
                }
                function as(n) {
                    return typeof n == "string" && !n.match(/[^A-Z0-9_x]/)
                }
                function Dn() {
                    return In()
                }
                function Un(n) {
                    return typeof n.getParameter == "function"
                }
                var Gr = {
                    d: (n, e) => {
                        for (var t in e)
                            Gr.o(e, t) && !Gr.o(n, t) && Object.defineProperty(n, t, {
                                enumerable: !0,
                                get: e[t]
                            })
                    }
                    ,
                    o: (n, e) => Object.prototype.hasOwnProperty.call(n, e)
                }
                  , Jn = {};
                Gr.d(Jn, {
                    A: () => us,
                    k: () => jr
                });
                var cs = function(n, e, t, r) {
                    return new (t || (t = Promise))(function(i, s) {
                        function o(l) {
                            try {
                                u(r.next(l))
                            } catch (a) {
                                s(a)
                            }
                        }
                        function c(l) {
                            try {
                                u(r.throw(l))
                            } catch (a) {
                                s(a)
                            }
                        }
                        function u(l) {
                            var a;
                            l.done ? i(l.value) : (a = l.value,
                            a instanceof t ? a : new t(function(d) {
                                d(a)
                            }
                            )).then(o, c)
                        }
                        u((r = r.apply(n, e || [])).next())
                    }
                    )
                }
                  , ls = function(n, e) {
                    var t, r, i, s, o = {
                        label: 0,
                        sent: function() {
                            if (1 & i[0])
                                throw i[1];
                            return i[1]
                        },
                        trys: [],
                        ops: []
                    };
                    return s = {
                        next: c(0),
                        throw: c(1),
                        return: c(2)
                    },
                    typeof Symbol == "function" && (s[Symbol.iterator] = function() {
                        return this
                    }
                    ),
                    s;
                    function c(u) {
                        return function(l) {
                            return function(a) {
                                if (t)
                                    throw new TypeError("Generator is already executing.");
                                for (; s && (s = 0,
                                a[0] && (o = 0)),
                                o; )
                                    try {
                                        if (t = 1,
                                        r && (i = 2 & a[0] ? r.return : a[0] ? r.throw || ((i = r.return) && i.call(r),
                                        0) : r.next) && !(i = i.call(r, a[1])).done)
                                            return i;
                                        switch (r = 0,
                                        i && (a = [2 & a[0], i.value]),
                                        a[0]) {
                                        case 0:
                                        case 1:
                                            i = a;
                                            break;
                                        case 4:
                                            return o.label++,
                                            {
                                                value: a[1],
                                                done: !1
                                            };
                                        case 5:
                                            o.label++,
                                            r = a[1],
                                            a = [0];
                                            continue;
                                        case 7:
                                            a = o.ops.pop(),
                                            o.trys.pop();
                                            continue;
                                        default:
                                            if (!((i = (i = o.trys).length > 0 && i[i.length - 1]) || a[0] !== 6 && a[0] !== 2)) {
                                                o = 0;
                                                continue
                                            }
                                            if (a[0] === 3 && (!i || a[1] > i[0] && a[1] < i[3])) {
                                                o.label = a[1];
                                                break
                                            }
                                            if (a[0] === 6 && o.label < i[1]) {
                                                o.label = i[1],
                                                i = a;
                                                break
                                            }
                                            if (i && o.label < i[2]) {
                                                o.label = i[2],
                                                o.ops.push(a);
                                                break
                                            }
                                            i[2] && o.ops.pop(),
                                            o.trys.pop();
                                            continue
                                        }
                                        a = e.call(n, o)
                                    } catch (d) {
                                        a = [6, d],
                                        r = 0
                                    } finally {
                                        t = i = 0
                                    }
                                if (5 & a[0])
                                    throw a[1];
                                return {
                                    value: a[0] ? a[1] : void 0,
                                    done: !0
                                }
                            }([u, l])
                        }
                    }
                };
                function jr() {
                    return cs(this, void 0, Promise, function() {
                        return ls(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return [4, new Promise(function(e, t) {
                                    var r, i = "Unknown";
                                    function s(c) {
                                        e({
                                            isPrivate: c,
                                            browserName: i
                                        })
                                    }
                                    function o() {
                                        var c = 0;
                                        try {
                                            (-1).toFixed(-1)
                                        } catch (u) {
                                            c = u.message.length
                                        }
                                        return c
                                    }
                                    o() === 44 ? (i = "Safari",
                                    navigator.maxTouchPoints !== void 0 ? function() {
                                        var c = String(Math.random());
                                        try {
                                            window.indexedDB.open(c, 1).onupgradeneeded = function(u) {
                                                var l, a, d = (l = u.target) === null || l === void 0 ? void 0 : l.result;
                                                try {
                                                    d.createObjectStore("test", {
                                                        autoIncrement: !0
                                                    }).put(new Blob),
                                                    s(!1)
                                                } catch (p) {
                                                    var h = p;
                                                    return p instanceof Error && (h = (a = p.message) !== null && a !== void 0 ? a : p),
                                                    typeof h != "string" ? void s(!1) : void s(h.includes("BlobURLs are not yet supported"))
                                                } finally {
                                                    d.close(),
                                                    window.indexedDB.deleteDatabase(c)
                                                }
                                            }
                                        } catch {
                                            s(!1)
                                        }
                                    }() : function() {
                                        var c = window.openDatabase
                                          , u = window.localStorage;
                                        try {
                                            c(null, null, null, null)
                                        } catch {
                                            return void s(!0)
                                        }
                                        try {
                                            u.setItem("test", "1"),
                                            u.removeItem("test")
                                        } catch {
                                            return void s(!0)
                                        }
                                        s(!1)
                                    }()) : o() === 51 ? (r = navigator.userAgent,
                                    i = r.match(/Chrome/) ? navigator.brave !== void 0 ? "Brave" : r.match(/Edg/) ? "Edge" : r.match(/OPR/) ? "Opera" : "Chrome" : "Chromium",
                                    self.Promise !== void 0 && self.Promise.allSettled !== void 0 ? navigator.webkitTemporaryStorage.queryUsageAndQuota(function(c, u) {
                                        var l;
                                        s(Math.round(u / 1048576) < 2 * Math.round(((l = window).performance !== void 0 && l.performance.memory !== void 0 && l.performance.memory.jsHeapSizeLimit !== void 0 ? performance.memory.jsHeapSizeLimit : 1073741824) / 1048576))
                                    }, function(c) {
                                        t(new Error("detectIncognito somehow failed to query storage quota: " + c.message))
                                    }) : (0,
                                    window.webkitRequestFileSystem)(0, 1, function() {
                                        s(!1)
                                    }, function() {
                                        s(!0)
                                    })) : o() === 25 ? (i = "Firefox",
                                    s(navigator.serviceWorker === void 0)) : navigator.msSaveBlob !== void 0 && eval.toString().length === 39 ? (i = "Internet Explorer",
                                    s(window.indexedDB === void 0)) : t(new Error("detectIncognito cannot determine the browser"))
                                }
                                )];
                            case 1:
                                return [2, n.sent()]
                            }
                        })
                    })
                }
                typeof window < "u" && (window.detectIncognito = jr);
                let us = jr;
                var hs = Jn.k;
                function mt(n) {
                    return matchMedia(`(prefers-contrast: ${n})`).matches
                }
                let ds = {
                    architecture: async function() {
                        let n = new Float32Array(1)
                          , e = new Uint8Array(n.buffer);
                        return n[0] = 1 / 0,
                        n[0] = n[0] - n[0],
                        `${e[3]}`
                    },
                    battery: async function() {
                        var n, e;
                        if ("getBattery"in navigator && typeof navigator.getBattery == "function")
                            try {
                                return await ((e = (n = navigator).getBattery) === null || e === void 0 ? void 0 : e.call(n)) !== null ? "1" : "0"
                            } catch {}
                        return "unknown"
                    },
                    browser: async function() {
                        return Pn() ? "Brave" : Br() ? "SamsungInternet" : window.opr || window.opera ? "Opera" : In() ? "Firefox" : function() {
                            let n = window;
                            return e = n.print,
                            /^function\s.*?\{\s*\[native code]\s*}$/.test(String(e)) && String(n.browser) === "[object WebPageNamespace]";
                            var e
                        }() ? "SafariWebKit" : function() {
                            let n = window
                              , {HTMLElement: e, Document: t} = n;
                            return Ft(["safari"in n, !("ongestureend"in n), !("TouchEvent"in n), !("orientation"in n), e && !("autocapitalize"in e.prototype), t && "pointerLockElement"in t.prototype]) >= 4
                        }() ? "DesktopWebKit" : Rn() ? "WebKit-based" : kn() ? "Chromium-based" : "Undetected"
                    },
                    canvas: async function() {
                        try {
                            if (Br())
                                return "unstable";
                            let n = document.createElement("canvas")
                              , e = n.getContext("2d");
                            if (!e)
                                return "unsupported";
                            n.width = 320,
                            n.height = 160;
                            let t = "Bbq yobgo@c gLj \u{1F603}";
                            e.font = "14px 'Arial'",
                            e.textBaseline = "alphabetic",
                            e.fillStyle = "#f60",
                            e.fillRect(125, 1, 62, 20),
                            e.fillStyle = "#069",
                            e.fillText(t, 2, 15),
                            e.fillStyle = "rgba(102, 204, 0, 0.7)",
                            e.arc(75, 75, 50, 0, 2 * Math.PI, !0),
                            e.fill();
                            let r = e.getImageData(0, 0, n.width, n.height).data;
                            return await Kr(r)
                        } catch {
                            return "unknown"
                        }
                    },
                    color_depth: async function() {
                        var n;
                        return `${(n = window.screen) === null || n === void 0 ? void 0 : n.colorDepth}`
                    },
                    color_gamut: async function() {
                        for (let n of ["rec2020", "p3", "srgb"])
                            if (matchMedia(`(color-gamut: ${n})`).matches)
                                return n;
                        return "unknown"
                    },
                    contrast: async function() {
                        return mt("no-preference") ? "none" : mt("high") || mt("more") ? "more" : mt("low") || mt("less") ? "less" : mt("forced") ? "forcedColors" : "unknown"
                    },
                    cookie: async function() {
                        let n = document;
                        try {
                            let e = `_yo_${new Date().getTime()}_cookietest`;
                            n.cookie = `${e}=1;`;
                            let t = n.cookie.indexOf(`${e}=`) !== -1;
                            return n.cookie = `${e}=1; expires=Thu, 01-Jan-1970 00:00:01 GMT`,
                            t ? "1" : "0"
                        } catch {
                            return "0"
                        }
                    },
                    device_memory: async function() {
                        return `${navigator.deviceMemory || "unknown"}`
                    },
                    device_pixel_ratio: async function() {
                        return `${window?.devicePixelRatio || "unknown"}`
                    },
                    device_platform: async function() {
                        let {platform: n} = navigator;
                        return n === "MacIntel" && /AppleWebKit/.test(navigator.userAgent) && /Mobile|iPad|iPhone|iPod/.test(navigator.userAgent) ? /iPad|Mac/.test(navigator.userAgent) && "ontouchend"in document ? "iPad" : "iPhone" : n || "unknown"
                    },
                    fonts: async function() {
                        let n = document.createElement("canvas").getContext("2d")
                          , e = ["sans-serif-thin", "ARNO PRO", "Agency FB", "Arabic Typesetting", "Arial Unicode MS", "AvantGarde Bk BT", "BankGothic Md BT", "Batang", "Bitstream Vera Sans Mono", "Calibri", "Century", "Century Gothic", "Clarendon", "EUROSTILE", "Franklin Gothic", "Futura Bk BT", "Futura Md BT", "GOTHAM", "Gill Sans", "HELV", "Haettenschweiler", "Helvetica Neue", "Humanst521 BT", "Leelawadee", "Letter Gothic", "Levenim MT", "Lucida Bright", "Lucida Sans", "Menlo", "MS Mincho", "MS Outlook", "MS Reference Specialty", "MS UI Gothic", "MT Extra", "MYRIAD PRO", "Marlett", "Meiryo UI", "Microsoft Uighur", "Minion Pro", "Monotype Corsiva", "PMingLiU", "Pristina", "SCRIPTINA", "Segoe UI Light", "Serifa", "SimHei", "Small Fonts", "Staccato222 BT", "TRAJAN PRO", "Univers CE 55 Medium", "Vrinda", "ZWAdobeF"].map(r => new Promise(i => {
                            n.font = `16px ${r}`;
                            let s = n.measureText("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");
                            i(`${r}:${s.width}`)
                        }
                        ))
                          , t = await Promise.all(e);
                        return await pr(t.join("|"))
                    },
                    hardware_concurrency: async function() {
                        return `${navigator.hardwareConcurrency || "unknown"}`
                    },
                    languages: async function() {
                        var n, e = [];
                        return !((n = window.navigator) === null || n === void 0) && n.language && e.push(window.navigator.language),
                        e.join(",")
                    },
                    math_tan: async function() {
                        return `${Math.tan(-1e300)}`
                    },
                    max_touch_points: async function() {
                        try {
                            let e = navigator
                              , t = 0;
                            return e.maxTouchPoints !== void 0 ? (n = e.maxTouchPoints,
                            t = parseInt(n)) : e.msMaxTouchPoints !== void 0 && (t = e.msMaxTouchPoints),
                            `${t}`
                        } catch {
                            return "unknown"
                        }
                        var n
                    },
                    plugin: async function() {
                        let n = navigator.plugins;
                        if (!n)
                            return "unknown";
                        let e = [];
                        for (let t = 0; t < n.length; ++t) {
                            let r = n[t];
                            if (!r)
                                continue;
                            let i = [];
                            for (let s = 0; s < r.length; ++s) {
                                let o = r[s];
                                i.push({
                                    type: o.type,
                                    suffixes: o.suffixes
                                })
                            }
                            e.push({
                                name: r.name,
                                description: r.description,
                                mimeTypes: i
                            })
                        }
                        return await pr(pt(e))
                    },
                    screen_resolution: async function() {
                        if (Pn())
                            return "unstable";
                        let n = document.createElement("canvas");
                        if (!n.getContext("2d"))
                            return "unsupported";
                        let e = window.screen.width * window.devicePixelRatio
                          , t = window.screen.height * window.devicePixelRatio;
                        n.width = e,
                        n.height = t;
                        let r = Math.min(n.width, n.height)
                          , i = Math.max(n.width, n.height);
                        return `${r !== 0 ? function(s, o=3) {
                            if (Math.trunc) {
                                let c = Math.pow(10, o);
                                return (Math.trunc(s * c) / c).toString()
                            }
                            return Number(s).toFixed(o)
                        }(i / r) : "0"}`
                    },
                    storage: async function() {
                        return `localStorage:${function() {
                            var n = `${new Date().getTime()}_local_item`;
                            try {
                                return localStorage.setItem(n, n),
                                localStorage.removeItem(n),
                                1
                            } catch {
                                return 0
                            }
                        }()},sessionStorage:${function() {
                            var n = `${new Date().getTime()}_session_item`;
                            try {
                                return sessionStorage.setItem(n, n),
                                sessionStorage.removeItem(n),
                                1
                            } catch {
                                return 0
                            }
                        }()},indexedDB:${function() {
                            try {
                                return window.indexedDB ? 1 : 0
                            } catch {
                                return 0
                            }
                        }()}`
                    },
                    touch_support: async function() {
                        try {
                            let n;
                            try {
                                document.createEvent("TouchEvent"),
                                n = !0
                            } catch {
                                n = !1
                            }
                            let e = "ontouchstart"in window;
                            return n || e ? "1" : "0"
                        } catch {
                            return "unknown"
                        }
                    },
                    webgl: async function() {
                        try {
                            if (Br())
                                return "unstable";
                            let n = document.createElement("canvas")
                              , e = n.getContext("webgl") || n.getContext("experimental-webgl");
                            if (!e)
                                return "unsupported";
                            let t = new Float32Array([-.5, -.5, 0, .5, -.5, 0, 0, .5, 0])
                              , r = e.createBuffer();
                            e.bindBuffer(e.ARRAY_BUFFER, r),
                            e.bufferData(e.ARRAY_BUFFER, t, e.STATIC_DRAW);
                            let i = e.createShader(e.VERTEX_SHADER);
                            e.shaderSource(i, "attribute vec3 coordinates; void main() { gl_Position = vec4(coordinates, 1.0); }"),
                            e.compileShader(i);
                            let s = e.createShader(e.FRAGMENT_SHADER);
                            e.shaderSource(s, "void main() { gl_FragColor = vec4(0.5, 0.5, 0.5, 1.0); }"),
                            e.compileShader(s);
                            let o = e.createProgram();
                            e.attachShader(o, i),
                            e.attachShader(o, s),
                            e.linkProgram(o),
                            e.useProgram(o),
                            e.drawArrays(e.TRIANGLES, 0, 3);
                            let c = n.width
                              , u = n.height
                              , l = new Uint8Array(c * u * 4);
                            return e.readPixels(0, 0, c, u, e.RGBA, e.UNSIGNED_BYTE, l),
                            await Kr(l)
                        } catch {
                            return "unknown"
                        }
                    },
                    webgl_info: async function() {
                        try {
                            return pr((n = JSON.stringify(await async function() {
                                let e = {
                                    cache: {}
                                }
                                  , t = function({cache: r}) {
                                    var i, s, o, c, u, l;
                                    let a = Ln(r);
                                    if (!a)
                                        return -1;
                                    if (!Un(a))
                                        return -2;
                                    let d = Dn() ? null : a.getExtension(xn);
                                    return {
                                        version: ((i = a.getParameter(a.VERSION)) === null || i === void 0 ? void 0 : i.toString()) || "",
                                        vendor: ((s = a.getParameter(a.VENDOR)) === null || s === void 0 ? void 0 : s.toString()) || "",
                                        vendorUnmasked: d ? (o = a.getParameter(d.UNMASKED_VENDOR_WEBGL)) === null || o === void 0 ? void 0 : o.toString() : "",
                                        renderer: ((c = a.getParameter(a.RENDERER)) === null || c === void 0 ? void 0 : c.toString()) || "",
                                        rendererUnmasked: d ? (u = a.getParameter(d.UNMASKED_RENDERER_WEBGL)) === null || u === void 0 ? void 0 : u.toString() : "",
                                        shadingLanguageVersion: ((l = a.getParameter(a.SHADING_LANGUAGE_VERSION)) === null || l === void 0 ? void 0 : l.toString()) || ""
                                    }
                                }(e);
                                return pt({
                                    basics: t,
                                    extensions: function({cache: r}) {
                                        let i = Ln(r);
                                        if (!i)
                                            return -1;
                                        if (!Un(i))
                                            return -2;
                                        let s = i.getSupportedExtensions()
                                          , o = i.getContextAttributes()
                                          , c = []
                                          , u = []
                                          , l = []
                                          , a = []
                                          , d = [];
                                        if (o)
                                            for (let p of Object.keys(o))
                                                ss.includes(p) || u.push(`${p}=${o[p]}`);
                                        let h = Mn(i);
                                        for (let p of h) {
                                            let N = i[p];
                                            l.push(`${p}=${N}${ts.has(N) ? `=${i.getParameter(N)}` : ""}`)
                                        }
                                        if (s)
                                            for (let p of s) {
                                                if (p === xn && Dn() || p === "WEBGL_polygon_mode" && (kn() || Rn()))
                                                    continue;
                                                let N = i.getExtension(p);
                                                if (N)
                                                    for (let g of Mn(N)) {
                                                        let C = N[g];
                                                        a.push(`${g}=${C}${rs.has(C) ? `=${i.getParameter(C)}` : ""}`)
                                                    }
                                                else
                                                    c.push(p)
                                            }
                                        for (let p of ns)
                                            for (let N of is) {
                                                let g = os(i, p, N);
                                                d.push(`${p}.${N}=${g.join(",")}`)
                                            }
                                        return a.sort(),
                                        l.sort(),
                                        {
                                            contextAttributes: u,
                                            parameters: l,
                                            shaderPrecisions: d,
                                            extensions: s,
                                            extensionParameters: a,
                                            unsupportedExtensions: c
                                        }
                                    }(e)
                                })
                            }()),
                            n.replace(/\s+#[A-Za-z0-9]+"/gm, '"')))
                        } catch {
                            return "unknown"
                        }
                        var n
                    }
                }
                  , gs = {
                    incognito: async function() {
                        try {
                            let {isPrivate: n} = await hs();
                            return n ? "1" : "0"
                        } catch {
                            return "unknown"
                        }
                    },
                    timezone: async function() {
                        var n;
                        let e = (n = window.Intl) === null || n === void 0 ? void 0 : n.DateTimeFormat;
                        if (e) {
                            let r = new e().resolvedOptions().timeZone;
                            if (r)
                                return r
                        }
                        let t = -function() {
                            let r = new Date().getFullYear();
                            return Math.max(Cn(new Date(r,0,1).getTimezoneOffset()), Cn(new Date(r,6,1).getTimezoneOffset()))
                        }();
                        return `UTC${t >= 0 ? "+" : ""}${t}`
                    },
                    version: async function() {
                        return "2025-11-25"
                    }
                };
                class Fn {
                    async get() {
                        let e = performance.now()
                          , {bingGanData: t, additionalData: r} = await this.detectAll()
                          , i = await this.generateHash(t);
                        return {
                            elapsed: performance.now() - e,
                            data: t,
                            addition: r || {},
                            hash: i
                        }
                    }
                    async detectAll() {
                        try {
                            let[e,t] = await Promise.all([this.detect(ds), this.detect(gs)]);
                            return {
                                bingGanData: e,
                                additionalData: t
                            }
                        } catch {
                            return {
                                bingGanData: {},
                                additionalData: {}
                            }
                        }
                    }
                    async generateHash(e) {
                        return `A2:${await pr(JSON.stringify(pt(e)))}`
                    }
                    async detect(e) {
                        let t = Object.keys(e)
                          , r = await Promise.all(t.map(s => {
                            try {
                                return e[s]()
                            } catch {
                                return "unknown"
                            }
                        }
                        ))
                          , i = {};
                        return t.forEach( (s, o) => {
                            i[s] = r[o]
                        }
                        ),
                        pt(i)
                    }
                }
                class Xe extends y {
                    constructor(e) {
                        if (!e.publicToken)
                            throw new Error("publicToken required");
                        super(e),
                        this.logger.debug("initializing Cloud SDK"),
                        this.logger.debug("Environment Details ", {
                            defaultDataPlaneUrl: "https://server.telemetry.services.yofi.ai",
                            defaultNetworkUrl: "https://pcap.services.yofi.ai",
                            allowUrlOverwrite: !1,
                            sendData: !0,
                            disableErrorReporting: !1
                        }),
                        this.publicToken = e.publicToken,
                        this.uuidManager = new Zi(this.logger,e),
                        e.publicToken && e.accessToken && this.uuidManager.restoreFromAccessToken(e.accessToken),
                        this.sessionManager = new $i(this.logger,e,this.uuidManager,!1)
                    }
                    static initialize(e) {
                        let t;
                        return y.instance ? (t = y.instance,
                        t.logger.warn("YofiTelemetry SDK has already been initialized")) : (t = new Xe(e),
                        y.instance = t),
                        t
                    }
                    static getJourneyId() {
                        if (Xe.isInitialized())
                            return this.instance.uuidManager.getJourneyId();
                        throw new Error("YofiTelemetry SDK must be initialized before use")
                    }
                    static startSession(e, t=!1) {
                        var r;
                        return t && this.stopAllSessions(),
                        !((r = e.sensorTypes) === null || r === void 0) && r.length || (e.sensorTypes = [S.FOCUS_CHANGE, S.KEY_PRESS, S.CLICK, S.MOUSE_WHEEL, S.POINTER, S.VIEW_SCROLL, S.INPUT_CHANGE, S.FORM_SUBMIT, S.CLIPBOARD, S.BOTD, S.SELECTION]),
                        e.labels || (e.labels = {}),
                        window?.location && (e.labels.__page_url = T.getCurrentUrl(!0)),
                        y.startSession(e)
                    }
                    static async startNewJourney(e) {
                        if (Xe.isInitialized()) {
                            try {
                                await this.stopAllSessions()
                            } catch {}
                            return this.instance.uuidManager.setCachedJourneyId({
                                journeyId: "",
                                expireAt: 0,
                                forceExpireAt: 0
                            }),
                            Xe.startSession(e, !0)
                        }
                        throw new Error("YofiTelemetry SDK must be initialized before use")
                    }
                    static setClientUserId(e) {
                        y.checkInstance().sessionManager.clientUserId = e
                    }
                    static setYofiTelemetryCallback(e) {
                        y.checkInstance().sessionManager.setYofiTelemetryCallback(e)
                    }
                    static invalidateAppAccessToken() {
                        y.checkInstance().sessionManager.invalidateAppAccessToken()
                    }
                    static getAppAccessToken() {
                        return y.checkInstance().sessionManager.getAppAccessToken()
                    }
                }
                let Wn = Xe
            }
            )(),
            ae
        }
        )())
    }
    );
    var tt = Os(Yn(), 1);
    var As = function() {
        let j = function(R, b=0) {
            let x = 3735928559 ^ b
              , A = 1103547991 ^ b;
            for (let V = 0, y; V < R.length; V++)
                y = R.charCodeAt(V),
                x = Math.imul(x ^ y, 2654435761),
                A = Math.imul(A ^ y, 1597334677);
            return x = Math.imul(x ^ x >>> 16, 2246822507) ^ Math.imul(A ^ A >>> 13, 3266489909),
            A = Math.imul(A ^ A >>> 16, 2246822507) ^ Math.imul(x ^ x >>> 13, 3266489909),
            4294967296 * (2097151 & A) + (x >>> 0)
        }
          , B = () => {
            var R = document.createElement("canvas");
            return !!(R.getContext && R.getContext("2d"))
        }
          , U = () => {
            if (!B())
                return "broprint.js";
            var R = document.createElement("canvas")
              , b = R.getContext("2d")
              , x = "BroPrint.65@345876";
            return b.textBaseline = "top",
            b.font = "14px 'Arial'",
            b.textBaseline = "alphabetic",
            b.fillStyle = "#f60",
            b.fillRect(125, 1, 62, 20),
            b.fillStyle = "#069",
            b.fillText(x, 2, 15),
            b.fillStyle = "rgba(102, 204, 0, 0.7)",
            b.fillText(x, 4, 17),
            R.toDataURL()
        }
          , ae = function() {
            var R = null
              , b = null
              , x = null
              , A = null
              , V = null
              , y = null;
            function q(E, O=!1) {
                y = E;
                try {
                    Q(),
                    x.connect(A),
                    A.connect(R.destination),
                    x.start(0),
                    R.startRendering(),
                    R.oncomplete = w
                } catch (L) {
                    if (O)
                        throw L
                }
            }
            function Q() {
                ce(),
                b = R.currentTime,
                Ce(),
                f()
            }
            function ce() {
                var E = window.OfflineAudioContext || window.webkitOfflineAudioContext;
                R = new E(1,44100,44100)
            }
            function Ce() {
                x = R.createOscillator(),
                x.type = "triangle",
                x.frequency.setValueAtTime(1e4, b)
            }
            function f() {
                A = R.createDynamicsCompressor(),
                m("threshold", -50),
                m("knee", 40),
                m("ratio", 12),
                m("reduction", -20),
                m("attack", 0),
                m("release", .25)
            }
            function m(E, O) {
                A[E] !== void 0 && typeof A[E].setValueAtTime == "function" && A[E].setValueAtTime(O, R.currentTime)
            }
            function w(E) {
                _(E),
                A.disconnect()
            }
            function _(E) {
                for (var O = null, L = 4500; 5e3 > L; L++) {
                    var re = E.renderedBuffer.getChannelData(0)[L];
                    O += Math.abs(re)
                }
                if (V = O.toString(),
                typeof y == "function")
                    return y(V)
            }
            return {
                run: q
            }
        }();
        return {
            getCurrentBrowserFingerPrint: () => {
                let R = new Promise( (x, A) => {
                    ae.run(function(V) {
                        x(V)
                    })
                }
                );
                return new Promise( (x, A) => {
                    R.then(V => {
                        let y = window.btoa(V) + U();
                        x(j(y, 0))
                    }
                    ).catch( () => {
                        try {
                            x(j(U()).toString())
                        } catch {
                            A("Failed to generate the finger print of this browser")
                        }
                    }
                    )
                }
                )
            }
        }
    }()
      , $n = As;
    var zn = ( () => {
        let j = null
          , B = ""
          , U = () => {
            if (Shopify && Shopify.shop)
                return Shopify.shop;
            let w = window.location.hostname
              , _ = document.querySelectorAll("script[src*=yofi-telemetry]");
            if (!_.length)
                return w;
            let E = _[0].src.split("?");
            if (E.length < 2)
                return w;
            let L = new URLSearchParams(E[1]).get("shop");
            return L || w
        }
          , ae = w => new Promise(_ => setTimeout(_, w));
        fetch_timeout = (w, _=3e4) => {
            let E = null
              , O = new Promise( ($, Z) => {
                E = () => Z({
                    code: 504,
                    message: "Request time out"
                })
            }
            )
              , L = Promise.race([w, O])
              , re = setTimeout( () => E(), _);
            return L.then($ => (clearTimeout(re),
            $))
        }
        ;
        let F = (w, _, E, O) => {
            let L = _ === "POST" && E ? JSON.stringify(E) : void 0;
            return fetch_timeout(fetch(w, {
                method: _,
                body: L,
                headers: {
                    "Content-type": "application/json; charset=UTF-8",
                    ...O
                }
            })).then(async re => {
                try {
                    return await re.json()
                } catch {
                    return re
                }
            }
            )
        }
          , R = w => F(w, "GET")
          , b = (w, _, E) => F(w, "POST", _, E)
          , x = w => (Shopify && Shopify.routes && Shopify.routes.root ? Shopify.routes.root : "/") + w
          , A = () => R(x("cart.js"))
          , V = w => b(x("cart/update.js"), {
            attributes: w
        })
          , y = w => {
            let E = document.cookie.split(";").find(L => L.includes(w + "="));
            if (!E)
                throw new Error("Could not find cookie " + w);
            let O = E.split("=");
            return O.length === 2 ? O[1] : ""
        }
          , q = () => {
            setInterval( () => {
                try {
                    let w = y("cart");
                    w && w !== B && (B = w,
                    m({
                        cart_token: w
                    }))
                } catch {}
            }
            , 500)
        }
          , Q = async () => {
            try {
                let w = await $n.getCurrentBrowserFingerPrint();
                return w ? `${w}` : null
            } catch {}
            return null
        }
          , ce = async (w, _={
            defaultDataPlaneUrl: "",
            defaultNetworkUrl: ""
        }) => {
            f(w, _)
        }
          , Ce = async w => {
            let _ = 5
              , E = null;
            do
                try {
                    if (await V({
                        journey_id: w
                    }),
                    E = await A(),
                    E && E.attributes && E.attributes.journey_id)
                        return E;
                    throw new Error(`Updating cart attributes for ${w} failed`)
                } catch {
                    await ae(500),
                    _--
                }
            while (_ > 0);
            return E
        }
          , f = async (w, _) => {
            let E = U()
              , O = {
                onSessionStarted: $ => {
                    j = $,
                    console.log("y_x_t_start"),
                    Promise.all([Ce(tt.YofiTelemetry.getJourneyId()), Q()]).then(Z => {
                        if (Z && Z.length == 2) {
                            let Re = Z[0]
                              , ee = Z[1]
                              , De = Re ? Re.token : null;
                            m({
                                bro_print: ee,
                                cart_token: De
                            })
                        }
                    }
                    ).finally( () => {
                        q()
                    }
                    )
                }
                ,
                onSessionStopped: $ => {
                    initializedSession = null,
                    console.log("y_x_t_stop")
                }
                ,
                onSessionError: $ => {
                    console.error("y_x_t_error", $)
                }
            }
              , L = {
                page_url: location.host + location.pathname,
                shop: E
            };
            try {
                let $ = ShopifyAnalytics.lib.user().traits().uniqToken;
                $ && (L.uniq_token = $)
            } catch {}
            var re = 2e3;
            tt.YofiTelemetry.isInitialized() || tt.YofiTelemetry.initialize({
                logLevel: tt.LogLevel.ERROR,
                publicToken: w,
                yofiTelemetryCallback: O,
                bundleGenerationInterval: re,
                defaultDataPlaneUrl: _.defaultDataPlaneUrl,
                defaultNetworkUrl: _.defaultNetworkUrl,
                journeyIdSalt: E,
                clientDomain: E
            }),
            ShopifyAnalytics && ShopifyAnalytics.meta && ShopifyAnalytics.meta.page && ShopifyAnalytics.meta.page.customerId && (L.customer_id = `${ShopifyAnalytics.meta.page.customerId}`),
            tt.YofiTelemetry.startSession({
                duration: 900 * 1e3,
                labels: L,
                networkTelemetryConfig: {
                    ip: !0
                }
            })
        }
          , m = w => {
            if (!j)
                return;
            let _ = j.getLabels()
              , E = {};
            Object.keys(w).forEach(O => {
                _[O] || (E[O] = w[O])
            }
            ),
            Object.keys(E).length && j.addLabels(E)
        }
        ;
        return {
            init: ce
        }
    }
    )();
    var Cs = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfaWQiOiI3N2IzOTVlNy0zYzEzLTQxMjEtOTg5NC1mOGQyMWUzZTU5N2YiLCJqdGkiOiJiOWQwYTRlMy0zYjFlLTQ4NmUtYWYzNi0zOTc2ODBmMmNiNzYiLCJ0eXBlIjoxfQ.eWklHuUxRlqOYK8PFB8LlMA_omB2aDgiiA0LolW4A9k";
    zn.init(Cs, {
        defaultDataPlaneUrl: "https://server.telemetry.services.yofi.ai",
        defaultNetworkUrl: "https://pcap.services.yofi.ai"
    });
}
)();
/*! Bundled license information:

@yofi-ai/telemetry-web-sdk/lib/yofi-telemetry-web-sdk.js:
  (*!
   *
   * detectIncognito v1.3.6
   *
   * https://github.com/Joe12387/detectIncognito
   *
   * MIT License
   *
   * Copyright (c) 2021 - 2024 Joe Rutkowski <Joe@dreggle.com>
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   *
   * Please keep this comment intact in order to properly abide by the MIT License.
   *
   **)
*/
